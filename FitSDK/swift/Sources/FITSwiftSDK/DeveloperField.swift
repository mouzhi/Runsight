/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


import Foundation

public class DeveloperField: FieldBase {
    
    public private(set) var developerFieldDefinition: DeveloperFieldDefinition
    
    // MARK: Initializers
    public init(def: DeveloperFieldDefinition) {
        self.developerFieldDefinition = def
        super.init()
    }
    
    public init(fieldDescription: FieldDescriptionMesg, developerDataIdMesg: DeveloperDataIdMesg) {
        self.developerFieldDefinition = DeveloperFieldDefinition(fieldDescriptionMesg: fieldDescription, developerDataIdMesg: developerDataIdMesg, size: 0)
        super.init()
    }
    
    public init(developerField: DeveloperField) {
        self.developerFieldDefinition = developerField.developerFieldDefinition
        super.init(fieldBase: developerField)
    }
    
    public var nativeOverride: UInt8? {
        return developerFieldDefinition.fieldDescriptionMesg?.getNativeFieldNum()
    }
    
    // MARK: FieldBase Overrides
    
    public override func getName() -> String {
        return developerFieldDefinition.fieldDescriptionMesg?.getFieldName(index: 0) ?? ""
    }
    
    public override func getNum() -> UInt8 {
        return developerFieldDefinition.fieldDefinitionNumber
    }
    
    public override func getBaseType() -> BaseType {
        let fitBaseTypeId = developerFieldDefinition.fieldDescriptionMesg?.getFitBaseTypeId()?.rawValue ?? BaseType.BYTE.rawValue
        return BaseType(rawValue: fitBaseTypeId) ?? BaseType.BYTE
    }
    
    override func getScale() -> Float64 {
        return Float64(developerFieldDefinition.fieldDescriptionMesg?.getScale() ?? 1)
    }
    
    override func getOffset() -> Float64 {
        return Float64(developerFieldDefinition.fieldDescriptionMesg?.getOffset() ?? 0)
    }
    
    public override func getUnits() -> String {
        return developerFieldDefinition.fieldDescriptionMesg?.getUnits(index: 0) ?? ""
    }
    
    override func getSubField(subFieldName: String) -> SubField? {
        return nil
    }
    
    override func getSubField(subFieldIndex: Int) -> SubField? {
        return nil
    }
}
