/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


import Foundation

public class Encoder: MesgListener, MesgDefinitionListener {
    private let outputStream = OutputStream()
    
    private var localMesgDefinitions: [LocalMesgNum: MesgDefinition] = [:]
    
    public init() {
        // Reserve space for the File Header
        let reserve = [UInt8](repeating: 0, count: Int(FileHeader.HeaderType.withCRC.rawValue))
        outputStream.append(contentsOf: reserve)
    }
    
    public func close() -> Data {
        let fileHeader = FileHeader()
        fileHeader.dataSize = UInt32(outputStream.count - Int(fileHeader.headerSize))
        fileHeader.updateCrc()
        outputStream.replaceSubrange(0..<Data.Index(FIT.HEADER_WITH_CRC_SIZE), with: fileHeader.data)
        
        let fileCrc = CrcCalculator.calculateCRC(data: outputStream.data)
        outputStream.append(contentsOf: fileCrc.bytes)
        
        return outputStream.data
    }
    
    public func onMesg(_ mesg: Mesg) {
        write(mesg: mesg)
    }
    
    public func onMesgDefinition(_ mesgDefinition: MesgDefinition) {
        write(mesgDefinition: mesgDefinition)
    }

    public func write(mesgs: [Mesg]) {
        for mesg in mesgs {
            write(mesg: mesg)
        }
    }
    
    public func write(mesg: Mesg) {
        let mesgDefinition = MesgDefinition(mesg: mesg)
        if(localMesgDefinitions[mesgDefinition.localMesgNum] == nil
        || localMesgDefinitions[mesgDefinition.localMesgNum] != mesgDefinition) {
            write(mesgDefinition: mesgDefinition)
        }
        
        mesg.write(outputStream: outputStream, mesgDefinition: mesgDefinition)
    }
    
    public func write(mesgDefinition: MesgDefinition) {
        mesgDefinition.write(outputStream: outputStream)
        
        localMesgDefinitions[mesgDefinition.localMesgNum] = mesgDefinition
    }
    
}
