/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


import Foundation

class DeveloperDataLookup {
    static let shared = DeveloperDataLookup()
    
    private var fieldDescriptionMesgs: [DeveloperDataKey: FieldDescriptionMesg]
    private var developerDataIdMesgs: [UInt8: DeveloperDataIdMesg]
    
    private init() {
        self.fieldDescriptionMesgs = [DeveloperDataKey: FieldDescriptionMesg]()
        self.developerDataIdMesgs = [UInt8: DeveloperDataIdMesg]()
    }
    
    public func getDeveloperFieldDefinition(developerDataIdMesg: DeveloperDataIdMesg, fieldDescriptionMesg: FieldDescriptionMesg) -> DeveloperFieldDefinition? {
        guard let key: DeveloperDataKey = DeveloperDataKey(developerDataIdMesg: developerDataIdMesg, fieldDescriptionMesg: fieldDescriptionMesg),
        let developerDataIdMesgFound: DeveloperDataIdMesg = self.developerDataIdMesgs[developerDataIdMesg.getDeveloperDataIndex()!],
        let fieldDescriptionMesgFound: FieldDescriptionMesg = self.fieldDescriptionMesgs[key] else {
                  return nil
              }
        
        return DeveloperFieldDefinition(fieldDescriptionMesg: fieldDescriptionMesgFound, developerDataIdMesg: developerDataIdMesgFound, size: 0)
    }
    
    public func getDeveloperFieldDefinition(developerDataIndex: UInt8, fieldDescriptionNumber: UInt8) -> DeveloperFieldDefinition? {
        let key: DeveloperDataKey = DeveloperDataKey(developerDataIndex: developerDataIndex, fieldDescriptionNumber: fieldDescriptionNumber)
        
        guard let developerDataIdMesgFound: DeveloperDataIdMesg = self.developerDataIdMesgs[developerDataIndex],
              let fieldDescriptionMesgFound: FieldDescriptionMesg = self.fieldDescriptionMesgs[key] else {
                  return nil
              }
        
        return DeveloperFieldDefinition(fieldDescriptionMesg: fieldDescriptionMesgFound, developerDataIdMesg: developerDataIdMesgFound, size: 0)
    }
    
    public func addDeveloperDataIdMesg(mesg: DeveloperDataIdMesg) {
        let index = mesg.getDeveloperDataIndex()
        if (index == nil) {
            return
        }
        
        developerDataIdMesgs[index!] = mesg
        
        // Remove existing field description messages if any exist for the developer data index
        fieldDescriptionMesgs = fieldDescriptionMesgs.filter({ $0.value.getDeveloperDataIndex() != index })
    }
    
    @discardableResult
    public func addFieldDescriptionMesg(mesg: FieldDescriptionMesg) -> DeveloperFieldDescription? {
        guard let developerDataIdMesg = developerDataIdMesgs[mesg.getDeveloperDataIndex()!],
        let key = DeveloperDataKey(developerDataIdMesg: developerDataIdMesg, fieldDescriptionMesg: mesg) else {
            return nil
        }
        
        fieldDescriptionMesgs[key] = mesg
        
        return DeveloperFieldDescription(developerDataIdMesg: developerDataIdMesg, fieldDescriptionMesg: mesg)
    }
    
}


