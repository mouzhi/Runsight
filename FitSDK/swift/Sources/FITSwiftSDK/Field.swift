/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


import Foundation

open class Field: FieldBase {
    let name: String
    let num: UInt8
    let type: UInt8
    let scale: Float64
    let offset: Float64
    let units: String
    let accumulated: Bool
    var subFields: [SubField] = []
    var components: [FieldComponent] = []
    
    var isExpandedField: Bool
    
    var baseType: BaseType {
        return BaseType(rawValue: type)!
    }
    
    var hasComponents: Bool {
        return self.components.count > 0
    }

    // MARK: Initializers
    public init(field: Field) {
        self.name = field.name
        self.num = field.num
        self.type = field.type
        self.scale = field.scale
        self.offset = field.offset
        self.units = field.units
        self.accumulated = field.accumulated
        self.isExpandedField = field.isExpandedField
        
        for subfield in field.subFields {
            self.subFields.append(subfield)
        }
        
        for component in field.components {
            self.components.append(component)
        }
        
        super.init(fieldBase: field)
    }
    
    init(name: String, num: UInt8, type: UInt8, scale: Float64, offset:Float64, units: String, accumulated: Bool) {
        self.name = name
        self.num = num
        self.type = type
        self.scale = scale
        self.offset = offset
        self.units = units
        self.accumulated = accumulated
        self.isExpandedField = false
                
        super.init()
    }
    
    // MARK: Getters
    public override func getName() -> String {
        return getName(subField: nil)
    }
    public func getName(subFieldIndex: Int) -> String {
        let subField = getSubField(subFieldIndex: subFieldIndex)
        return getName(subField: subField)
    }
    public func getName(subFieldName: String) -> String {
        let subField = getSubField(subFieldName: subFieldName)
        return getName(subField: subField)
    }
    func getName(subField: SubField?) -> String {
        return subField?.name ?? name
    }
    
    public func getType() -> UInt8 {
        return getType(subField: nil)
    }
    public func getType(subFieldIndex: Int) -> UInt8 {
        let subField = getSubField(subFieldIndex: subFieldIndex)
        return getType(subField: subField)
    }
    public func getType(subFieldName: String) -> UInt8 {
        let subField = getSubField(subFieldName: subFieldName)
        return getType(subField: subField)
    }
    func getType(subField: SubField?) -> UInt8 {
        return subField?.type ?? type
    }

    public override func getUnits() -> String {
        return getUnits(subField: nil)
    }
    public func getUnits(subFieldIndex: Int) -> String {
        let subField = getSubField(subFieldIndex: subFieldIndex)
        return getUnits(subField: subField)
    }
    public func getUnits(subFieldName: String) -> String {
        let subField = getSubField(subFieldName: subFieldName)
        return getUnits(subField: subField)
    }
    func getUnits(subField: SubField?) -> String {
        return subField?.units ?? units
    }
    
    public override func getNum() -> UInt8 {
        return num
    }
    
    override func getScale() -> Float64 {
        return scale
    }
    
    override func getOffset() -> Float64 {
        return offset
    }
    
    public override func getBaseType() -> BaseType {
        return baseType
    }
    
    override func getSubField(subFieldName: String) -> SubField? {
        return subFields.first(where: { $0.name == subFieldName }) ?? nil
    }
    
    override func getSubField(subFieldIndex: Int) -> SubField? {
        // SubfieldIndexActiveSubfield and SubfieldIndexMainField
        // will be out of this range
        if (subFieldIndex >= 0 && subFieldIndex < subFields.count) {
            return subFields[subFieldIndex]
        }
        
        return nil
    }

    func addComponent(newComponent: FieldComponent) {
        components.append(newComponent)
    }
}
