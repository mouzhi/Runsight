/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


import Foundation

public class FileHeader {
    public let headerType: HeaderType
    public let protocolVersion: ProtocolVersion
    public let profileVersion: UInt16
    public var dataSize: UInt32
    public let dataType: DataType
    public private(set) var crc: UInt16 = 0
    
    public enum HeaderType: UInt8 {
        case withoutCRC = 12
        case withCRC = 14
        case invalid = 255
    }
    
    public enum DataType: String {
        case fit = ".FIT"
        case unknown = "Unknown"
    }
    
    var headerSize: UInt8 {
        return headerType.rawValue
    }
    
    public init() {
        headerType = .withCRC
        self.protocolVersion = .v20
        profileVersion = FIT.PROFILE_VERSION
        dataSize = 0x00000000
        dataType = .fit
    }

public init(stream: InputStream) throws {
    headerType = HeaderType(rawValue: try stream.readNumeric()) ?? .invalid
    protocolVersion = ProtocolVersion(rawValue: try stream.readNumeric()) ?? .invalid
    profileVersion = try stream.readNumeric()
    dataSize = try stream.readNumeric()
    dataType = DataType(rawValue: try stream.readString(size: 4 )) ?? .unknown
    
    if(headerType == .withCRC) {
        crc = try stream.readNumeric()
    }
}
    
    public func updateCrc() {
        let data = self.data[..<12]
        self.crc = CrcCalculator.calculateCRC(data: data)
    }
    
    public func write(stream: OutputStream) {
        stream.append(data)
    }
    
    var data: Data {
        return Data(self.bytes)
    }
    
    var bytes: [UInt8] {
        var headerBytes : [UInt8] = []
        headerBytes.reserveCapacity(Int(HeaderType.withCRC.rawValue))

        headerBytes.append(contentsOf: headerType.rawValue.bytes)
        headerBytes.append(contentsOf: protocolVersion.rawValue.bytes)
        headerBytes.append(contentsOf: profileVersion.bytes)
        headerBytes.append(contentsOf: dataSize.bytes)
        headerBytes.append(contentsOf: dataType.rawValue.utf8)
        headerBytes.append(contentsOf: crc.bytes)
        
        return headerBytes
    }
}
