/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


import Foundation

public class FieldDefinition: Equatable {
    public let num: UInt8
    public let size: UInt8
    public let type: UInt8
    
    public init(stream: InputStream) throws {
        num = try stream.readNumeric()
        size = try stream.readNumeric()
        type = try stream.readNumeric()
    }

    public init(field: Field) {
        self.num = field.num
        self.size = field.size
        self.type = field.type
    }
    
    public init(num:UInt8, size:UInt8, type:UInt8) {
        self.num = num
        self.size = size
        self.type = type
    }
    
    public convenience init(num:UInt8, size:UInt8, type:BaseType) {
        self.init(num: num, size: size, type: type.rawValue)
    }
    
    public var count: UInt8 {
        return size / baseType.size
    }
    
    public var baseType: BaseType {
        return BaseType(rawValue: type)!
    }
    
    public func write(outputStream: OutputStream) {
        outputStream.append(value: num)
        outputStream.append(value: size)
        outputStream.append(value: type)
    }
    
    // MARK: Equatable
    public static func == (lhs: FieldDefinition, rhs: FieldDefinition) -> Bool {
        return lhs.num == rhs.num
            && lhs.size == rhs.size
            && lhs.type == rhs.type
    }
}
