/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


/// BufferedMesgBroadcaster intercepts the incoming messages, buffers them,
/// and offers an opportunity to edit the messages before broadcasting
/// the messages to all registered listeners.
///
/// To edit the messages, a MesgBroadcastPlugin must be
/// registered. All registered MesgBroadcastPlugins are given
/// the opportunity to see each message as they are decoded,
/// as well as to see and edit the final list of
/// messages before broadcast to listeners
public class BufferedMesgBroadcaster: MesgBroadcaster {
    private var mesgs = [Mesg]()
    private var plugins = [MesgBroadcastPlugin]()

    /// Registers a plugin, which the class will call on onMesg and broadcast
    /// - Parameter plugin: The MesgBroadcastPlugin object to be registered
    public func registerMesgBroadcastPlugin(_ plugin: MesgBroadcastPlugin) {
        plugins.append(plugin)
    }

    /// Buffers incoming messages and passes them on to any registered plugins
    /// - Parameter mesg: The Mesg to be processed
    override public func onMesg(_ mesg: Mesg) {
        mesgs.append(mesg)

        // Pass the message to each plugin. This gives the
        // plugin a chance to peek the incoming messages
        for plugin in plugins {
            plugin.onIncomingMesg(mesg: mesg)
        }
    }

    /// Passes the reference to the list of messages to any registered plugins.
    /// Sends each message to the MesgBroadcast class to be broadcast to any listeners
    public func broadcast() throws {
        for plugin in plugins {
            try plugin.onBroadcast(mesgs: &mesgs)
        }

        for mesg in mesgs {
            super.onMesg(mesg)
        }
    }
}
