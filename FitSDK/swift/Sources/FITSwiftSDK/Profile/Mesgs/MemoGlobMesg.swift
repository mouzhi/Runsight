/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class MemoGlobMesg : Mesg {
    public static let partIndexFieldNum:UInt8 = 250
    public static let memoFieldNum:UInt8 = 0
    public static let mesgNumFieldNum:UInt8 = 1
    public static let parentIndexFieldNum:UInt8 = 2
    public static let fieldNumFieldNum:UInt8 = 3
    public static let dataFieldNum:UInt8 = 4

	public init() {
        super.init(mesg: MemoGlobMesg.createMemoGlobMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getPartIndex() -> UInt32? {
		guard let value = getFieldValue(fieldNum: MemoGlobMesg.partIndexFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setPartIndex(_ value: UInt32) throws {
		try setFieldValue(fieldNum: MemoGlobMesg.partIndexFieldNum, value: value)
	}

	public func getNumMemo() -> UInt8 {
		guard let field = getField(fieldNum: MemoGlobMesg.memoFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getMemo() -> [UInt8?]? {
		guard let field = getField(fieldNum: MemoGlobMesg.memoFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt8?]
	}

	public func getMemo(index: Int) -> UInt8? {
		guard let value = getFieldValue(fieldNum: MemoGlobMesg.memoFieldNum, index: index) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setMemo(index: Int, value: UInt8) throws {
		try setFieldValue(fieldNum: MemoGlobMesg.memoFieldNum, value: value, index: index)
	}

	public func getMesgNum() -> MesgNum? {
		guard let value = getFieldValue(fieldNum: MemoGlobMesg.mesgNumFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return MesgNum(rawValue: value) ?? .invalid
	}

	public func setMesgNum(_ value: MesgNum) throws {
		try setFieldValue(fieldNum: MemoGlobMesg.mesgNumFieldNum, value: value.rawValue)
	}

	public func getParentIndex() -> MessageIndex? {
		guard let value = getFieldValue(fieldNum: MemoGlobMesg.parentIndexFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setParentIndex(_ value: MessageIndex) throws {
		try setFieldValue(fieldNum: MemoGlobMesg.parentIndexFieldNum, value: value)
	}

	public func getFieldNum() -> UInt8? {
		guard let value = getFieldValue(fieldNum: MemoGlobMesg.fieldNumFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setFieldNum(_ value: UInt8) throws {
		try setFieldValue(fieldNum: MemoGlobMesg.fieldNumFieldNum, value: value)
	}

	public func getNumData() -> UInt8 {
		guard let field = getField(fieldNum: MemoGlobMesg.dataFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getData() -> [UInt8?]? {
		guard let field = getField(fieldNum: MemoGlobMesg.dataFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt8?]
	}

	public func getData(index: Int) -> UInt8? {
		guard let value = getFieldValue(fieldNum: MemoGlobMesg.dataFieldNum, index: index) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setData(index: Int, value: UInt8) throws {
		try setFieldValue(fieldNum: MemoGlobMesg.dataFieldNum, value: value, index: index)
	}

	public class func createMemoGlobMesg() -> MemoGlobMesg {
        let mesg = MemoGlobMesg(name: "MemoGlob", num: Profile.MesgNum.memoGlob)
		
		mesg.fields[MemoGlobMesg.partIndexFieldNum] = Field(name: "PartIndex", num: MemoGlobMesg.partIndexFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[MemoGlobMesg.memoFieldNum] = Field(name: "Memo", num: MemoGlobMesg.memoFieldNum, type: BaseType.BYTE.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[MemoGlobMesg.mesgNumFieldNum] = Field(name: "MesgNum", num: MemoGlobMesg.mesgNumFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[MemoGlobMesg.parentIndexFieldNum] = Field(name: "ParentIndex", num: MemoGlobMesg.parentIndexFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[MemoGlobMesg.fieldNumFieldNum] = Field(name: "FieldNum", num: MemoGlobMesg.fieldNumFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[MemoGlobMesg.dataFieldNum] = Field(name: "Data", num: MemoGlobMesg.dataFieldNum, type: BaseType.UINT8Z.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
        return mesg
    }
}