/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class GyroscopeDataMesg : Mesg {
    public static let timestampFieldNum:UInt8 = 253
    public static let timestampMsFieldNum:UInt8 = 0
    public static let sampleTimeOffsetFieldNum:UInt8 = 1
    public static let gyroXFieldNum:UInt8 = 2
    public static let gyroYFieldNum:UInt8 = 3
    public static let gyroZFieldNum:UInt8 = 4
    public static let calibratedGyroXFieldNum:UInt8 = 5
    public static let calibratedGyroYFieldNum:UInt8 = 6
    public static let calibratedGyroZFieldNum:UInt8 = 7

	public init() {
        super.init(mesg: GyroscopeDataMesg.createGyroscopeDataMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getTimestamp() -> DateTime? {
		guard let value = getFieldValue(fieldNum: GyroscopeDataMesg.timestampFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setTimestamp(_ value: DateTime) throws {
		try setFieldValue(fieldNum: GyroscopeDataMesg.timestampFieldNum, value: value.timestamp)
	}

	public func getTimestampMs() -> UInt16? {
		guard let value = getFieldValue(fieldNum: GyroscopeDataMesg.timestampMsFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setTimestampMs(_ value: UInt16) throws {
		try setFieldValue(fieldNum: GyroscopeDataMesg.timestampMsFieldNum, value: value)
	}

	public func getNumSampleTimeOffset() -> UInt8 {
		guard let field = getField(fieldNum: GyroscopeDataMesg.sampleTimeOffsetFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getSampleTimeOffset() -> [UInt16?]? {
		guard let field = getField(fieldNum: GyroscopeDataMesg.sampleTimeOffsetFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt16?]
	}

	public func getSampleTimeOffset(index: Int) -> UInt16? {
		guard let value = getFieldValue(fieldNum: GyroscopeDataMesg.sampleTimeOffsetFieldNum, index: index) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setSampleTimeOffset(index: Int, value: UInt16) throws {
		try setFieldValue(fieldNum: GyroscopeDataMesg.sampleTimeOffsetFieldNum, value: value, index: index)
	}

	public func getNumGyroX() -> UInt8 {
		guard let field = getField(fieldNum: GyroscopeDataMesg.gyroXFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getGyroX() -> [UInt16?]? {
		guard let field = getField(fieldNum: GyroscopeDataMesg.gyroXFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt16?]
	}

	public func getGyroX(index: Int) -> UInt16? {
		guard let value = getFieldValue(fieldNum: GyroscopeDataMesg.gyroXFieldNum, index: index) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setGyroX(index: Int, value: UInt16) throws {
		try setFieldValue(fieldNum: GyroscopeDataMesg.gyroXFieldNum, value: value, index: index)
	}

	public func getNumGyroY() -> UInt8 {
		guard let field = getField(fieldNum: GyroscopeDataMesg.gyroYFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getGyroY() -> [UInt16?]? {
		guard let field = getField(fieldNum: GyroscopeDataMesg.gyroYFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt16?]
	}

	public func getGyroY(index: Int) -> UInt16? {
		guard let value = getFieldValue(fieldNum: GyroscopeDataMesg.gyroYFieldNum, index: index) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setGyroY(index: Int, value: UInt16) throws {
		try setFieldValue(fieldNum: GyroscopeDataMesg.gyroYFieldNum, value: value, index: index)
	}

	public func getNumGyroZ() -> UInt8 {
		guard let field = getField(fieldNum: GyroscopeDataMesg.gyroZFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getGyroZ() -> [UInt16?]? {
		guard let field = getField(fieldNum: GyroscopeDataMesg.gyroZFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt16?]
	}

	public func getGyroZ(index: Int) -> UInt16? {
		guard let value = getFieldValue(fieldNum: GyroscopeDataMesg.gyroZFieldNum, index: index) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setGyroZ(index: Int, value: UInt16) throws {
		try setFieldValue(fieldNum: GyroscopeDataMesg.gyroZFieldNum, value: value, index: index)
	}

	public func getNumCalibratedGyroX() -> UInt8 {
		guard let field = getField(fieldNum: GyroscopeDataMesg.calibratedGyroXFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getCalibratedGyroX() -> [Float32?]? {
		guard let field = getField(fieldNum: GyroscopeDataMesg.calibratedGyroXFieldNum) else {
			return nil
		}
		return field.toArray() as [Float32?]
	}

	public func getCalibratedGyroX(index: Int) -> Float32? {
		guard let value = getFieldValue(fieldNum: GyroscopeDataMesg.calibratedGyroXFieldNum, index: index) as? Float32 else {
            return nil
        }
		return value
	}

	public func setCalibratedGyroX(index: Int, value: Float32) throws {
		try setFieldValue(fieldNum: GyroscopeDataMesg.calibratedGyroXFieldNum, value: value, index: index)
	}

	public func getNumCalibratedGyroY() -> UInt8 {
		guard let field = getField(fieldNum: GyroscopeDataMesg.calibratedGyroYFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getCalibratedGyroY() -> [Float32?]? {
		guard let field = getField(fieldNum: GyroscopeDataMesg.calibratedGyroYFieldNum) else {
			return nil
		}
		return field.toArray() as [Float32?]
	}

	public func getCalibratedGyroY(index: Int) -> Float32? {
		guard let value = getFieldValue(fieldNum: GyroscopeDataMesg.calibratedGyroYFieldNum, index: index) as? Float32 else {
            return nil
        }
		return value
	}

	public func setCalibratedGyroY(index: Int, value: Float32) throws {
		try setFieldValue(fieldNum: GyroscopeDataMesg.calibratedGyroYFieldNum, value: value, index: index)
	}

	public func getNumCalibratedGyroZ() -> UInt8 {
		guard let field = getField(fieldNum: GyroscopeDataMesg.calibratedGyroZFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getCalibratedGyroZ() -> [Float32?]? {
		guard let field = getField(fieldNum: GyroscopeDataMesg.calibratedGyroZFieldNum) else {
			return nil
		}
		return field.toArray() as [Float32?]
	}

	public func getCalibratedGyroZ(index: Int) -> Float32? {
		guard let value = getFieldValue(fieldNum: GyroscopeDataMesg.calibratedGyroZFieldNum, index: index) as? Float32 else {
            return nil
        }
		return value
	}

	public func setCalibratedGyroZ(index: Int, value: Float32) throws {
		try setFieldValue(fieldNum: GyroscopeDataMesg.calibratedGyroZFieldNum, value: value, index: index)
	}

	public class func createGyroscopeDataMesg() -> GyroscopeDataMesg {
        let mesg = GyroscopeDataMesg(name: "GyroscopeData", num: Profile.MesgNum.gyroscopeData)
		
		mesg.fields[GyroscopeDataMesg.timestampFieldNum] = Field(name: "Timestamp", num: GyroscopeDataMesg.timestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
		mesg.fields[GyroscopeDataMesg.timestampMsFieldNum] = Field(name: "TimestampMs", num: GyroscopeDataMesg.timestampMsFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "ms", accumulated: false)
		mesg.fields[GyroscopeDataMesg.sampleTimeOffsetFieldNum] = Field(name: "SampleTimeOffset", num: GyroscopeDataMesg.sampleTimeOffsetFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "ms", accumulated: false)
		mesg.fields[GyroscopeDataMesg.gyroXFieldNum] = Field(name: "GyroX", num: GyroscopeDataMesg.gyroXFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "counts", accumulated: false)
		mesg.fields[GyroscopeDataMesg.gyroYFieldNum] = Field(name: "GyroY", num: GyroscopeDataMesg.gyroYFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "counts", accumulated: false)
		mesg.fields[GyroscopeDataMesg.gyroZFieldNum] = Field(name: "GyroZ", num: GyroscopeDataMesg.gyroZFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "counts", accumulated: false)
		mesg.fields[GyroscopeDataMesg.calibratedGyroXFieldNum] = Field(name: "CalibratedGyroX", num: GyroscopeDataMesg.calibratedGyroXFieldNum, type: BaseType.FLOAT32.rawValue, scale: 1, offset: 0, units: "deg/s", accumulated: false)
		mesg.fields[GyroscopeDataMesg.calibratedGyroYFieldNum] = Field(name: "CalibratedGyroY", num: GyroscopeDataMesg.calibratedGyroYFieldNum, type: BaseType.FLOAT32.rawValue, scale: 1, offset: 0, units: "deg/s", accumulated: false)
		mesg.fields[GyroscopeDataMesg.calibratedGyroZFieldNum] = Field(name: "CalibratedGyroZ", num: GyroscopeDataMesg.calibratedGyroZFieldNum, type: BaseType.FLOAT32.rawValue, scale: 1, offset: 0, units: "deg/s", accumulated: false)
        return mesg
    }
}