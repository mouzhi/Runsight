/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class TimestampCorrelationMesg : Mesg {
    public static let timestampFieldNum:UInt8 = 253
    public static let fractionalTimestampFieldNum:UInt8 = 0
    public static let systemTimestampFieldNum:UInt8 = 1
    public static let fractionalSystemTimestampFieldNum:UInt8 = 2
    public static let localTimestampFieldNum:UInt8 = 3
    public static let timestampMsFieldNum:UInt8 = 4
    public static let systemTimestampMsFieldNum:UInt8 = 5

	public init() {
        super.init(mesg: TimestampCorrelationMesg.createTimestampCorrelationMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getTimestamp() -> DateTime? {
		guard let value = getFieldValue(fieldNum: TimestampCorrelationMesg.timestampFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setTimestamp(_ value: DateTime) throws {
		try setFieldValue(fieldNum: TimestampCorrelationMesg.timestampFieldNum, value: value.timestamp)
	}

	public func getFractionalTimestamp() -> Float64? {
		guard let value = getFieldValue(fieldNum: TimestampCorrelationMesg.fractionalTimestampFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setFractionalTimestamp(_ value: Float64) throws {
		try setFieldValue(fieldNum: TimestampCorrelationMesg.fractionalTimestampFieldNum, value: value)
	}

	public func getSystemTimestamp() -> DateTime? {
		guard let value = getFieldValue(fieldNum: TimestampCorrelationMesg.systemTimestampFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setSystemTimestamp(_ value: DateTime) throws {
		try setFieldValue(fieldNum: TimestampCorrelationMesg.systemTimestampFieldNum, value: value.timestamp)
	}

	public func getFractionalSystemTimestamp() -> Float64? {
		guard let value = getFieldValue(fieldNum: TimestampCorrelationMesg.fractionalSystemTimestampFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setFractionalSystemTimestamp(_ value: Float64) throws {
		try setFieldValue(fieldNum: TimestampCorrelationMesg.fractionalSystemTimestampFieldNum, value: value)
	}

	public func getLocalTimestamp() -> LocalDateTime? {
		guard let value = getFieldValue(fieldNum: TimestampCorrelationMesg.localTimestampFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setLocalTimestamp(_ value: LocalDateTime) throws {
		try setFieldValue(fieldNum: TimestampCorrelationMesg.localTimestampFieldNum, value: value)
	}

	public func getTimestampMs() -> UInt16? {
		guard let value = getFieldValue(fieldNum: TimestampCorrelationMesg.timestampMsFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setTimestampMs(_ value: UInt16) throws {
		try setFieldValue(fieldNum: TimestampCorrelationMesg.timestampMsFieldNum, value: value)
	}

	public func getSystemTimestampMs() -> UInt16? {
		guard let value = getFieldValue(fieldNum: TimestampCorrelationMesg.systemTimestampMsFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setSystemTimestampMs(_ value: UInt16) throws {
		try setFieldValue(fieldNum: TimestampCorrelationMesg.systemTimestampMsFieldNum, value: value)
	}

	public class func createTimestampCorrelationMesg() -> TimestampCorrelationMesg {
        let mesg = TimestampCorrelationMesg(name: "TimestampCorrelation", num: Profile.MesgNum.timestampCorrelation)
		
		mesg.fields[TimestampCorrelationMesg.timestampFieldNum] = Field(name: "Timestamp", num: TimestampCorrelationMesg.timestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
		mesg.fields[TimestampCorrelationMesg.fractionalTimestampFieldNum] = Field(name: "FractionalTimestamp", num: TimestampCorrelationMesg.fractionalTimestampFieldNum, type: BaseType.UINT16.rawValue, scale: 32768, offset: 0, units: "s", accumulated: false)
		mesg.fields[TimestampCorrelationMesg.systemTimestampFieldNum] = Field(name: "SystemTimestamp", num: TimestampCorrelationMesg.systemTimestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
		mesg.fields[TimestampCorrelationMesg.fractionalSystemTimestampFieldNum] = Field(name: "FractionalSystemTimestamp", num: TimestampCorrelationMesg.fractionalSystemTimestampFieldNum, type: BaseType.UINT16.rawValue, scale: 32768, offset: 0, units: "s", accumulated: false)
		mesg.fields[TimestampCorrelationMesg.localTimestampFieldNum] = Field(name: "LocalTimestamp", num: TimestampCorrelationMesg.localTimestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
		mesg.fields[TimestampCorrelationMesg.timestampMsFieldNum] = Field(name: "TimestampMs", num: TimestampCorrelationMesg.timestampMsFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "ms", accumulated: false)
		mesg.fields[TimestampCorrelationMesg.systemTimestampMsFieldNum] = Field(name: "SystemTimestampMs", num: TimestampCorrelationMesg.systemTimestampMsFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "ms", accumulated: false)
        return mesg
    }
}