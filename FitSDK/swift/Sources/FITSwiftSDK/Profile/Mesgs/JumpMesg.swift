/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class JumpMesg : Mesg {
    public static let timestampFieldNum:UInt8 = 253
    public static let distanceFieldNum:UInt8 = 0
    public static let heightFieldNum:UInt8 = 1
    public static let rotationsFieldNum:UInt8 = 2
    public static let hangTimeFieldNum:UInt8 = 3
    public static let scoreFieldNum:UInt8 = 4
    public static let positionLatFieldNum:UInt8 = 5
    public static let positionLongFieldNum:UInt8 = 6
    public static let speedFieldNum:UInt8 = 7
    public static let enhancedSpeedFieldNum:UInt8 = 8

	public init() {
        super.init(mesg: JumpMesg.createJumpMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getTimestamp() -> DateTime? {
		guard let value = getFieldValue(fieldNum: JumpMesg.timestampFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setTimestamp(_ value: DateTime) throws {
		try setFieldValue(fieldNum: JumpMesg.timestampFieldNum, value: value.timestamp)
	}

	public func getDistance() -> Float32? {
		guard let value = getFieldValue(fieldNum: JumpMesg.distanceFieldNum, index:0) as? Float32 else {
            return nil
        }
		return value
	}

	public func setDistance(_ value: Float32) throws {
		try setFieldValue(fieldNum: JumpMesg.distanceFieldNum, value: value)
	}

	public func getHeight() -> Float32? {
		guard let value = getFieldValue(fieldNum: JumpMesg.heightFieldNum, index:0) as? Float32 else {
            return nil
        }
		return value
	}

	public func setHeight(_ value: Float32) throws {
		try setFieldValue(fieldNum: JumpMesg.heightFieldNum, value: value)
	}

	public func getRotations() -> UInt8? {
		guard let value = getFieldValue(fieldNum: JumpMesg.rotationsFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setRotations(_ value: UInt8) throws {
		try setFieldValue(fieldNum: JumpMesg.rotationsFieldNum, value: value)
	}

	public func getHangTime() -> Float32? {
		guard let value = getFieldValue(fieldNum: JumpMesg.hangTimeFieldNum, index:0) as? Float32 else {
            return nil
        }
		return value
	}

	public func setHangTime(_ value: Float32) throws {
		try setFieldValue(fieldNum: JumpMesg.hangTimeFieldNum, value: value)
	}

	public func getScore() -> Float32? {
		guard let value = getFieldValue(fieldNum: JumpMesg.scoreFieldNum, index:0) as? Float32 else {
            return nil
        }
		return value
	}

	public func setScore(_ value: Float32) throws {
		try setFieldValue(fieldNum: JumpMesg.scoreFieldNum, value: value)
	}

	public func getPositionLat() -> Int32? {
		guard let value = getFieldValue(fieldNum: JumpMesg.positionLatFieldNum, index:0) as? Int32 else {
            return nil
        }
		return value
	}

	public func setPositionLat(_ value: Int32) throws {
		try setFieldValue(fieldNum: JumpMesg.positionLatFieldNum, value: value)
	}

	public func getPositionLong() -> Int32? {
		guard let value = getFieldValue(fieldNum: JumpMesg.positionLongFieldNum, index:0) as? Int32 else {
            return nil
        }
		return value
	}

	public func setPositionLong(_ value: Int32) throws {
		try setFieldValue(fieldNum: JumpMesg.positionLongFieldNum, value: value)
	}

	public func getSpeed() -> Float64? {
		guard let value = getFieldValue(fieldNum: JumpMesg.speedFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setSpeed(_ value: Float64) throws {
		try setFieldValue(fieldNum: JumpMesg.speedFieldNum, value: value)
	}

	public func getEnhancedSpeed() -> Float64? {
		guard let value = getFieldValue(fieldNum: JumpMesg.enhancedSpeedFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setEnhancedSpeed(_ value: Float64) throws {
		try setFieldValue(fieldNum: JumpMesg.enhancedSpeedFieldNum, value: value)
	}

	public class func createJumpMesg() -> JumpMesg {
        let mesg = JumpMesg(name: "Jump", num: Profile.MesgNum.jump)
		
		mesg.fields[JumpMesg.timestampFieldNum] = Field(name: "Timestamp", num: JumpMesg.timestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
		mesg.fields[JumpMesg.distanceFieldNum] = Field(name: "Distance", num: JumpMesg.distanceFieldNum, type: BaseType.FLOAT32.rawValue, scale: 1, offset: 0, units: "m", accumulated: false)
		mesg.fields[JumpMesg.heightFieldNum] = Field(name: "Height", num: JumpMesg.heightFieldNum, type: BaseType.FLOAT32.rawValue, scale: 1, offset: 0, units: "m", accumulated: false)
		mesg.fields[JumpMesg.rotationsFieldNum] = Field(name: "Rotations", num: JumpMesg.rotationsFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[JumpMesg.hangTimeFieldNum] = Field(name: "HangTime", num: JumpMesg.hangTimeFieldNum, type: BaseType.FLOAT32.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
		mesg.fields[JumpMesg.scoreFieldNum] = Field(name: "Score", num: JumpMesg.scoreFieldNum, type: BaseType.FLOAT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[JumpMesg.positionLatFieldNum] = Field(name: "PositionLat", num: JumpMesg.positionLatFieldNum, type: BaseType.SINT32.rawValue, scale: 1, offset: 0, units: "semicircles", accumulated: false)
		mesg.fields[JumpMesg.positionLongFieldNum] = Field(name: "PositionLong", num: JumpMesg.positionLongFieldNum, type: BaseType.SINT32.rawValue, scale: 1, offset: 0, units: "semicircles", accumulated: false)
		mesg.fields[JumpMesg.speedFieldNum] = Field(name: "Speed", num: JumpMesg.speedFieldNum, type: BaseType.UINT16.rawValue, scale: 1000, offset: 0, units: "m/s", accumulated: false)
		mesg.fields[JumpMesg.speedFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: enhancedSpeedFieldNum, accumulated: false, bits: 16, scale: 1000, offset: 0))
		mesg.fields[JumpMesg.enhancedSpeedFieldNum] = Field(name: "EnhancedSpeed", num: JumpMesg.enhancedSpeedFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "m/s", accumulated: false)
        return mesg
    }
}