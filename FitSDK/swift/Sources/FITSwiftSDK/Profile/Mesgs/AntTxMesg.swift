/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class AntTxMesg : Mesg {
    public static let timestampFieldNum:UInt8 = 253
    public static let fractionalTimestampFieldNum:UInt8 = 0
    public static let mesgIdFieldNum:UInt8 = 1
    public static let mesgDataFieldNum:UInt8 = 2
    public static let channelNumberFieldNum:UInt8 = 3
    public static let dataFieldNum:UInt8 = 4

	public init() {
        super.init(mesg: AntTxMesg.createAntTxMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getTimestamp() -> DateTime? {
		guard let value = getFieldValue(fieldNum: AntTxMesg.timestampFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setTimestamp(_ value: DateTime) throws {
		try setFieldValue(fieldNum: AntTxMesg.timestampFieldNum, value: value.timestamp)
	}

	public func getFractionalTimestamp() -> Float64? {
		guard let value = getFieldValue(fieldNum: AntTxMesg.fractionalTimestampFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setFractionalTimestamp(_ value: Float64) throws {
		try setFieldValue(fieldNum: AntTxMesg.fractionalTimestampFieldNum, value: value)
	}

	public func getMesgId() -> UInt8? {
		guard let value = getFieldValue(fieldNum: AntTxMesg.mesgIdFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setMesgId(_ value: UInt8) throws {
		try setFieldValue(fieldNum: AntTxMesg.mesgIdFieldNum, value: value)
	}

	public func getNumMesgData() -> UInt8 {
		guard let field = getField(fieldNum: AntTxMesg.mesgDataFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getMesgData() -> [UInt8?]? {
		guard let field = getField(fieldNum: AntTxMesg.mesgDataFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt8?]
	}

	public func getMesgData(index: Int) -> UInt8? {
		guard let value = getFieldValue(fieldNum: AntTxMesg.mesgDataFieldNum, index: index) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setMesgData(index: Int, value: UInt8) throws {
		try setFieldValue(fieldNum: AntTxMesg.mesgDataFieldNum, value: value, index: index)
	}

	public func getChannelNumber() -> UInt8? {
		guard let value = getFieldValue(fieldNum: AntTxMesg.channelNumberFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setChannelNumber(_ value: UInt8) throws {
		try setFieldValue(fieldNum: AntTxMesg.channelNumberFieldNum, value: value)
	}

	public func getNumData() -> UInt8 {
		guard let field = getField(fieldNum: AntTxMesg.dataFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getData() -> [UInt8?]? {
		guard let field = getField(fieldNum: AntTxMesg.dataFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt8?]
	}

	public func getData(index: Int) -> UInt8? {
		guard let value = getFieldValue(fieldNum: AntTxMesg.dataFieldNum, index: index) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setData(index: Int, value: UInt8) throws {
		try setFieldValue(fieldNum: AntTxMesg.dataFieldNum, value: value, index: index)
	}

	public class func createAntTxMesg() -> AntTxMesg {
        let mesg = AntTxMesg(name: "AntTx", num: Profile.MesgNum.antTx)
		
		mesg.fields[AntTxMesg.timestampFieldNum] = Field(name: "Timestamp", num: AntTxMesg.timestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
		mesg.fields[AntTxMesg.fractionalTimestampFieldNum] = Field(name: "FractionalTimestamp", num: AntTxMesg.fractionalTimestampFieldNum, type: BaseType.UINT16.rawValue, scale: 32768, offset: 0, units: "s", accumulated: false)
		mesg.fields[AntTxMesg.mesgIdFieldNum] = Field(name: "MesgId", num: AntTxMesg.mesgIdFieldNum, type: BaseType.BYTE.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[AntTxMesg.mesgDataFieldNum] = Field(name: "MesgData", num: AntTxMesg.mesgDataFieldNum, type: BaseType.BYTE.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[AntTxMesg.mesgDataFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: channelNumberFieldNum, accumulated: false, bits: 8, scale: 1, offset: 0))
		mesg.fields[AntTxMesg.mesgDataFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: dataFieldNum, accumulated: false, bits: 8, scale: 1, offset: 0))
		mesg.fields[AntTxMesg.mesgDataFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: dataFieldNum, accumulated: false, bits: 8, scale: 1, offset: 0))
		mesg.fields[AntTxMesg.mesgDataFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: dataFieldNum, accumulated: false, bits: 8, scale: 1, offset: 0))
		mesg.fields[AntTxMesg.mesgDataFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: dataFieldNum, accumulated: false, bits: 8, scale: 1, offset: 0))
		mesg.fields[AntTxMesg.mesgDataFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: dataFieldNum, accumulated: false, bits: 8, scale: 1, offset: 0))
		mesg.fields[AntTxMesg.mesgDataFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: dataFieldNum, accumulated: false, bits: 8, scale: 1, offset: 0))
		mesg.fields[AntTxMesg.mesgDataFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: dataFieldNum, accumulated: false, bits: 8, scale: 1, offset: 0))
		mesg.fields[AntTxMesg.mesgDataFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: dataFieldNum, accumulated: false, bits: 8, scale: 1, offset: 0))
		mesg.fields[AntTxMesg.channelNumberFieldNum] = Field(name: "ChannelNumber", num: AntTxMesg.channelNumberFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[AntTxMesg.dataFieldNum] = Field(name: "Data", num: AntTxMesg.dataFieldNum, type: BaseType.BYTE.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
        return mesg
    }
}