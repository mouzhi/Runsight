/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class DiveApneaAlarmMesg : Mesg {
    public static let messageIndexFieldNum:UInt8 = 254
    public static let depthFieldNum:UInt8 = 0
    public static let timeFieldNum:UInt8 = 1
    public static let enabledFieldNum:UInt8 = 2
    public static let alarmTypeFieldNum:UInt8 = 3
    public static let soundFieldNum:UInt8 = 4
    public static let diveTypesFieldNum:UInt8 = 5
    public static let idFieldNum:UInt8 = 6
    public static let popupEnabledFieldNum:UInt8 = 7
    public static let triggerOnDescentFieldNum:UInt8 = 8
    public static let triggerOnAscentFieldNum:UInt8 = 9
    public static let repeatingFieldNum:UInt8 = 10
    public static let speedFieldNum:UInt8 = 11

	public init() {
        super.init(mesg: DiveApneaAlarmMesg.createDiveApneaAlarmMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getMessageIndex() -> MessageIndex? {
		guard let value = getFieldValue(fieldNum: DiveApneaAlarmMesg.messageIndexFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setMessageIndex(_ value: MessageIndex) throws {
		try setFieldValue(fieldNum: DiveApneaAlarmMesg.messageIndexFieldNum, value: value)
	}

	public func getDepth() -> Float64? {
		guard let value = getFieldValue(fieldNum: DiveApneaAlarmMesg.depthFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setDepth(_ value: Float64) throws {
		try setFieldValue(fieldNum: DiveApneaAlarmMesg.depthFieldNum, value: value)
	}

	public func getTime() -> Int32? {
		guard let value = getFieldValue(fieldNum: DiveApneaAlarmMesg.timeFieldNum, index:0) as? Int32 else {
            return nil
        }
		return value
	}

	public func setTime(_ value: Int32) throws {
		try setFieldValue(fieldNum: DiveApneaAlarmMesg.timeFieldNum, value: value)
	}

	public func getEnabled() -> Bool? {
		guard let value = getFieldValue(fieldNum: DiveApneaAlarmMesg.enabledFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value == 1 ? true : false
	}

	public func setEnabled(_ value: Bool) throws {
		try setFieldValue(fieldNum: DiveApneaAlarmMesg.enabledFieldNum, value: value)
	}

	public func getAlarmType() -> DiveAlarmType? {
		guard let value = getFieldValue(fieldNum: DiveApneaAlarmMesg.alarmTypeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return DiveAlarmType(rawValue: value) ?? .invalid
	}

	public func setAlarmType(_ value: DiveAlarmType) throws {
		try setFieldValue(fieldNum: DiveApneaAlarmMesg.alarmTypeFieldNum, value: value.rawValue)
	}

	public func getSound() -> Tone? {
		guard let value = getFieldValue(fieldNum: DiveApneaAlarmMesg.soundFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return Tone(rawValue: value) ?? .invalid
	}

	public func setSound(_ value: Tone) throws {
		try setFieldValue(fieldNum: DiveApneaAlarmMesg.soundFieldNum, value: value.rawValue)
	}

	public func getNumDiveTypes() -> UInt8 {
		guard let field = getField(fieldNum: DiveApneaAlarmMesg.diveTypesFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getDiveTypes() -> [SubSport?]? {
		guard let field = getField(fieldNum: DiveApneaAlarmMesg.diveTypesFieldNum) else {
			return nil
		}

		let rawValues = field.toArray() as [Any?]
		var values = [SubSport]()
		for rawValue in rawValues {
			values.append(
				SubSport(rawValue: rawValue as! UInt8)!
			)
		}

		return values
	}

	public func getDiveTypes(index: Int) -> SubSport? {
		guard let value = getFieldValue(fieldNum: DiveApneaAlarmMesg.diveTypesFieldNum, index: index) as? UInt8 else {
            return nil
        }
		return SubSport(rawValue: value) ?? .invalid
	}

	public func setDiveTypes(index: Int, value: SubSport) throws {
		try setFieldValue(fieldNum: DiveApneaAlarmMesg.diveTypesFieldNum, value: value.rawValue, index: index)
	}

	public func getId() -> UInt32? {
		guard let value = getFieldValue(fieldNum: DiveApneaAlarmMesg.idFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setId(_ value: UInt32) throws {
		try setFieldValue(fieldNum: DiveApneaAlarmMesg.idFieldNum, value: value)
	}

	public func getPopupEnabled() -> Bool? {
		guard let value = getFieldValue(fieldNum: DiveApneaAlarmMesg.popupEnabledFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value == 1 ? true : false
	}

	public func setPopupEnabled(_ value: Bool) throws {
		try setFieldValue(fieldNum: DiveApneaAlarmMesg.popupEnabledFieldNum, value: value)
	}

	public func getTriggerOnDescent() -> Bool? {
		guard let value = getFieldValue(fieldNum: DiveApneaAlarmMesg.triggerOnDescentFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value == 1 ? true : false
	}

	public func setTriggerOnDescent(_ value: Bool) throws {
		try setFieldValue(fieldNum: DiveApneaAlarmMesg.triggerOnDescentFieldNum, value: value)
	}

	public func getTriggerOnAscent() -> Bool? {
		guard let value = getFieldValue(fieldNum: DiveApneaAlarmMesg.triggerOnAscentFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value == 1 ? true : false
	}

	public func setTriggerOnAscent(_ value: Bool) throws {
		try setFieldValue(fieldNum: DiveApneaAlarmMesg.triggerOnAscentFieldNum, value: value)
	}

	public func getRepeating() -> Bool? {
		guard let value = getFieldValue(fieldNum: DiveApneaAlarmMesg.repeatingFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value == 1 ? true : false
	}

	public func setRepeating(_ value: Bool) throws {
		try setFieldValue(fieldNum: DiveApneaAlarmMesg.repeatingFieldNum, value: value)
	}

	public func getSpeed() -> Float64? {
		guard let value = getFieldValue(fieldNum: DiveApneaAlarmMesg.speedFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setSpeed(_ value: Float64) throws {
		try setFieldValue(fieldNum: DiveApneaAlarmMesg.speedFieldNum, value: value)
	}

	public class func createDiveApneaAlarmMesg() -> DiveApneaAlarmMesg {
        let mesg = DiveApneaAlarmMesg(name: "DiveApneaAlarm", num: Profile.MesgNum.diveApneaAlarm)
		
		mesg.fields[DiveApneaAlarmMesg.messageIndexFieldNum] = Field(name: "MessageIndex", num: DiveApneaAlarmMesg.messageIndexFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DiveApneaAlarmMesg.depthFieldNum] = Field(name: "Depth", num: DiveApneaAlarmMesg.depthFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "m", accumulated: false)
		mesg.fields[DiveApneaAlarmMesg.timeFieldNum] = Field(name: "Time", num: DiveApneaAlarmMesg.timeFieldNum, type: BaseType.SINT32.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
		mesg.fields[DiveApneaAlarmMesg.enabledFieldNum] = Field(name: "Enabled", num: DiveApneaAlarmMesg.enabledFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DiveApneaAlarmMesg.alarmTypeFieldNum] = Field(name: "AlarmType", num: DiveApneaAlarmMesg.alarmTypeFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DiveApneaAlarmMesg.soundFieldNum] = Field(name: "Sound", num: DiveApneaAlarmMesg.soundFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DiveApneaAlarmMesg.diveTypesFieldNum] = Field(name: "DiveTypes", num: DiveApneaAlarmMesg.diveTypesFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DiveApneaAlarmMesg.idFieldNum] = Field(name: "Id", num: DiveApneaAlarmMesg.idFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DiveApneaAlarmMesg.popupEnabledFieldNum] = Field(name: "PopupEnabled", num: DiveApneaAlarmMesg.popupEnabledFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DiveApneaAlarmMesg.triggerOnDescentFieldNum] = Field(name: "TriggerOnDescent", num: DiveApneaAlarmMesg.triggerOnDescentFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DiveApneaAlarmMesg.triggerOnAscentFieldNum] = Field(name: "TriggerOnAscent", num: DiveApneaAlarmMesg.triggerOnAscentFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DiveApneaAlarmMesg.repeatingFieldNum] = Field(name: "Repeating", num: DiveApneaAlarmMesg.repeatingFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DiveApneaAlarmMesg.speedFieldNum] = Field(name: "Speed", num: DiveApneaAlarmMesg.speedFieldNum, type: BaseType.SINT32.rawValue, scale: 1000, offset: 0, units: "mps", accumulated: false)
        return mesg
    }
}