/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class RecordMesg : Mesg {
    public static let timestampFieldNum:UInt8 = 253
    public static let positionLatFieldNum:UInt8 = 0
    public static let positionLongFieldNum:UInt8 = 1
    public static let altitudeFieldNum:UInt8 = 2
    public static let heartRateFieldNum:UInt8 = 3
    public static let cadenceFieldNum:UInt8 = 4
    public static let distanceFieldNum:UInt8 = 5
    public static let speedFieldNum:UInt8 = 6
    public static let powerFieldNum:UInt8 = 7
    public static let compressedSpeedDistanceFieldNum:UInt8 = 8
    public static let gradeFieldNum:UInt8 = 9
    public static let resistanceFieldNum:UInt8 = 10
    public static let timeFromCourseFieldNum:UInt8 = 11
    public static let cycleLengthFieldNum:UInt8 = 12
    public static let temperatureFieldNum:UInt8 = 13
    public static let speed1sFieldNum:UInt8 = 17
    public static let cyclesFieldNum:UInt8 = 18
    public static let totalCyclesFieldNum:UInt8 = 19
    public static let compressedAccumulatedPowerFieldNum:UInt8 = 28
    public static let accumulatedPowerFieldNum:UInt8 = 29
    public static let leftRightBalanceFieldNum:UInt8 = 30
    public static let gpsAccuracyFieldNum:UInt8 = 31
    public static let verticalSpeedFieldNum:UInt8 = 32
    public static let caloriesFieldNum:UInt8 = 33
    public static let verticalOscillationFieldNum:UInt8 = 39
    public static let stanceTimePercentFieldNum:UInt8 = 40
    public static let stanceTimeFieldNum:UInt8 = 41
    public static let activityTypeFieldNum:UInt8 = 42
    public static let leftTorqueEffectivenessFieldNum:UInt8 = 43
    public static let rightTorqueEffectivenessFieldNum:UInt8 = 44
    public static let leftPedalSmoothnessFieldNum:UInt8 = 45
    public static let rightPedalSmoothnessFieldNum:UInt8 = 46
    public static let combinedPedalSmoothnessFieldNum:UInt8 = 47
    public static let time128FieldNum:UInt8 = 48
    public static let strokeTypeFieldNum:UInt8 = 49
    public static let zoneFieldNum:UInt8 = 50
    public static let ballSpeedFieldNum:UInt8 = 51
    public static let cadence256FieldNum:UInt8 = 52
    public static let fractionalCadenceFieldNum:UInt8 = 53
    public static let totalHemoglobinConcFieldNum:UInt8 = 54
    public static let totalHemoglobinConcMinFieldNum:UInt8 = 55
    public static let totalHemoglobinConcMaxFieldNum:UInt8 = 56
    public static let saturatedHemoglobinPercentFieldNum:UInt8 = 57
    public static let saturatedHemoglobinPercentMinFieldNum:UInt8 = 58
    public static let saturatedHemoglobinPercentMaxFieldNum:UInt8 = 59
    public static let deviceIndexFieldNum:UInt8 = 62
    public static let leftPcoFieldNum:UInt8 = 67
    public static let rightPcoFieldNum:UInt8 = 68
    public static let leftPowerPhaseFieldNum:UInt8 = 69
    public static let leftPowerPhasePeakFieldNum:UInt8 = 70
    public static let rightPowerPhaseFieldNum:UInt8 = 71
    public static let rightPowerPhasePeakFieldNum:UInt8 = 72
    public static let enhancedSpeedFieldNum:UInt8 = 73
    public static let enhancedAltitudeFieldNum:UInt8 = 78
    public static let batterySocFieldNum:UInt8 = 81
    public static let motorPowerFieldNum:UInt8 = 82
    public static let verticalRatioFieldNum:UInt8 = 83
    public static let stanceTimeBalanceFieldNum:UInt8 = 84
    public static let stepLengthFieldNum:UInt8 = 85
    public static let cycleLength16FieldNum:UInt8 = 87
    public static let absolutePressureFieldNum:UInt8 = 91
    public static let depthFieldNum:UInt8 = 92
    public static let nextStopDepthFieldNum:UInt8 = 93
    public static let nextStopTimeFieldNum:UInt8 = 94
    public static let timeToSurfaceFieldNum:UInt8 = 95
    public static let ndlTimeFieldNum:UInt8 = 96
    public static let cnsLoadFieldNum:UInt8 = 97
    public static let n2LoadFieldNum:UInt8 = 98
    public static let respirationRateFieldNum:UInt8 = 99
    public static let enhancedRespirationRateFieldNum:UInt8 = 108
    public static let gritFieldNum:UInt8 = 114
    public static let flowFieldNum:UInt8 = 115
    public static let currentStressFieldNum:UInt8 = 116
    public static let ebikeTravelRangeFieldNum:UInt8 = 117
    public static let ebikeBatteryLevelFieldNum:UInt8 = 118
    public static let ebikeAssistModeFieldNum:UInt8 = 119
    public static let ebikeAssistLevelPercentFieldNum:UInt8 = 120
    public static let airTimeRemainingFieldNum:UInt8 = 123
    public static let pressureSacFieldNum:UInt8 = 124
    public static let volumeSacFieldNum:UInt8 = 125
    public static let rmvFieldNum:UInt8 = 126
    public static let ascentRateFieldNum:UInt8 = 127
    public static let po2FieldNum:UInt8 = 129
    public static let coreTemperatureFieldNum:UInt8 = 139

	public init() {
        super.init(mesg: RecordMesg.createRecordMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getTimestamp() -> DateTime? {
		guard let value = getFieldValue(fieldNum: RecordMesg.timestampFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setTimestamp(_ value: DateTime) throws {
		try setFieldValue(fieldNum: RecordMesg.timestampFieldNum, value: value.timestamp)
	}

	public func getPositionLat() -> Int32? {
		guard let value = getFieldValue(fieldNum: RecordMesg.positionLatFieldNum, index:0) as? Int32 else {
            return nil
        }
		return value
	}

	public func setPositionLat(_ value: Int32) throws {
		try setFieldValue(fieldNum: RecordMesg.positionLatFieldNum, value: value)
	}

	public func getPositionLong() -> Int32? {
		guard let value = getFieldValue(fieldNum: RecordMesg.positionLongFieldNum, index:0) as? Int32 else {
            return nil
        }
		return value
	}

	public func setPositionLong(_ value: Int32) throws {
		try setFieldValue(fieldNum: RecordMesg.positionLongFieldNum, value: value)
	}

	public func getAltitude() -> Float64? {
		guard let value = getFieldValue(fieldNum: RecordMesg.altitudeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAltitude(_ value: Float64) throws {
		try setFieldValue(fieldNum: RecordMesg.altitudeFieldNum, value: value)
	}

	public func getHeartRate() -> UInt8? {
		guard let value = getFieldValue(fieldNum: RecordMesg.heartRateFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setHeartRate(_ value: UInt8) throws {
		try setFieldValue(fieldNum: RecordMesg.heartRateFieldNum, value: value)
	}

	public func getCadence() -> UInt8? {
		guard let value = getFieldValue(fieldNum: RecordMesg.cadenceFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setCadence(_ value: UInt8) throws {
		try setFieldValue(fieldNum: RecordMesg.cadenceFieldNum, value: value)
	}

	public func getDistance() -> Float64? {
		guard let value = getFieldValue(fieldNum: RecordMesg.distanceFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setDistance(_ value: Float64) throws {
		try setFieldValue(fieldNum: RecordMesg.distanceFieldNum, value: value)
	}

	public func getSpeed() -> Float64? {
		guard let value = getFieldValue(fieldNum: RecordMesg.speedFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setSpeed(_ value: Float64) throws {
		try setFieldValue(fieldNum: RecordMesg.speedFieldNum, value: value)
	}

	public func getPower() -> UInt16? {
		guard let value = getFieldValue(fieldNum: RecordMesg.powerFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setPower(_ value: UInt16) throws {
		try setFieldValue(fieldNum: RecordMesg.powerFieldNum, value: value)
	}

	public func getNumCompressedSpeedDistance() -> UInt8 {
		guard let field = getField(fieldNum: RecordMesg.compressedSpeedDistanceFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getCompressedSpeedDistance() -> [UInt8?]? {
		guard let field = getField(fieldNum: RecordMesg.compressedSpeedDistanceFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt8?]
	}

	public func getCompressedSpeedDistance(index: Int) -> UInt8? {
		guard let value = getFieldValue(fieldNum: RecordMesg.compressedSpeedDistanceFieldNum, index: index) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setCompressedSpeedDistance(index: Int, value: UInt8) throws {
		try setFieldValue(fieldNum: RecordMesg.compressedSpeedDistanceFieldNum, value: value, index: index)
	}

	public func getGrade() -> Float64? {
		guard let value = getFieldValue(fieldNum: RecordMesg.gradeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setGrade(_ value: Float64) throws {
		try setFieldValue(fieldNum: RecordMesg.gradeFieldNum, value: value)
	}

	public func getResistance() -> UInt8? {
		guard let value = getFieldValue(fieldNum: RecordMesg.resistanceFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setResistance(_ value: UInt8) throws {
		try setFieldValue(fieldNum: RecordMesg.resistanceFieldNum, value: value)
	}

	public func getTimeFromCourse() -> Float64? {
		guard let value = getFieldValue(fieldNum: RecordMesg.timeFromCourseFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTimeFromCourse(_ value: Float64) throws {
		try setFieldValue(fieldNum: RecordMesg.timeFromCourseFieldNum, value: value)
	}

	public func getCycleLength() -> Float64? {
		guard let value = getFieldValue(fieldNum: RecordMesg.cycleLengthFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setCycleLength(_ value: Float64) throws {
		try setFieldValue(fieldNum: RecordMesg.cycleLengthFieldNum, value: value)
	}

	public func getTemperature() -> Int8? {
		guard let value = getFieldValue(fieldNum: RecordMesg.temperatureFieldNum, index:0) as? Int8 else {
            return nil
        }
		return value
	}

	public func setTemperature(_ value: Int8) throws {
		try setFieldValue(fieldNum: RecordMesg.temperatureFieldNum, value: value)
	}

	public func getNumSpeed1s() -> UInt8 {
		guard let field = getField(fieldNum: RecordMesg.speed1sFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getSpeed1s() -> [Float64?]? {
		guard let field = getField(fieldNum: RecordMesg.speed1sFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getSpeed1s(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: RecordMesg.speed1sFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setSpeed1s(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: RecordMesg.speed1sFieldNum, value: value, index: index)
	}

	public func getCycles() -> UInt8? {
		guard let value = getFieldValue(fieldNum: RecordMesg.cyclesFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setCycles(_ value: UInt8) throws {
		try setFieldValue(fieldNum: RecordMesg.cyclesFieldNum, value: value)
	}

	public func getTotalCycles() -> UInt32? {
		guard let value = getFieldValue(fieldNum: RecordMesg.totalCyclesFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setTotalCycles(_ value: UInt32) throws {
		try setFieldValue(fieldNum: RecordMesg.totalCyclesFieldNum, value: value)
	}

	public func getCompressedAccumulatedPower() -> UInt16? {
		guard let value = getFieldValue(fieldNum: RecordMesg.compressedAccumulatedPowerFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setCompressedAccumulatedPower(_ value: UInt16) throws {
		try setFieldValue(fieldNum: RecordMesg.compressedAccumulatedPowerFieldNum, value: value)
	}

	public func getAccumulatedPower() -> UInt32? {
		guard let value = getFieldValue(fieldNum: RecordMesg.accumulatedPowerFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setAccumulatedPower(_ value: UInt32) throws {
		try setFieldValue(fieldNum: RecordMesg.accumulatedPowerFieldNum, value: value)
	}

	public func getLeftRightBalance() -> LeftRightBalance? {
		guard let value = getFieldValue(fieldNum: RecordMesg.leftRightBalanceFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return LeftRightBalance(rawValue: value) ?? .invalid
	}

	public func setLeftRightBalance(_ value: LeftRightBalance) throws {
		try setFieldValue(fieldNum: RecordMesg.leftRightBalanceFieldNum, value: value.rawValue)
	}

	public func getGpsAccuracy() -> UInt8? {
		guard let value = getFieldValue(fieldNum: RecordMesg.gpsAccuracyFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setGpsAccuracy(_ value: UInt8) throws {
		try setFieldValue(fieldNum: RecordMesg.gpsAccuracyFieldNum, value: value)
	}

	public func getVerticalSpeed() -> Float64? {
		guard let value = getFieldValue(fieldNum: RecordMesg.verticalSpeedFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setVerticalSpeed(_ value: Float64) throws {
		try setFieldValue(fieldNum: RecordMesg.verticalSpeedFieldNum, value: value)
	}

	public func getCalories() -> UInt16? {
		guard let value = getFieldValue(fieldNum: RecordMesg.caloriesFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setCalories(_ value: UInt16) throws {
		try setFieldValue(fieldNum: RecordMesg.caloriesFieldNum, value: value)
	}

	public func getVerticalOscillation() -> Float64? {
		guard let value = getFieldValue(fieldNum: RecordMesg.verticalOscillationFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setVerticalOscillation(_ value: Float64) throws {
		try setFieldValue(fieldNum: RecordMesg.verticalOscillationFieldNum, value: value)
	}

	public func getStanceTimePercent() -> Float64? {
		guard let value = getFieldValue(fieldNum: RecordMesg.stanceTimePercentFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setStanceTimePercent(_ value: Float64) throws {
		try setFieldValue(fieldNum: RecordMesg.stanceTimePercentFieldNum, value: value)
	}

	public func getStanceTime() -> Float64? {
		guard let value = getFieldValue(fieldNum: RecordMesg.stanceTimeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setStanceTime(_ value: Float64) throws {
		try setFieldValue(fieldNum: RecordMesg.stanceTimeFieldNum, value: value)
	}

	public func getActivityType() -> ActivityType? {
		guard let value = getFieldValue(fieldNum: RecordMesg.activityTypeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return ActivityType(rawValue: value) ?? .invalid
	}

	public func setActivityType(_ value: ActivityType) throws {
		try setFieldValue(fieldNum: RecordMesg.activityTypeFieldNum, value: value.rawValue)
	}

	public func getLeftTorqueEffectiveness() -> Float64? {
		guard let value = getFieldValue(fieldNum: RecordMesg.leftTorqueEffectivenessFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setLeftTorqueEffectiveness(_ value: Float64) throws {
		try setFieldValue(fieldNum: RecordMesg.leftTorqueEffectivenessFieldNum, value: value)
	}

	public func getRightTorqueEffectiveness() -> Float64? {
		guard let value = getFieldValue(fieldNum: RecordMesg.rightTorqueEffectivenessFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setRightTorqueEffectiveness(_ value: Float64) throws {
		try setFieldValue(fieldNum: RecordMesg.rightTorqueEffectivenessFieldNum, value: value)
	}

	public func getLeftPedalSmoothness() -> Float64? {
		guard let value = getFieldValue(fieldNum: RecordMesg.leftPedalSmoothnessFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setLeftPedalSmoothness(_ value: Float64) throws {
		try setFieldValue(fieldNum: RecordMesg.leftPedalSmoothnessFieldNum, value: value)
	}

	public func getRightPedalSmoothness() -> Float64? {
		guard let value = getFieldValue(fieldNum: RecordMesg.rightPedalSmoothnessFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setRightPedalSmoothness(_ value: Float64) throws {
		try setFieldValue(fieldNum: RecordMesg.rightPedalSmoothnessFieldNum, value: value)
	}

	public func getCombinedPedalSmoothness() -> Float64? {
		guard let value = getFieldValue(fieldNum: RecordMesg.combinedPedalSmoothnessFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setCombinedPedalSmoothness(_ value: Float64) throws {
		try setFieldValue(fieldNum: RecordMesg.combinedPedalSmoothnessFieldNum, value: value)
	}

	public func getTime128() -> Float64? {
		guard let value = getFieldValue(fieldNum: RecordMesg.time128FieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTime128(_ value: Float64) throws {
		try setFieldValue(fieldNum: RecordMesg.time128FieldNum, value: value)
	}

	public func getStrokeType() -> StrokeType? {
		guard let value = getFieldValue(fieldNum: RecordMesg.strokeTypeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return StrokeType(rawValue: value) ?? .invalid
	}

	public func setStrokeType(_ value: StrokeType) throws {
		try setFieldValue(fieldNum: RecordMesg.strokeTypeFieldNum, value: value.rawValue)
	}

	public func getZone() -> UInt8? {
		guard let value = getFieldValue(fieldNum: RecordMesg.zoneFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setZone(_ value: UInt8) throws {
		try setFieldValue(fieldNum: RecordMesg.zoneFieldNum, value: value)
	}

	public func getBallSpeed() -> Float64? {
		guard let value = getFieldValue(fieldNum: RecordMesg.ballSpeedFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setBallSpeed(_ value: Float64) throws {
		try setFieldValue(fieldNum: RecordMesg.ballSpeedFieldNum, value: value)
	}

	public func getCadence256() -> Float64? {
		guard let value = getFieldValue(fieldNum: RecordMesg.cadence256FieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setCadence256(_ value: Float64) throws {
		try setFieldValue(fieldNum: RecordMesg.cadence256FieldNum, value: value)
	}

	public func getFractionalCadence() -> Float64? {
		guard let value = getFieldValue(fieldNum: RecordMesg.fractionalCadenceFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setFractionalCadence(_ value: Float64) throws {
		try setFieldValue(fieldNum: RecordMesg.fractionalCadenceFieldNum, value: value)
	}

	public func getTotalHemoglobinConc() -> Float64? {
		guard let value = getFieldValue(fieldNum: RecordMesg.totalHemoglobinConcFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTotalHemoglobinConc(_ value: Float64) throws {
		try setFieldValue(fieldNum: RecordMesg.totalHemoglobinConcFieldNum, value: value)
	}

	public func getTotalHemoglobinConcMin() -> Float64? {
		guard let value = getFieldValue(fieldNum: RecordMesg.totalHemoglobinConcMinFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTotalHemoglobinConcMin(_ value: Float64) throws {
		try setFieldValue(fieldNum: RecordMesg.totalHemoglobinConcMinFieldNum, value: value)
	}

	public func getTotalHemoglobinConcMax() -> Float64? {
		guard let value = getFieldValue(fieldNum: RecordMesg.totalHemoglobinConcMaxFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTotalHemoglobinConcMax(_ value: Float64) throws {
		try setFieldValue(fieldNum: RecordMesg.totalHemoglobinConcMaxFieldNum, value: value)
	}

	public func getSaturatedHemoglobinPercent() -> Float64? {
		guard let value = getFieldValue(fieldNum: RecordMesg.saturatedHemoglobinPercentFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setSaturatedHemoglobinPercent(_ value: Float64) throws {
		try setFieldValue(fieldNum: RecordMesg.saturatedHemoglobinPercentFieldNum, value: value)
	}

	public func getSaturatedHemoglobinPercentMin() -> Float64? {
		guard let value = getFieldValue(fieldNum: RecordMesg.saturatedHemoglobinPercentMinFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setSaturatedHemoglobinPercentMin(_ value: Float64) throws {
		try setFieldValue(fieldNum: RecordMesg.saturatedHemoglobinPercentMinFieldNum, value: value)
	}

	public func getSaturatedHemoglobinPercentMax() -> Float64? {
		guard let value = getFieldValue(fieldNum: RecordMesg.saturatedHemoglobinPercentMaxFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setSaturatedHemoglobinPercentMax(_ value: Float64) throws {
		try setFieldValue(fieldNum: RecordMesg.saturatedHemoglobinPercentMaxFieldNum, value: value)
	}

	public func getDeviceIndex() -> DeviceIndex? {
		guard let value = getFieldValue(fieldNum: RecordMesg.deviceIndexFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setDeviceIndex(_ value: DeviceIndex) throws {
		try setFieldValue(fieldNum: RecordMesg.deviceIndexFieldNum, value: value)
	}

	public func getLeftPco() -> Int8? {
		guard let value = getFieldValue(fieldNum: RecordMesg.leftPcoFieldNum, index:0) as? Int8 else {
            return nil
        }
		return value
	}

	public func setLeftPco(_ value: Int8) throws {
		try setFieldValue(fieldNum: RecordMesg.leftPcoFieldNum, value: value)
	}

	public func getRightPco() -> Int8? {
		guard let value = getFieldValue(fieldNum: RecordMesg.rightPcoFieldNum, index:0) as? Int8 else {
            return nil
        }
		return value
	}

	public func setRightPco(_ value: Int8) throws {
		try setFieldValue(fieldNum: RecordMesg.rightPcoFieldNum, value: value)
	}

	public func getNumLeftPowerPhase() -> UInt8 {
		guard let field = getField(fieldNum: RecordMesg.leftPowerPhaseFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getLeftPowerPhase() -> [Float64?]? {
		guard let field = getField(fieldNum: RecordMesg.leftPowerPhaseFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getLeftPowerPhase(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: RecordMesg.leftPowerPhaseFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setLeftPowerPhase(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: RecordMesg.leftPowerPhaseFieldNum, value: value, index: index)
	}

	public func getNumLeftPowerPhasePeak() -> UInt8 {
		guard let field = getField(fieldNum: RecordMesg.leftPowerPhasePeakFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getLeftPowerPhasePeak() -> [Float64?]? {
		guard let field = getField(fieldNum: RecordMesg.leftPowerPhasePeakFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getLeftPowerPhasePeak(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: RecordMesg.leftPowerPhasePeakFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setLeftPowerPhasePeak(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: RecordMesg.leftPowerPhasePeakFieldNum, value: value, index: index)
	}

	public func getNumRightPowerPhase() -> UInt8 {
		guard let field = getField(fieldNum: RecordMesg.rightPowerPhaseFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getRightPowerPhase() -> [Float64?]? {
		guard let field = getField(fieldNum: RecordMesg.rightPowerPhaseFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getRightPowerPhase(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: RecordMesg.rightPowerPhaseFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setRightPowerPhase(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: RecordMesg.rightPowerPhaseFieldNum, value: value, index: index)
	}

	public func getNumRightPowerPhasePeak() -> UInt8 {
		guard let field = getField(fieldNum: RecordMesg.rightPowerPhasePeakFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getRightPowerPhasePeak() -> [Float64?]? {
		guard let field = getField(fieldNum: RecordMesg.rightPowerPhasePeakFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getRightPowerPhasePeak(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: RecordMesg.rightPowerPhasePeakFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setRightPowerPhasePeak(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: RecordMesg.rightPowerPhasePeakFieldNum, value: value, index: index)
	}

	public func getEnhancedSpeed() -> Float64? {
		guard let value = getFieldValue(fieldNum: RecordMesg.enhancedSpeedFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setEnhancedSpeed(_ value: Float64) throws {
		try setFieldValue(fieldNum: RecordMesg.enhancedSpeedFieldNum, value: value)
	}

	public func getEnhancedAltitude() -> Float64? {
		guard let value = getFieldValue(fieldNum: RecordMesg.enhancedAltitudeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setEnhancedAltitude(_ value: Float64) throws {
		try setFieldValue(fieldNum: RecordMesg.enhancedAltitudeFieldNum, value: value)
	}

	public func getBatterySoc() -> Float64? {
		guard let value = getFieldValue(fieldNum: RecordMesg.batterySocFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setBatterySoc(_ value: Float64) throws {
		try setFieldValue(fieldNum: RecordMesg.batterySocFieldNum, value: value)
	}

	public func getMotorPower() -> UInt16? {
		guard let value = getFieldValue(fieldNum: RecordMesg.motorPowerFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setMotorPower(_ value: UInt16) throws {
		try setFieldValue(fieldNum: RecordMesg.motorPowerFieldNum, value: value)
	}

	public func getVerticalRatio() -> Float64? {
		guard let value = getFieldValue(fieldNum: RecordMesg.verticalRatioFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setVerticalRatio(_ value: Float64) throws {
		try setFieldValue(fieldNum: RecordMesg.verticalRatioFieldNum, value: value)
	}

	public func getStanceTimeBalance() -> Float64? {
		guard let value = getFieldValue(fieldNum: RecordMesg.stanceTimeBalanceFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setStanceTimeBalance(_ value: Float64) throws {
		try setFieldValue(fieldNum: RecordMesg.stanceTimeBalanceFieldNum, value: value)
	}

	public func getStepLength() -> Float64? {
		guard let value = getFieldValue(fieldNum: RecordMesg.stepLengthFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setStepLength(_ value: Float64) throws {
		try setFieldValue(fieldNum: RecordMesg.stepLengthFieldNum, value: value)
	}

	public func getCycleLength16() -> Float64? {
		guard let value = getFieldValue(fieldNum: RecordMesg.cycleLength16FieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setCycleLength16(_ value: Float64) throws {
		try setFieldValue(fieldNum: RecordMesg.cycleLength16FieldNum, value: value)
	}

	public func getAbsolutePressure() -> UInt32? {
		guard let value = getFieldValue(fieldNum: RecordMesg.absolutePressureFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setAbsolutePressure(_ value: UInt32) throws {
		try setFieldValue(fieldNum: RecordMesg.absolutePressureFieldNum, value: value)
	}

	public func getDepth() -> Float64? {
		guard let value = getFieldValue(fieldNum: RecordMesg.depthFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setDepth(_ value: Float64) throws {
		try setFieldValue(fieldNum: RecordMesg.depthFieldNum, value: value)
	}

	public func getNextStopDepth() -> Float64? {
		guard let value = getFieldValue(fieldNum: RecordMesg.nextStopDepthFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setNextStopDepth(_ value: Float64) throws {
		try setFieldValue(fieldNum: RecordMesg.nextStopDepthFieldNum, value: value)
	}

	public func getNextStopTime() -> UInt32? {
		guard let value = getFieldValue(fieldNum: RecordMesg.nextStopTimeFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setNextStopTime(_ value: UInt32) throws {
		try setFieldValue(fieldNum: RecordMesg.nextStopTimeFieldNum, value: value)
	}

	public func getTimeToSurface() -> UInt32? {
		guard let value = getFieldValue(fieldNum: RecordMesg.timeToSurfaceFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setTimeToSurface(_ value: UInt32) throws {
		try setFieldValue(fieldNum: RecordMesg.timeToSurfaceFieldNum, value: value)
	}

	public func getNdlTime() -> UInt32? {
		guard let value = getFieldValue(fieldNum: RecordMesg.ndlTimeFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setNdlTime(_ value: UInt32) throws {
		try setFieldValue(fieldNum: RecordMesg.ndlTimeFieldNum, value: value)
	}

	public func getCnsLoad() -> UInt8? {
		guard let value = getFieldValue(fieldNum: RecordMesg.cnsLoadFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setCnsLoad(_ value: UInt8) throws {
		try setFieldValue(fieldNum: RecordMesg.cnsLoadFieldNum, value: value)
	}

	public func getN2Load() -> UInt16? {
		guard let value = getFieldValue(fieldNum: RecordMesg.n2LoadFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setN2Load(_ value: UInt16) throws {
		try setFieldValue(fieldNum: RecordMesg.n2LoadFieldNum, value: value)
	}

	public func getRespirationRate() -> UInt8? {
		guard let value = getFieldValue(fieldNum: RecordMesg.respirationRateFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setRespirationRate(_ value: UInt8) throws {
		try setFieldValue(fieldNum: RecordMesg.respirationRateFieldNum, value: value)
	}

	public func getEnhancedRespirationRate() -> Float64? {
		guard let value = getFieldValue(fieldNum: RecordMesg.enhancedRespirationRateFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setEnhancedRespirationRate(_ value: Float64) throws {
		try setFieldValue(fieldNum: RecordMesg.enhancedRespirationRateFieldNum, value: value)
	}

	public func getGrit() -> Float32? {
		guard let value = getFieldValue(fieldNum: RecordMesg.gritFieldNum, index:0) as? Float32 else {
            return nil
        }
		return value
	}

	public func setGrit(_ value: Float32) throws {
		try setFieldValue(fieldNum: RecordMesg.gritFieldNum, value: value)
	}

	public func getFlow() -> Float32? {
		guard let value = getFieldValue(fieldNum: RecordMesg.flowFieldNum, index:0) as? Float32 else {
            return nil
        }
		return value
	}

	public func setFlow(_ value: Float32) throws {
		try setFieldValue(fieldNum: RecordMesg.flowFieldNum, value: value)
	}

	public func getCurrentStress() -> Float64? {
		guard let value = getFieldValue(fieldNum: RecordMesg.currentStressFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setCurrentStress(_ value: Float64) throws {
		try setFieldValue(fieldNum: RecordMesg.currentStressFieldNum, value: value)
	}

	public func getEbikeTravelRange() -> UInt16? {
		guard let value = getFieldValue(fieldNum: RecordMesg.ebikeTravelRangeFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setEbikeTravelRange(_ value: UInt16) throws {
		try setFieldValue(fieldNum: RecordMesg.ebikeTravelRangeFieldNum, value: value)
	}

	public func getEbikeBatteryLevel() -> UInt8? {
		guard let value = getFieldValue(fieldNum: RecordMesg.ebikeBatteryLevelFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setEbikeBatteryLevel(_ value: UInt8) throws {
		try setFieldValue(fieldNum: RecordMesg.ebikeBatteryLevelFieldNum, value: value)
	}

	public func getEbikeAssistMode() -> UInt8? {
		guard let value = getFieldValue(fieldNum: RecordMesg.ebikeAssistModeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setEbikeAssistMode(_ value: UInt8) throws {
		try setFieldValue(fieldNum: RecordMesg.ebikeAssistModeFieldNum, value: value)
	}

	public func getEbikeAssistLevelPercent() -> UInt8? {
		guard let value = getFieldValue(fieldNum: RecordMesg.ebikeAssistLevelPercentFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setEbikeAssistLevelPercent(_ value: UInt8) throws {
		try setFieldValue(fieldNum: RecordMesg.ebikeAssistLevelPercentFieldNum, value: value)
	}

	public func getAirTimeRemaining() -> UInt32? {
		guard let value = getFieldValue(fieldNum: RecordMesg.airTimeRemainingFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setAirTimeRemaining(_ value: UInt32) throws {
		try setFieldValue(fieldNum: RecordMesg.airTimeRemainingFieldNum, value: value)
	}

	public func getPressureSac() -> Float64? {
		guard let value = getFieldValue(fieldNum: RecordMesg.pressureSacFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setPressureSac(_ value: Float64) throws {
		try setFieldValue(fieldNum: RecordMesg.pressureSacFieldNum, value: value)
	}

	public func getVolumeSac() -> Float64? {
		guard let value = getFieldValue(fieldNum: RecordMesg.volumeSacFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setVolumeSac(_ value: Float64) throws {
		try setFieldValue(fieldNum: RecordMesg.volumeSacFieldNum, value: value)
	}

	public func getRmv() -> Float64? {
		guard let value = getFieldValue(fieldNum: RecordMesg.rmvFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setRmv(_ value: Float64) throws {
		try setFieldValue(fieldNum: RecordMesg.rmvFieldNum, value: value)
	}

	public func getAscentRate() -> Float64? {
		guard let value = getFieldValue(fieldNum: RecordMesg.ascentRateFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAscentRate(_ value: Float64) throws {
		try setFieldValue(fieldNum: RecordMesg.ascentRateFieldNum, value: value)
	}

	public func getPo2() -> Float64? {
		guard let value = getFieldValue(fieldNum: RecordMesg.po2FieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setPo2(_ value: Float64) throws {
		try setFieldValue(fieldNum: RecordMesg.po2FieldNum, value: value)
	}

	public func getCoreTemperature() -> Float64? {
		guard let value = getFieldValue(fieldNum: RecordMesg.coreTemperatureFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setCoreTemperature(_ value: Float64) throws {
		try setFieldValue(fieldNum: RecordMesg.coreTemperatureFieldNum, value: value)
	}

	public class func createRecordMesg() -> RecordMesg {
        let mesg = RecordMesg(name: "Record", num: Profile.MesgNum.record)
		
		mesg.fields[RecordMesg.timestampFieldNum] = Field(name: "Timestamp", num: RecordMesg.timestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
		mesg.fields[RecordMesg.positionLatFieldNum] = Field(name: "PositionLat", num: RecordMesg.positionLatFieldNum, type: BaseType.SINT32.rawValue, scale: 1, offset: 0, units: "semicircles", accumulated: false)
		mesg.fields[RecordMesg.positionLongFieldNum] = Field(name: "PositionLong", num: RecordMesg.positionLongFieldNum, type: BaseType.SINT32.rawValue, scale: 1, offset: 0, units: "semicircles", accumulated: false)
		mesg.fields[RecordMesg.altitudeFieldNum] = Field(name: "Altitude", num: RecordMesg.altitudeFieldNum, type: BaseType.UINT16.rawValue, scale: 5, offset: 500, units: "m", accumulated: false)
		mesg.fields[RecordMesg.altitudeFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: enhancedAltitudeFieldNum, accumulated: false, bits: 16, scale: 5, offset: 500))
		mesg.fields[RecordMesg.heartRateFieldNum] = Field(name: "HeartRate", num: RecordMesg.heartRateFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "bpm", accumulated: false)
		mesg.fields[RecordMesg.cadenceFieldNum] = Field(name: "Cadence", num: RecordMesg.cadenceFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "rpm", accumulated: false)
		mesg.fields[RecordMesg.distanceFieldNum] = Field(name: "Distance", num: RecordMesg.distanceFieldNum, type: BaseType.UINT32.rawValue, scale: 100, offset: 0, units: "m", accumulated: true)
		mesg.fields[RecordMesg.speedFieldNum] = Field(name: "Speed", num: RecordMesg.speedFieldNum, type: BaseType.UINT16.rawValue, scale: 1000, offset: 0, units: "m/s", accumulated: false)
		mesg.fields[RecordMesg.speedFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: enhancedSpeedFieldNum, accumulated: false, bits: 16, scale: 1000, offset: 0))
		mesg.fields[RecordMesg.powerFieldNum] = Field(name: "Power", num: RecordMesg.powerFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "watts", accumulated: false)
		mesg.fields[RecordMesg.compressedSpeedDistanceFieldNum] = Field(name: "CompressedSpeedDistance", num: RecordMesg.compressedSpeedDistanceFieldNum, type: BaseType.BYTE.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[RecordMesg.compressedSpeedDistanceFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: speedFieldNum, accumulated: false, bits: 12, scale: 100, offset: 0))
		mesg.fields[RecordMesg.compressedSpeedDistanceFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: distanceFieldNum, accumulated: true, bits: 12, scale: 16, offset: 0))
		mesg.fields[RecordMesg.gradeFieldNum] = Field(name: "Grade", num: RecordMesg.gradeFieldNum, type: BaseType.SINT16.rawValue, scale: 100, offset: 0, units: "%", accumulated: false)
		mesg.fields[RecordMesg.resistanceFieldNum] = Field(name: "Resistance", num: RecordMesg.resistanceFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[RecordMesg.timeFromCourseFieldNum] = Field(name: "TimeFromCourse", num: RecordMesg.timeFromCourseFieldNum, type: BaseType.SINT32.rawValue, scale: 1000, offset: 0, units: "s", accumulated: false)
		mesg.fields[RecordMesg.cycleLengthFieldNum] = Field(name: "CycleLength", num: RecordMesg.cycleLengthFieldNum, type: BaseType.UINT8.rawValue, scale: 100, offset: 0, units: "m", accumulated: false)
		mesg.fields[RecordMesg.temperatureFieldNum] = Field(name: "Temperature", num: RecordMesg.temperatureFieldNum, type: BaseType.SINT8.rawValue, scale: 1, offset: 0, units: "C", accumulated: false)
		mesg.fields[RecordMesg.speed1sFieldNum] = Field(name: "Speed1s", num: RecordMesg.speed1sFieldNum, type: BaseType.UINT8.rawValue, scale: 16, offset: 0, units: "m/s", accumulated: false)
		mesg.fields[RecordMesg.cyclesFieldNum] = Field(name: "Cycles", num: RecordMesg.cyclesFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "cycles", accumulated: false)
		mesg.fields[RecordMesg.cyclesFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: totalCyclesFieldNum, accumulated: true, bits: 8, scale: 1, offset: 0))
		mesg.fields[RecordMesg.totalCyclesFieldNum] = Field(name: "TotalCycles", num: RecordMesg.totalCyclesFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "cycles", accumulated: true)
		mesg.fields[RecordMesg.compressedAccumulatedPowerFieldNum] = Field(name: "CompressedAccumulatedPower", num: RecordMesg.compressedAccumulatedPowerFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "watts", accumulated: false)
		mesg.fields[RecordMesg.compressedAccumulatedPowerFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: accumulatedPowerFieldNum, accumulated: true, bits: 16, scale: 1, offset: 0))
		mesg.fields[RecordMesg.accumulatedPowerFieldNum] = Field(name: "AccumulatedPower", num: RecordMesg.accumulatedPowerFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "watts", accumulated: true)
		mesg.fields[RecordMesg.leftRightBalanceFieldNum] = Field(name: "LeftRightBalance", num: RecordMesg.leftRightBalanceFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[RecordMesg.gpsAccuracyFieldNum] = Field(name: "GpsAccuracy", num: RecordMesg.gpsAccuracyFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "m", accumulated: false)
		mesg.fields[RecordMesg.verticalSpeedFieldNum] = Field(name: "VerticalSpeed", num: RecordMesg.verticalSpeedFieldNum, type: BaseType.SINT16.rawValue, scale: 1000, offset: 0, units: "m/s", accumulated: false)
		mesg.fields[RecordMesg.caloriesFieldNum] = Field(name: "Calories", num: RecordMesg.caloriesFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "kcal", accumulated: false)
		mesg.fields[RecordMesg.verticalOscillationFieldNum] = Field(name: "VerticalOscillation", num: RecordMesg.verticalOscillationFieldNum, type: BaseType.UINT16.rawValue, scale: 10, offset: 0, units: "mm", accumulated: false)
		mesg.fields[RecordMesg.stanceTimePercentFieldNum] = Field(name: "StanceTimePercent", num: RecordMesg.stanceTimePercentFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "percent", accumulated: false)
		mesg.fields[RecordMesg.stanceTimeFieldNum] = Field(name: "StanceTime", num: RecordMesg.stanceTimeFieldNum, type: BaseType.UINT16.rawValue, scale: 10, offset: 0, units: "ms", accumulated: false)
		mesg.fields[RecordMesg.activityTypeFieldNum] = Field(name: "ActivityType", num: RecordMesg.activityTypeFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[RecordMesg.leftTorqueEffectivenessFieldNum] = Field(name: "LeftTorqueEffectiveness", num: RecordMesg.leftTorqueEffectivenessFieldNum, type: BaseType.UINT8.rawValue, scale: 2, offset: 0, units: "percent", accumulated: false)
		mesg.fields[RecordMesg.rightTorqueEffectivenessFieldNum] = Field(name: "RightTorqueEffectiveness", num: RecordMesg.rightTorqueEffectivenessFieldNum, type: BaseType.UINT8.rawValue, scale: 2, offset: 0, units: "percent", accumulated: false)
		mesg.fields[RecordMesg.leftPedalSmoothnessFieldNum] = Field(name: "LeftPedalSmoothness", num: RecordMesg.leftPedalSmoothnessFieldNum, type: BaseType.UINT8.rawValue, scale: 2, offset: 0, units: "percent", accumulated: false)
		mesg.fields[RecordMesg.rightPedalSmoothnessFieldNum] = Field(name: "RightPedalSmoothness", num: RecordMesg.rightPedalSmoothnessFieldNum, type: BaseType.UINT8.rawValue, scale: 2, offset: 0, units: "percent", accumulated: false)
		mesg.fields[RecordMesg.combinedPedalSmoothnessFieldNum] = Field(name: "CombinedPedalSmoothness", num: RecordMesg.combinedPedalSmoothnessFieldNum, type: BaseType.UINT8.rawValue, scale: 2, offset: 0, units: "percent", accumulated: false)
		mesg.fields[RecordMesg.time128FieldNum] = Field(name: "Time128", num: RecordMesg.time128FieldNum, type: BaseType.UINT8.rawValue, scale: 128, offset: 0, units: "s", accumulated: false)
		mesg.fields[RecordMesg.strokeTypeFieldNum] = Field(name: "StrokeType", num: RecordMesg.strokeTypeFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[RecordMesg.zoneFieldNum] = Field(name: "Zone", num: RecordMesg.zoneFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[RecordMesg.ballSpeedFieldNum] = Field(name: "BallSpeed", num: RecordMesg.ballSpeedFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "m/s", accumulated: false)
		mesg.fields[RecordMesg.cadence256FieldNum] = Field(name: "Cadence256", num: RecordMesg.cadence256FieldNum, type: BaseType.UINT16.rawValue, scale: 256, offset: 0, units: "rpm", accumulated: false)
		mesg.fields[RecordMesg.fractionalCadenceFieldNum] = Field(name: "FractionalCadence", num: RecordMesg.fractionalCadenceFieldNum, type: BaseType.UINT8.rawValue, scale: 128, offset: 0, units: "rpm", accumulated: false)
		mesg.fields[RecordMesg.totalHemoglobinConcFieldNum] = Field(name: "TotalHemoglobinConc", num: RecordMesg.totalHemoglobinConcFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "g/dL", accumulated: false)
		mesg.fields[RecordMesg.totalHemoglobinConcMinFieldNum] = Field(name: "TotalHemoglobinConcMin", num: RecordMesg.totalHemoglobinConcMinFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "g/dL", accumulated: false)
		mesg.fields[RecordMesg.totalHemoglobinConcMaxFieldNum] = Field(name: "TotalHemoglobinConcMax", num: RecordMesg.totalHemoglobinConcMaxFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "g/dL", accumulated: false)
		mesg.fields[RecordMesg.saturatedHemoglobinPercentFieldNum] = Field(name: "SaturatedHemoglobinPercent", num: RecordMesg.saturatedHemoglobinPercentFieldNum, type: BaseType.UINT16.rawValue, scale: 10, offset: 0, units: "%", accumulated: false)
		mesg.fields[RecordMesg.saturatedHemoglobinPercentMinFieldNum] = Field(name: "SaturatedHemoglobinPercentMin", num: RecordMesg.saturatedHemoglobinPercentMinFieldNum, type: BaseType.UINT16.rawValue, scale: 10, offset: 0, units: "%", accumulated: false)
		mesg.fields[RecordMesg.saturatedHemoglobinPercentMaxFieldNum] = Field(name: "SaturatedHemoglobinPercentMax", num: RecordMesg.saturatedHemoglobinPercentMaxFieldNum, type: BaseType.UINT16.rawValue, scale: 10, offset: 0, units: "%", accumulated: false)
		mesg.fields[RecordMesg.deviceIndexFieldNum] = Field(name: "DeviceIndex", num: RecordMesg.deviceIndexFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[RecordMesg.leftPcoFieldNum] = Field(name: "LeftPco", num: RecordMesg.leftPcoFieldNum, type: BaseType.SINT8.rawValue, scale: 1, offset: 0, units: "mm", accumulated: false)
		mesg.fields[RecordMesg.rightPcoFieldNum] = Field(name: "RightPco", num: RecordMesg.rightPcoFieldNum, type: BaseType.SINT8.rawValue, scale: 1, offset: 0, units: "mm", accumulated: false)
		mesg.fields[RecordMesg.leftPowerPhaseFieldNum] = Field(name: "LeftPowerPhase", num: RecordMesg.leftPowerPhaseFieldNum, type: BaseType.UINT8.rawValue, scale: 0.7111111, offset: 0, units: "degrees", accumulated: false)
		mesg.fields[RecordMesg.leftPowerPhasePeakFieldNum] = Field(name: "LeftPowerPhasePeak", num: RecordMesg.leftPowerPhasePeakFieldNum, type: BaseType.UINT8.rawValue, scale: 0.7111111, offset: 0, units: "degrees", accumulated: false)
		mesg.fields[RecordMesg.rightPowerPhaseFieldNum] = Field(name: "RightPowerPhase", num: RecordMesg.rightPowerPhaseFieldNum, type: BaseType.UINT8.rawValue, scale: 0.7111111, offset: 0, units: "degrees", accumulated: false)
		mesg.fields[RecordMesg.rightPowerPhasePeakFieldNum] = Field(name: "RightPowerPhasePeak", num: RecordMesg.rightPowerPhasePeakFieldNum, type: BaseType.UINT8.rawValue, scale: 0.7111111, offset: 0, units: "degrees", accumulated: false)
		mesg.fields[RecordMesg.enhancedSpeedFieldNum] = Field(name: "EnhancedSpeed", num: RecordMesg.enhancedSpeedFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "m/s", accumulated: false)
		mesg.fields[RecordMesg.enhancedAltitudeFieldNum] = Field(name: "EnhancedAltitude", num: RecordMesg.enhancedAltitudeFieldNum, type: BaseType.UINT32.rawValue, scale: 5, offset: 500, units: "m", accumulated: false)
		mesg.fields[RecordMesg.batterySocFieldNum] = Field(name: "BatterySoc", num: RecordMesg.batterySocFieldNum, type: BaseType.UINT8.rawValue, scale: 2, offset: 0, units: "percent", accumulated: false)
		mesg.fields[RecordMesg.motorPowerFieldNum] = Field(name: "MotorPower", num: RecordMesg.motorPowerFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "watts", accumulated: false)
		mesg.fields[RecordMesg.verticalRatioFieldNum] = Field(name: "VerticalRatio", num: RecordMesg.verticalRatioFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "percent", accumulated: false)
		mesg.fields[RecordMesg.stanceTimeBalanceFieldNum] = Field(name: "StanceTimeBalance", num: RecordMesg.stanceTimeBalanceFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "percent", accumulated: false)
		mesg.fields[RecordMesg.stepLengthFieldNum] = Field(name: "StepLength", num: RecordMesg.stepLengthFieldNum, type: BaseType.UINT16.rawValue, scale: 10, offset: 0, units: "mm", accumulated: false)
		mesg.fields[RecordMesg.cycleLength16FieldNum] = Field(name: "CycleLength16", num: RecordMesg.cycleLength16FieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "m", accumulated: false)
		mesg.fields[RecordMesg.absolutePressureFieldNum] = Field(name: "AbsolutePressure", num: RecordMesg.absolutePressureFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "Pa", accumulated: false)
		mesg.fields[RecordMesg.depthFieldNum] = Field(name: "Depth", num: RecordMesg.depthFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "m", accumulated: false)
		mesg.fields[RecordMesg.nextStopDepthFieldNum] = Field(name: "NextStopDepth", num: RecordMesg.nextStopDepthFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "m", accumulated: false)
		mesg.fields[RecordMesg.nextStopTimeFieldNum] = Field(name: "NextStopTime", num: RecordMesg.nextStopTimeFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
		mesg.fields[RecordMesg.timeToSurfaceFieldNum] = Field(name: "TimeToSurface", num: RecordMesg.timeToSurfaceFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
		mesg.fields[RecordMesg.ndlTimeFieldNum] = Field(name: "NdlTime", num: RecordMesg.ndlTimeFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
		mesg.fields[RecordMesg.cnsLoadFieldNum] = Field(name: "CnsLoad", num: RecordMesg.cnsLoadFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "percent", accumulated: false)
		mesg.fields[RecordMesg.n2LoadFieldNum] = Field(name: "N2Load", num: RecordMesg.n2LoadFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "percent", accumulated: false)
		mesg.fields[RecordMesg.respirationRateFieldNum] = Field(name: "RespirationRate", num: RecordMesg.respirationRateFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
		mesg.fields[RecordMesg.respirationRateFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: enhancedRespirationRateFieldNum, accumulated: false, bits: 8, scale: 1, offset: 0))
		mesg.fields[RecordMesg.enhancedRespirationRateFieldNum] = Field(name: "EnhancedRespirationRate", num: RecordMesg.enhancedRespirationRateFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "Breaths/min", accumulated: false)
		mesg.fields[RecordMesg.gritFieldNum] = Field(name: "Grit", num: RecordMesg.gritFieldNum, type: BaseType.FLOAT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[RecordMesg.flowFieldNum] = Field(name: "Flow", num: RecordMesg.flowFieldNum, type: BaseType.FLOAT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[RecordMesg.currentStressFieldNum] = Field(name: "CurrentStress", num: RecordMesg.currentStressFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "", accumulated: false)
		mesg.fields[RecordMesg.ebikeTravelRangeFieldNum] = Field(name: "EbikeTravelRange", num: RecordMesg.ebikeTravelRangeFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "km", accumulated: false)
		mesg.fields[RecordMesg.ebikeBatteryLevelFieldNum] = Field(name: "EbikeBatteryLevel", num: RecordMesg.ebikeBatteryLevelFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "percent", accumulated: false)
		mesg.fields[RecordMesg.ebikeAssistModeFieldNum] = Field(name: "EbikeAssistMode", num: RecordMesg.ebikeAssistModeFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "depends on sensor", accumulated: false)
		mesg.fields[RecordMesg.ebikeAssistLevelPercentFieldNum] = Field(name: "EbikeAssistLevelPercent", num: RecordMesg.ebikeAssistLevelPercentFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "percent", accumulated: false)
		mesg.fields[RecordMesg.airTimeRemainingFieldNum] = Field(name: "AirTimeRemaining", num: RecordMesg.airTimeRemainingFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
		mesg.fields[RecordMesg.pressureSacFieldNum] = Field(name: "PressureSac", num: RecordMesg.pressureSacFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "bar/min", accumulated: false)
		mesg.fields[RecordMesg.volumeSacFieldNum] = Field(name: "VolumeSac", num: RecordMesg.volumeSacFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "L/min", accumulated: false)
		mesg.fields[RecordMesg.rmvFieldNum] = Field(name: "Rmv", num: RecordMesg.rmvFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "L/min", accumulated: false)
		mesg.fields[RecordMesg.ascentRateFieldNum] = Field(name: "AscentRate", num: RecordMesg.ascentRateFieldNum, type: BaseType.SINT32.rawValue, scale: 1000, offset: 0, units: "m/s", accumulated: false)
		mesg.fields[RecordMesg.po2FieldNum] = Field(name: "Po2", num: RecordMesg.po2FieldNum, type: BaseType.UINT8.rawValue, scale: 100, offset: 0, units: "percent", accumulated: false)
		mesg.fields[RecordMesg.coreTemperatureFieldNum] = Field(name: "CoreTemperature", num: RecordMesg.coreTemperatureFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "C", accumulated: false)
        return mesg
    }
}