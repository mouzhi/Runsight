/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class WatchfaceSettingsMesg : Mesg {
    public static let messageIndexFieldNum:UInt8 = 254
    public static let modeFieldNum:UInt8 = 0
    public static let layoutFieldNum:UInt8 = 1

	private struct LayoutSubField {
        public static let digitalLayout:UInt16 = 0
        public static let analogLayout:UInt16 = 1
        public static let subfields:UInt16 = 2
        public static let active:UInt16 = FIT.SUBFIELD_INDEX.ACTIVE_SUBFIELD
        public static let mainField:UInt16 = FIT.SUBFIELD_INDEX.MAIN_FIELD
    }

	public init() {
        super.init(mesg: WatchfaceSettingsMesg.createWatchfaceSettingsMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getMessageIndex() -> MessageIndex? {
		guard let value = getFieldValue(fieldNum: WatchfaceSettingsMesg.messageIndexFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setMessageIndex(_ value: MessageIndex) throws {
		try setFieldValue(fieldNum: WatchfaceSettingsMesg.messageIndexFieldNum, value: value)
	}

	public func getMode() -> WatchfaceMode? {
		guard let value = getFieldValue(fieldNum: WatchfaceSettingsMesg.modeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return WatchfaceMode(rawValue: value) ?? .invalid
	}

	public func setMode(_ value: WatchfaceMode) throws {
		try setFieldValue(fieldNum: WatchfaceSettingsMesg.modeFieldNum, value: value.rawValue)
	}

	public func getLayout() -> UInt8? {
		guard let value = getFieldValue(fieldNum: WatchfaceSettingsMesg.layoutFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setLayout(_ value: UInt8) throws {
		try setFieldValue(fieldNum: WatchfaceSettingsMesg.layoutFieldNum, value: value)
	}

	public func getDigitalLayout() throws -> DigitalWatchfaceLayout? {
		guard let value = try getFieldValue(fieldNum: WatchfaceSettingsMesg.layoutFieldNum, index: 0, subFieldIndex: LayoutSubField.digitalLayout).map({UInt8(fitValue: $0)}) else {
			return nil
		}
		
		return DigitalWatchfaceLayout(rawValue: value) ?? .invalid
	}

	public func setDigitalLayout(_ value: DigitalWatchfaceLayout) throws {
		try setFieldValue(fieldNum: WatchfaceSettingsMesg.layoutFieldNum, value: value.rawValue, index: 0, subFieldIndex: LayoutSubField.digitalLayout )
	}

	public func getAnalogLayout() throws -> AnalogWatchfaceLayout? {
		guard let value = try getFieldValue(fieldNum: WatchfaceSettingsMesg.layoutFieldNum, index: 0, subFieldIndex: LayoutSubField.analogLayout).map({UInt8(fitValue: $0)}) else {
			return nil
		}
		
		return AnalogWatchfaceLayout(rawValue: value) ?? .invalid
	}

	public func setAnalogLayout(_ value: AnalogWatchfaceLayout) throws {
		try setFieldValue(fieldNum: WatchfaceSettingsMesg.layoutFieldNum, value: value.rawValue, index: 0, subFieldIndex: LayoutSubField.analogLayout )
	}

	public class func createWatchfaceSettingsMesg() -> WatchfaceSettingsMesg {
        let mesg = WatchfaceSettingsMesg(name: "WatchfaceSettings", num: Profile.MesgNum.watchfaceSettings)
		
		mesg.fields[WatchfaceSettingsMesg.messageIndexFieldNum] = Field(name: "MessageIndex", num: WatchfaceSettingsMesg.messageIndexFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[WatchfaceSettingsMesg.modeFieldNum] = Field(name: "Mode", num: WatchfaceSettingsMesg.modeFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[WatchfaceSettingsMesg.layoutFieldNum] = Field(name: "Layout", num: WatchfaceSettingsMesg.layoutFieldNum, type: BaseType.BYTE.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
        mesg.fields[WatchfaceSettingsMesg.layoutFieldNum]?.subFields.append(SubField(name: "DigitalLayout", type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: ""))
        mesg.fields[WatchfaceSettingsMesg.layoutFieldNum]?.subFields[Int(LayoutSubField.digitalLayout)].addMap(refFieldNum: 0, refFieldValue: 0)
        mesg.fields[WatchfaceSettingsMesg.layoutFieldNum]?.subFields.append(SubField(name: "AnalogLayout", type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: ""))
        mesg.fields[WatchfaceSettingsMesg.layoutFieldNum]?.subFields[Int(LayoutSubField.analogLayout)].addMap(refFieldNum: 0, refFieldValue: 1)
        return mesg
    }
}