/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class ExdDataConceptConfigurationMesg : Mesg {
    public static let screenIndexFieldNum:UInt8 = 0
    public static let conceptFieldFieldNum:UInt8 = 1
    public static let fieldIdFieldNum:UInt8 = 2
    public static let conceptIndexFieldNum:UInt8 = 3
    public static let dataPageFieldNum:UInt8 = 4
    public static let conceptKeyFieldNum:UInt8 = 5
    public static let scalingFieldNum:UInt8 = 6
    public static let dataUnitsFieldNum:UInt8 = 8
    public static let qualifierFieldNum:UInt8 = 9
    public static let descriptorFieldNum:UInt8 = 10
    public static let isSignedFieldNum:UInt8 = 11

	public init() {
        super.init(mesg: ExdDataConceptConfigurationMesg.createExdDataConceptConfigurationMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getScreenIndex() -> UInt8? {
		guard let value = getFieldValue(fieldNum: ExdDataConceptConfigurationMesg.screenIndexFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setScreenIndex(_ value: UInt8) throws {
		try setFieldValue(fieldNum: ExdDataConceptConfigurationMesg.screenIndexFieldNum, value: value)
	}

	public func getConceptField() -> UInt8? {
		guard let value = getFieldValue(fieldNum: ExdDataConceptConfigurationMesg.conceptFieldFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setConceptField(_ value: UInt8) throws {
		try setFieldValue(fieldNum: ExdDataConceptConfigurationMesg.conceptFieldFieldNum, value: value)
	}

	public func getFieldId() -> UInt8? {
		guard let value = getFieldValue(fieldNum: ExdDataConceptConfigurationMesg.fieldIdFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setFieldId(_ value: UInt8) throws {
		try setFieldValue(fieldNum: ExdDataConceptConfigurationMesg.fieldIdFieldNum, value: value)
	}

	public func getConceptIndex() -> UInt8? {
		guard let value = getFieldValue(fieldNum: ExdDataConceptConfigurationMesg.conceptIndexFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setConceptIndex(_ value: UInt8) throws {
		try setFieldValue(fieldNum: ExdDataConceptConfigurationMesg.conceptIndexFieldNum, value: value)
	}

	public func getDataPage() -> UInt8? {
		guard let value = getFieldValue(fieldNum: ExdDataConceptConfigurationMesg.dataPageFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setDataPage(_ value: UInt8) throws {
		try setFieldValue(fieldNum: ExdDataConceptConfigurationMesg.dataPageFieldNum, value: value)
	}

	public func getConceptKey() -> UInt8? {
		guard let value = getFieldValue(fieldNum: ExdDataConceptConfigurationMesg.conceptKeyFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setConceptKey(_ value: UInt8) throws {
		try setFieldValue(fieldNum: ExdDataConceptConfigurationMesg.conceptKeyFieldNum, value: value)
	}

	public func getScaling() -> UInt8? {
		guard let value = getFieldValue(fieldNum: ExdDataConceptConfigurationMesg.scalingFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setScaling(_ value: UInt8) throws {
		try setFieldValue(fieldNum: ExdDataConceptConfigurationMesg.scalingFieldNum, value: value)
	}

	public func getDataUnits() -> ExdDataUnits? {
		guard let value = getFieldValue(fieldNum: ExdDataConceptConfigurationMesg.dataUnitsFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return ExdDataUnits(rawValue: value) ?? .invalid
	}

	public func setDataUnits(_ value: ExdDataUnits) throws {
		try setFieldValue(fieldNum: ExdDataConceptConfigurationMesg.dataUnitsFieldNum, value: value.rawValue)
	}

	public func getQualifier() -> ExdQualifiers? {
		guard let value = getFieldValue(fieldNum: ExdDataConceptConfigurationMesg.qualifierFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return ExdQualifiers(rawValue: value) ?? .invalid
	}

	public func setQualifier(_ value: ExdQualifiers) throws {
		try setFieldValue(fieldNum: ExdDataConceptConfigurationMesg.qualifierFieldNum, value: value.rawValue)
	}

	public func getDescriptor() -> ExdDescriptors? {
		guard let value = getFieldValue(fieldNum: ExdDataConceptConfigurationMesg.descriptorFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return ExdDescriptors(rawValue: value) ?? .invalid
	}

	public func setDescriptor(_ value: ExdDescriptors) throws {
		try setFieldValue(fieldNum: ExdDataConceptConfigurationMesg.descriptorFieldNum, value: value.rawValue)
	}

	public func getIsSigned() -> Bool? {
		guard let value = getFieldValue(fieldNum: ExdDataConceptConfigurationMesg.isSignedFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value == 1 ? true : false
	}

	public func setIsSigned(_ value: Bool) throws {
		try setFieldValue(fieldNum: ExdDataConceptConfigurationMesg.isSignedFieldNum, value: value)
	}

	public class func createExdDataConceptConfigurationMesg() -> ExdDataConceptConfigurationMesg {
        let mesg = ExdDataConceptConfigurationMesg(name: "ExdDataConceptConfiguration", num: Profile.MesgNum.exdDataConceptConfiguration)
		
		mesg.fields[ExdDataConceptConfigurationMesg.screenIndexFieldNum] = Field(name: "ScreenIndex", num: ExdDataConceptConfigurationMesg.screenIndexFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[ExdDataConceptConfigurationMesg.conceptFieldFieldNum] = Field(name: "ConceptField", num: ExdDataConceptConfigurationMesg.conceptFieldFieldNum, type: BaseType.BYTE.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[ExdDataConceptConfigurationMesg.conceptFieldFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: fieldIdFieldNum, accumulated: false, bits: 4, scale: 1, offset: 0))
		mesg.fields[ExdDataConceptConfigurationMesg.conceptFieldFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: conceptIndexFieldNum, accumulated: false, bits: 4, scale: 1, offset: 0))
		mesg.fields[ExdDataConceptConfigurationMesg.fieldIdFieldNum] = Field(name: "FieldId", num: ExdDataConceptConfigurationMesg.fieldIdFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[ExdDataConceptConfigurationMesg.conceptIndexFieldNum] = Field(name: "ConceptIndex", num: ExdDataConceptConfigurationMesg.conceptIndexFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[ExdDataConceptConfigurationMesg.dataPageFieldNum] = Field(name: "DataPage", num: ExdDataConceptConfigurationMesg.dataPageFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[ExdDataConceptConfigurationMesg.conceptKeyFieldNum] = Field(name: "ConceptKey", num: ExdDataConceptConfigurationMesg.conceptKeyFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[ExdDataConceptConfigurationMesg.scalingFieldNum] = Field(name: "Scaling", num: ExdDataConceptConfigurationMesg.scalingFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[ExdDataConceptConfigurationMesg.dataUnitsFieldNum] = Field(name: "DataUnits", num: ExdDataConceptConfigurationMesg.dataUnitsFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[ExdDataConceptConfigurationMesg.qualifierFieldNum] = Field(name: "Qualifier", num: ExdDataConceptConfigurationMesg.qualifierFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[ExdDataConceptConfigurationMesg.descriptorFieldNum] = Field(name: "Descriptor", num: ExdDataConceptConfigurationMesg.descriptorFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[ExdDataConceptConfigurationMesg.isSignedFieldNum] = Field(name: "IsSigned", num: ExdDataConceptConfigurationMesg.isSignedFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
        return mesg
    }
}