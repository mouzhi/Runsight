/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class SegmentPointMesg : Mesg {
    public static let messageIndexFieldNum:UInt8 = 254
    public static let positionLatFieldNum:UInt8 = 1
    public static let positionLongFieldNum:UInt8 = 2
    public static let distanceFieldNum:UInt8 = 3
    public static let altitudeFieldNum:UInt8 = 4
    public static let leaderTimeFieldNum:UInt8 = 5
    public static let enhancedAltitudeFieldNum:UInt8 = 6

	public init() {
        super.init(mesg: SegmentPointMesg.createSegmentPointMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getMessageIndex() -> MessageIndex? {
		guard let value = getFieldValue(fieldNum: SegmentPointMesg.messageIndexFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setMessageIndex(_ value: MessageIndex) throws {
		try setFieldValue(fieldNum: SegmentPointMesg.messageIndexFieldNum, value: value)
	}

	public func getPositionLat() -> Int32? {
		guard let value = getFieldValue(fieldNum: SegmentPointMesg.positionLatFieldNum, index:0) as? Int32 else {
            return nil
        }
		return value
	}

	public func setPositionLat(_ value: Int32) throws {
		try setFieldValue(fieldNum: SegmentPointMesg.positionLatFieldNum, value: value)
	}

	public func getPositionLong() -> Int32? {
		guard let value = getFieldValue(fieldNum: SegmentPointMesg.positionLongFieldNum, index:0) as? Int32 else {
            return nil
        }
		return value
	}

	public func setPositionLong(_ value: Int32) throws {
		try setFieldValue(fieldNum: SegmentPointMesg.positionLongFieldNum, value: value)
	}

	public func getDistance() -> Float64? {
		guard let value = getFieldValue(fieldNum: SegmentPointMesg.distanceFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setDistance(_ value: Float64) throws {
		try setFieldValue(fieldNum: SegmentPointMesg.distanceFieldNum, value: value)
	}

	public func getAltitude() -> Float64? {
		guard let value = getFieldValue(fieldNum: SegmentPointMesg.altitudeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAltitude(_ value: Float64) throws {
		try setFieldValue(fieldNum: SegmentPointMesg.altitudeFieldNum, value: value)
	}

	public func getNumLeaderTime() -> UInt8 {
		guard let field = getField(fieldNum: SegmentPointMesg.leaderTimeFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getLeaderTime() -> [Float64?]? {
		guard let field = getField(fieldNum: SegmentPointMesg.leaderTimeFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getLeaderTime(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: SegmentPointMesg.leaderTimeFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setLeaderTime(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: SegmentPointMesg.leaderTimeFieldNum, value: value, index: index)
	}

	public func getEnhancedAltitude() -> Float64? {
		guard let value = getFieldValue(fieldNum: SegmentPointMesg.enhancedAltitudeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setEnhancedAltitude(_ value: Float64) throws {
		try setFieldValue(fieldNum: SegmentPointMesg.enhancedAltitudeFieldNum, value: value)
	}

	public class func createSegmentPointMesg() -> SegmentPointMesg {
        let mesg = SegmentPointMesg(name: "SegmentPoint", num: Profile.MesgNum.segmentPoint)
		
		mesg.fields[SegmentPointMesg.messageIndexFieldNum] = Field(name: "MessageIndex", num: SegmentPointMesg.messageIndexFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SegmentPointMesg.positionLatFieldNum] = Field(name: "PositionLat", num: SegmentPointMesg.positionLatFieldNum, type: BaseType.SINT32.rawValue, scale: 1, offset: 0, units: "semicircles", accumulated: false)
		mesg.fields[SegmentPointMesg.positionLongFieldNum] = Field(name: "PositionLong", num: SegmentPointMesg.positionLongFieldNum, type: BaseType.SINT32.rawValue, scale: 1, offset: 0, units: "semicircles", accumulated: false)
		mesg.fields[SegmentPointMesg.distanceFieldNum] = Field(name: "Distance", num: SegmentPointMesg.distanceFieldNum, type: BaseType.UINT32.rawValue, scale: 100, offset: 0, units: "m", accumulated: false)
		mesg.fields[SegmentPointMesg.altitudeFieldNum] = Field(name: "Altitude", num: SegmentPointMesg.altitudeFieldNum, type: BaseType.UINT16.rawValue, scale: 5, offset: 500, units: "m", accumulated: false)
		mesg.fields[SegmentPointMesg.altitudeFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: enhancedAltitudeFieldNum, accumulated: false, bits: 16, scale: 5, offset: 500))
		mesg.fields[SegmentPointMesg.leaderTimeFieldNum] = Field(name: "LeaderTime", num: SegmentPointMesg.leaderTimeFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "s", accumulated: false)
		mesg.fields[SegmentPointMesg.enhancedAltitudeFieldNum] = Field(name: "EnhancedAltitude", num: SegmentPointMesg.enhancedAltitudeFieldNum, type: BaseType.UINT32.rawValue, scale: 5, offset: 500, units: "m", accumulated: false)
        return mesg
    }
}