/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class LengthMesg : Mesg {
    public static let messageIndexFieldNum:UInt8 = 254
    public static let timestampFieldNum:UInt8 = 253
    public static let eventFieldNum:UInt8 = 0
    public static let eventTypeFieldNum:UInt8 = 1
    public static let startTimeFieldNum:UInt8 = 2
    public static let totalElapsedTimeFieldNum:UInt8 = 3
    public static let totalTimerTimeFieldNum:UInt8 = 4
    public static let totalStrokesFieldNum:UInt8 = 5
    public static let avgSpeedFieldNum:UInt8 = 6
    public static let swimStrokeFieldNum:UInt8 = 7
    public static let avgSwimmingCadenceFieldNum:UInt8 = 9
    public static let eventGroupFieldNum:UInt8 = 10
    public static let totalCaloriesFieldNum:UInt8 = 11
    public static let lengthTypeFieldNum:UInt8 = 12
    public static let playerScoreFieldNum:UInt8 = 18
    public static let opponentScoreFieldNum:UInt8 = 19
    public static let strokeCountFieldNum:UInt8 = 20
    public static let zoneCountFieldNum:UInt8 = 21
    public static let enhancedAvgRespirationRateFieldNum:UInt8 = 22
    public static let enhancedMaxRespirationRateFieldNum:UInt8 = 23
    public static let avgRespirationRateFieldNum:UInt8 = 24
    public static let maxRespirationRateFieldNum:UInt8 = 25

	public init() {
        super.init(mesg: LengthMesg.createLengthMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getMessageIndex() -> MessageIndex? {
		guard let value = getFieldValue(fieldNum: LengthMesg.messageIndexFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setMessageIndex(_ value: MessageIndex) throws {
		try setFieldValue(fieldNum: LengthMesg.messageIndexFieldNum, value: value)
	}

	public func getTimestamp() -> DateTime? {
		guard let value = getFieldValue(fieldNum: LengthMesg.timestampFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setTimestamp(_ value: DateTime) throws {
		try setFieldValue(fieldNum: LengthMesg.timestampFieldNum, value: value.timestamp)
	}

	public func getEvent() -> Event? {
		guard let value = getFieldValue(fieldNum: LengthMesg.eventFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return Event(rawValue: value) ?? .invalid
	}

	public func setEvent(_ value: Event) throws {
		try setFieldValue(fieldNum: LengthMesg.eventFieldNum, value: value.rawValue)
	}

	public func getEventType() -> EventType? {
		guard let value = getFieldValue(fieldNum: LengthMesg.eventTypeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return EventType(rawValue: value) ?? .invalid
	}

	public func setEventType(_ value: EventType) throws {
		try setFieldValue(fieldNum: LengthMesg.eventTypeFieldNum, value: value.rawValue)
	}

	public func getStartTime() -> DateTime? {
		guard let value = getFieldValue(fieldNum: LengthMesg.startTimeFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setStartTime(_ value: DateTime) throws {
		try setFieldValue(fieldNum: LengthMesg.startTimeFieldNum, value: value.timestamp)
	}

	public func getTotalElapsedTime() -> Float64? {
		guard let value = getFieldValue(fieldNum: LengthMesg.totalElapsedTimeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTotalElapsedTime(_ value: Float64) throws {
		try setFieldValue(fieldNum: LengthMesg.totalElapsedTimeFieldNum, value: value)
	}

	public func getTotalTimerTime() -> Float64? {
		guard let value = getFieldValue(fieldNum: LengthMesg.totalTimerTimeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTotalTimerTime(_ value: Float64) throws {
		try setFieldValue(fieldNum: LengthMesg.totalTimerTimeFieldNum, value: value)
	}

	public func getTotalStrokes() -> UInt16? {
		guard let value = getFieldValue(fieldNum: LengthMesg.totalStrokesFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setTotalStrokes(_ value: UInt16) throws {
		try setFieldValue(fieldNum: LengthMesg.totalStrokesFieldNum, value: value)
	}

	public func getAvgSpeed() -> Float64? {
		guard let value = getFieldValue(fieldNum: LengthMesg.avgSpeedFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgSpeed(_ value: Float64) throws {
		try setFieldValue(fieldNum: LengthMesg.avgSpeedFieldNum, value: value)
	}

	public func getSwimStroke() -> SwimStroke? {
		guard let value = getFieldValue(fieldNum: LengthMesg.swimStrokeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return SwimStroke(rawValue: value) ?? .invalid
	}

	public func setSwimStroke(_ value: SwimStroke) throws {
		try setFieldValue(fieldNum: LengthMesg.swimStrokeFieldNum, value: value.rawValue)
	}

	public func getAvgSwimmingCadence() -> UInt8? {
		guard let value = getFieldValue(fieldNum: LengthMesg.avgSwimmingCadenceFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setAvgSwimmingCadence(_ value: UInt8) throws {
		try setFieldValue(fieldNum: LengthMesg.avgSwimmingCadenceFieldNum, value: value)
	}

	public func getEventGroup() -> UInt8? {
		guard let value = getFieldValue(fieldNum: LengthMesg.eventGroupFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setEventGroup(_ value: UInt8) throws {
		try setFieldValue(fieldNum: LengthMesg.eventGroupFieldNum, value: value)
	}

	public func getTotalCalories() -> UInt16? {
		guard let value = getFieldValue(fieldNum: LengthMesg.totalCaloriesFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setTotalCalories(_ value: UInt16) throws {
		try setFieldValue(fieldNum: LengthMesg.totalCaloriesFieldNum, value: value)
	}

	public func getLengthType() -> LengthType? {
		guard let value = getFieldValue(fieldNum: LengthMesg.lengthTypeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return LengthType(rawValue: value) ?? .invalid
	}

	public func setLengthType(_ value: LengthType) throws {
		try setFieldValue(fieldNum: LengthMesg.lengthTypeFieldNum, value: value.rawValue)
	}

	public func getPlayerScore() -> UInt16? {
		guard let value = getFieldValue(fieldNum: LengthMesg.playerScoreFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setPlayerScore(_ value: UInt16) throws {
		try setFieldValue(fieldNum: LengthMesg.playerScoreFieldNum, value: value)
	}

	public func getOpponentScore() -> UInt16? {
		guard let value = getFieldValue(fieldNum: LengthMesg.opponentScoreFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setOpponentScore(_ value: UInt16) throws {
		try setFieldValue(fieldNum: LengthMesg.opponentScoreFieldNum, value: value)
	}

	public func getNumStrokeCount() -> UInt8 {
		guard let field = getField(fieldNum: LengthMesg.strokeCountFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getStrokeCount() -> [UInt16?]? {
		guard let field = getField(fieldNum: LengthMesg.strokeCountFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt16?]
	}

	public func getStrokeCount(index: Int) -> UInt16? {
		guard let value = getFieldValue(fieldNum: LengthMesg.strokeCountFieldNum, index: index) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setStrokeCount(index: Int, value: UInt16) throws {
		try setFieldValue(fieldNum: LengthMesg.strokeCountFieldNum, value: value, index: index)
	}

	public func getNumZoneCount() -> UInt8 {
		guard let field = getField(fieldNum: LengthMesg.zoneCountFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getZoneCount() -> [UInt16?]? {
		guard let field = getField(fieldNum: LengthMesg.zoneCountFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt16?]
	}

	public func getZoneCount(index: Int) -> UInt16? {
		guard let value = getFieldValue(fieldNum: LengthMesg.zoneCountFieldNum, index: index) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setZoneCount(index: Int, value: UInt16) throws {
		try setFieldValue(fieldNum: LengthMesg.zoneCountFieldNum, value: value, index: index)
	}

	public func getEnhancedAvgRespirationRate() -> Float64? {
		guard let value = getFieldValue(fieldNum: LengthMesg.enhancedAvgRespirationRateFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setEnhancedAvgRespirationRate(_ value: Float64) throws {
		try setFieldValue(fieldNum: LengthMesg.enhancedAvgRespirationRateFieldNum, value: value)
	}

	public func getEnhancedMaxRespirationRate() -> Float64? {
		guard let value = getFieldValue(fieldNum: LengthMesg.enhancedMaxRespirationRateFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setEnhancedMaxRespirationRate(_ value: Float64) throws {
		try setFieldValue(fieldNum: LengthMesg.enhancedMaxRespirationRateFieldNum, value: value)
	}

	public func getAvgRespirationRate() -> UInt8? {
		guard let value = getFieldValue(fieldNum: LengthMesg.avgRespirationRateFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setAvgRespirationRate(_ value: UInt8) throws {
		try setFieldValue(fieldNum: LengthMesg.avgRespirationRateFieldNum, value: value)
	}

	public func getMaxRespirationRate() -> UInt8? {
		guard let value = getFieldValue(fieldNum: LengthMesg.maxRespirationRateFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setMaxRespirationRate(_ value: UInt8) throws {
		try setFieldValue(fieldNum: LengthMesg.maxRespirationRateFieldNum, value: value)
	}

	public class func createLengthMesg() -> LengthMesg {
        let mesg = LengthMesg(name: "Length", num: Profile.MesgNum.length)
		
		mesg.fields[LengthMesg.messageIndexFieldNum] = Field(name: "MessageIndex", num: LengthMesg.messageIndexFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[LengthMesg.timestampFieldNum] = Field(name: "Timestamp", num: LengthMesg.timestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[LengthMesg.eventFieldNum] = Field(name: "Event", num: LengthMesg.eventFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[LengthMesg.eventTypeFieldNum] = Field(name: "EventType", num: LengthMesg.eventTypeFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[LengthMesg.startTimeFieldNum] = Field(name: "StartTime", num: LengthMesg.startTimeFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[LengthMesg.totalElapsedTimeFieldNum] = Field(name: "TotalElapsedTime", num: LengthMesg.totalElapsedTimeFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "s", accumulated: false)
		mesg.fields[LengthMesg.totalTimerTimeFieldNum] = Field(name: "TotalTimerTime", num: LengthMesg.totalTimerTimeFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "s", accumulated: false)
		mesg.fields[LengthMesg.totalStrokesFieldNum] = Field(name: "TotalStrokes", num: LengthMesg.totalStrokesFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "strokes", accumulated: false)
		mesg.fields[LengthMesg.avgSpeedFieldNum] = Field(name: "AvgSpeed", num: LengthMesg.avgSpeedFieldNum, type: BaseType.UINT16.rawValue, scale: 1000, offset: 0, units: "m/s", accumulated: false)
		mesg.fields[LengthMesg.swimStrokeFieldNum] = Field(name: "SwimStroke", num: LengthMesg.swimStrokeFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "swim_stroke", accumulated: false)
		mesg.fields[LengthMesg.avgSwimmingCadenceFieldNum] = Field(name: "AvgSwimmingCadence", num: LengthMesg.avgSwimmingCadenceFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "strokes/min", accumulated: false)
		mesg.fields[LengthMesg.eventGroupFieldNum] = Field(name: "EventGroup", num: LengthMesg.eventGroupFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[LengthMesg.totalCaloriesFieldNum] = Field(name: "TotalCalories", num: LengthMesg.totalCaloriesFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "kcal", accumulated: false)
		mesg.fields[LengthMesg.lengthTypeFieldNum] = Field(name: "LengthType", num: LengthMesg.lengthTypeFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[LengthMesg.playerScoreFieldNum] = Field(name: "PlayerScore", num: LengthMesg.playerScoreFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[LengthMesg.opponentScoreFieldNum] = Field(name: "OpponentScore", num: LengthMesg.opponentScoreFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[LengthMesg.strokeCountFieldNum] = Field(name: "StrokeCount", num: LengthMesg.strokeCountFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "counts", accumulated: false)
		mesg.fields[LengthMesg.zoneCountFieldNum] = Field(name: "ZoneCount", num: LengthMesg.zoneCountFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "counts", accumulated: false)
		mesg.fields[LengthMesg.enhancedAvgRespirationRateFieldNum] = Field(name: "EnhancedAvgRespirationRate", num: LengthMesg.enhancedAvgRespirationRateFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "Breaths/min", accumulated: false)
		mesg.fields[LengthMesg.enhancedMaxRespirationRateFieldNum] = Field(name: "EnhancedMaxRespirationRate", num: LengthMesg.enhancedMaxRespirationRateFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "Breaths/min", accumulated: false)
		mesg.fields[LengthMesg.avgRespirationRateFieldNum] = Field(name: "AvgRespirationRate", num: LengthMesg.avgRespirationRateFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[LengthMesg.avgRespirationRateFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: enhancedAvgRespirationRateFieldNum, accumulated: false, bits: 8, scale: 1, offset: 0))
		mesg.fields[LengthMesg.maxRespirationRateFieldNum] = Field(name: "MaxRespirationRate", num: LengthMesg.maxRespirationRateFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[LengthMesg.maxRespirationRateFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: enhancedMaxRespirationRateFieldNum, accumulated: false, bits: 8, scale: 1, offset: 0))
        return mesg
    }
}