/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class DiveSummaryMesg : Mesg {
    public static let timestampFieldNum:UInt8 = 253
    public static let referenceMesgFieldNum:UInt8 = 0
    public static let referenceIndexFieldNum:UInt8 = 1
    public static let avgDepthFieldNum:UInt8 = 2
    public static let maxDepthFieldNum:UInt8 = 3
    public static let surfaceIntervalFieldNum:UInt8 = 4
    public static let startCnsFieldNum:UInt8 = 5
    public static let endCnsFieldNum:UInt8 = 6
    public static let startN2FieldNum:UInt8 = 7
    public static let endN2FieldNum:UInt8 = 8
    public static let o2ToxicityFieldNum:UInt8 = 9
    public static let diveNumberFieldNum:UInt8 = 10
    public static let bottomTimeFieldNum:UInt8 = 11
    public static let avgPressureSacFieldNum:UInt8 = 12
    public static let avgVolumeSacFieldNum:UInt8 = 13
    public static let avgRmvFieldNum:UInt8 = 14
    public static let descentTimeFieldNum:UInt8 = 15
    public static let ascentTimeFieldNum:UInt8 = 16
    public static let avgAscentRateFieldNum:UInt8 = 17
    public static let avgDescentRateFieldNum:UInt8 = 22
    public static let maxAscentRateFieldNum:UInt8 = 23
    public static let maxDescentRateFieldNum:UInt8 = 24
    public static let hangTimeFieldNum:UInt8 = 25

	public init() {
        super.init(mesg: DiveSummaryMesg.createDiveSummaryMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getTimestamp() -> DateTime? {
		guard let value = getFieldValue(fieldNum: DiveSummaryMesg.timestampFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setTimestamp(_ value: DateTime) throws {
		try setFieldValue(fieldNum: DiveSummaryMesg.timestampFieldNum, value: value.timestamp)
	}

	public func getReferenceMesg() -> MesgNum? {
		guard let value = getFieldValue(fieldNum: DiveSummaryMesg.referenceMesgFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return MesgNum(rawValue: value) ?? .invalid
	}

	public func setReferenceMesg(_ value: MesgNum) throws {
		try setFieldValue(fieldNum: DiveSummaryMesg.referenceMesgFieldNum, value: value.rawValue)
	}

	public func getReferenceIndex() -> MessageIndex? {
		guard let value = getFieldValue(fieldNum: DiveSummaryMesg.referenceIndexFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setReferenceIndex(_ value: MessageIndex) throws {
		try setFieldValue(fieldNum: DiveSummaryMesg.referenceIndexFieldNum, value: value)
	}

	public func getAvgDepth() -> Float64? {
		guard let value = getFieldValue(fieldNum: DiveSummaryMesg.avgDepthFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgDepth(_ value: Float64) throws {
		try setFieldValue(fieldNum: DiveSummaryMesg.avgDepthFieldNum, value: value)
	}

	public func getMaxDepth() -> Float64? {
		guard let value = getFieldValue(fieldNum: DiveSummaryMesg.maxDepthFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setMaxDepth(_ value: Float64) throws {
		try setFieldValue(fieldNum: DiveSummaryMesg.maxDepthFieldNum, value: value)
	}

	public func getSurfaceInterval() -> UInt32? {
		guard let value = getFieldValue(fieldNum: DiveSummaryMesg.surfaceIntervalFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setSurfaceInterval(_ value: UInt32) throws {
		try setFieldValue(fieldNum: DiveSummaryMesg.surfaceIntervalFieldNum, value: value)
	}

	public func getStartCns() -> UInt8? {
		guard let value = getFieldValue(fieldNum: DiveSummaryMesg.startCnsFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setStartCns(_ value: UInt8) throws {
		try setFieldValue(fieldNum: DiveSummaryMesg.startCnsFieldNum, value: value)
	}

	public func getEndCns() -> UInt8? {
		guard let value = getFieldValue(fieldNum: DiveSummaryMesg.endCnsFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setEndCns(_ value: UInt8) throws {
		try setFieldValue(fieldNum: DiveSummaryMesg.endCnsFieldNum, value: value)
	}

	public func getStartN2() -> UInt16? {
		guard let value = getFieldValue(fieldNum: DiveSummaryMesg.startN2FieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setStartN2(_ value: UInt16) throws {
		try setFieldValue(fieldNum: DiveSummaryMesg.startN2FieldNum, value: value)
	}

	public func getEndN2() -> UInt16? {
		guard let value = getFieldValue(fieldNum: DiveSummaryMesg.endN2FieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setEndN2(_ value: UInt16) throws {
		try setFieldValue(fieldNum: DiveSummaryMesg.endN2FieldNum, value: value)
	}

	public func getO2Toxicity() -> UInt16? {
		guard let value = getFieldValue(fieldNum: DiveSummaryMesg.o2ToxicityFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setO2Toxicity(_ value: UInt16) throws {
		try setFieldValue(fieldNum: DiveSummaryMesg.o2ToxicityFieldNum, value: value)
	}

	public func getDiveNumber() -> UInt32? {
		guard let value = getFieldValue(fieldNum: DiveSummaryMesg.diveNumberFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setDiveNumber(_ value: UInt32) throws {
		try setFieldValue(fieldNum: DiveSummaryMesg.diveNumberFieldNum, value: value)
	}

	public func getBottomTime() -> Float64? {
		guard let value = getFieldValue(fieldNum: DiveSummaryMesg.bottomTimeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setBottomTime(_ value: Float64) throws {
		try setFieldValue(fieldNum: DiveSummaryMesg.bottomTimeFieldNum, value: value)
	}

	public func getAvgPressureSac() -> Float64? {
		guard let value = getFieldValue(fieldNum: DiveSummaryMesg.avgPressureSacFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgPressureSac(_ value: Float64) throws {
		try setFieldValue(fieldNum: DiveSummaryMesg.avgPressureSacFieldNum, value: value)
	}

	public func getAvgVolumeSac() -> Float64? {
		guard let value = getFieldValue(fieldNum: DiveSummaryMesg.avgVolumeSacFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgVolumeSac(_ value: Float64) throws {
		try setFieldValue(fieldNum: DiveSummaryMesg.avgVolumeSacFieldNum, value: value)
	}

	public func getAvgRmv() -> Float64? {
		guard let value = getFieldValue(fieldNum: DiveSummaryMesg.avgRmvFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgRmv(_ value: Float64) throws {
		try setFieldValue(fieldNum: DiveSummaryMesg.avgRmvFieldNum, value: value)
	}

	public func getDescentTime() -> Float64? {
		guard let value = getFieldValue(fieldNum: DiveSummaryMesg.descentTimeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setDescentTime(_ value: Float64) throws {
		try setFieldValue(fieldNum: DiveSummaryMesg.descentTimeFieldNum, value: value)
	}

	public func getAscentTime() -> Float64? {
		guard let value = getFieldValue(fieldNum: DiveSummaryMesg.ascentTimeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAscentTime(_ value: Float64) throws {
		try setFieldValue(fieldNum: DiveSummaryMesg.ascentTimeFieldNum, value: value)
	}

	public func getAvgAscentRate() -> Float64? {
		guard let value = getFieldValue(fieldNum: DiveSummaryMesg.avgAscentRateFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgAscentRate(_ value: Float64) throws {
		try setFieldValue(fieldNum: DiveSummaryMesg.avgAscentRateFieldNum, value: value)
	}

	public func getAvgDescentRate() -> Float64? {
		guard let value = getFieldValue(fieldNum: DiveSummaryMesg.avgDescentRateFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgDescentRate(_ value: Float64) throws {
		try setFieldValue(fieldNum: DiveSummaryMesg.avgDescentRateFieldNum, value: value)
	}

	public func getMaxAscentRate() -> Float64? {
		guard let value = getFieldValue(fieldNum: DiveSummaryMesg.maxAscentRateFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setMaxAscentRate(_ value: Float64) throws {
		try setFieldValue(fieldNum: DiveSummaryMesg.maxAscentRateFieldNum, value: value)
	}

	public func getMaxDescentRate() -> Float64? {
		guard let value = getFieldValue(fieldNum: DiveSummaryMesg.maxDescentRateFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setMaxDescentRate(_ value: Float64) throws {
		try setFieldValue(fieldNum: DiveSummaryMesg.maxDescentRateFieldNum, value: value)
	}

	public func getHangTime() -> Float64? {
		guard let value = getFieldValue(fieldNum: DiveSummaryMesg.hangTimeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setHangTime(_ value: Float64) throws {
		try setFieldValue(fieldNum: DiveSummaryMesg.hangTimeFieldNum, value: value)
	}

	public class func createDiveSummaryMesg() -> DiveSummaryMesg {
        let mesg = DiveSummaryMesg(name: "DiveSummary", num: Profile.MesgNum.diveSummary)
		
		mesg.fields[DiveSummaryMesg.timestampFieldNum] = Field(name: "Timestamp", num: DiveSummaryMesg.timestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
		mesg.fields[DiveSummaryMesg.referenceMesgFieldNum] = Field(name: "ReferenceMesg", num: DiveSummaryMesg.referenceMesgFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DiveSummaryMesg.referenceIndexFieldNum] = Field(name: "ReferenceIndex", num: DiveSummaryMesg.referenceIndexFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DiveSummaryMesg.avgDepthFieldNum] = Field(name: "AvgDepth", num: DiveSummaryMesg.avgDepthFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "m", accumulated: false)
		mesg.fields[DiveSummaryMesg.maxDepthFieldNum] = Field(name: "MaxDepth", num: DiveSummaryMesg.maxDepthFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "m", accumulated: false)
		mesg.fields[DiveSummaryMesg.surfaceIntervalFieldNum] = Field(name: "SurfaceInterval", num: DiveSummaryMesg.surfaceIntervalFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
		mesg.fields[DiveSummaryMesg.startCnsFieldNum] = Field(name: "StartCns", num: DiveSummaryMesg.startCnsFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "percent", accumulated: false)
		mesg.fields[DiveSummaryMesg.endCnsFieldNum] = Field(name: "EndCns", num: DiveSummaryMesg.endCnsFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "percent", accumulated: false)
		mesg.fields[DiveSummaryMesg.startN2FieldNum] = Field(name: "StartN2", num: DiveSummaryMesg.startN2FieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "percent", accumulated: false)
		mesg.fields[DiveSummaryMesg.endN2FieldNum] = Field(name: "EndN2", num: DiveSummaryMesg.endN2FieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "percent", accumulated: false)
		mesg.fields[DiveSummaryMesg.o2ToxicityFieldNum] = Field(name: "O2Toxicity", num: DiveSummaryMesg.o2ToxicityFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "OTUs", accumulated: false)
		mesg.fields[DiveSummaryMesg.diveNumberFieldNum] = Field(name: "DiveNumber", num: DiveSummaryMesg.diveNumberFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DiveSummaryMesg.bottomTimeFieldNum] = Field(name: "BottomTime", num: DiveSummaryMesg.bottomTimeFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "s", accumulated: false)
		mesg.fields[DiveSummaryMesg.avgPressureSacFieldNum] = Field(name: "AvgPressureSac", num: DiveSummaryMesg.avgPressureSacFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "bar/min", accumulated: false)
		mesg.fields[DiveSummaryMesg.avgVolumeSacFieldNum] = Field(name: "AvgVolumeSac", num: DiveSummaryMesg.avgVolumeSacFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "L/min", accumulated: false)
		mesg.fields[DiveSummaryMesg.avgRmvFieldNum] = Field(name: "AvgRmv", num: DiveSummaryMesg.avgRmvFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "L/min", accumulated: false)
		mesg.fields[DiveSummaryMesg.descentTimeFieldNum] = Field(name: "DescentTime", num: DiveSummaryMesg.descentTimeFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "s", accumulated: false)
		mesg.fields[DiveSummaryMesg.ascentTimeFieldNum] = Field(name: "AscentTime", num: DiveSummaryMesg.ascentTimeFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "s", accumulated: false)
		mesg.fields[DiveSummaryMesg.avgAscentRateFieldNum] = Field(name: "AvgAscentRate", num: DiveSummaryMesg.avgAscentRateFieldNum, type: BaseType.SINT32.rawValue, scale: 1000, offset: 0, units: "m/s", accumulated: false)
		mesg.fields[DiveSummaryMesg.avgDescentRateFieldNum] = Field(name: "AvgDescentRate", num: DiveSummaryMesg.avgDescentRateFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "m/s", accumulated: false)
		mesg.fields[DiveSummaryMesg.maxAscentRateFieldNum] = Field(name: "MaxAscentRate", num: DiveSummaryMesg.maxAscentRateFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "m/s", accumulated: false)
		mesg.fields[DiveSummaryMesg.maxDescentRateFieldNum] = Field(name: "MaxDescentRate", num: DiveSummaryMesg.maxDescentRateFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "m/s", accumulated: false)
		mesg.fields[DiveSummaryMesg.hangTimeFieldNum] = Field(name: "HangTime", num: DiveSummaryMesg.hangTimeFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "s", accumulated: false)
        return mesg
    }
}