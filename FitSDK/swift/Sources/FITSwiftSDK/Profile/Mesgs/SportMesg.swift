/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class SportMesg : Mesg {
    public static let sportFieldNum:UInt8 = 0
    public static let subSportFieldNum:UInt8 = 1
    public static let nameFieldNum:UInt8 = 3

	public init() {
        super.init(mesg: SportMesg.createSportMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getSport() -> Sport? {
		guard let value = getFieldValue(fieldNum: SportMesg.sportFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return Sport(rawValue: value) ?? .invalid
	}

	public func setSport(_ value: Sport) throws {
		try setFieldValue(fieldNum: SportMesg.sportFieldNum, value: value.rawValue)
	}

	public func getSubSport() -> SubSport? {
		guard let value = getFieldValue(fieldNum: SportMesg.subSportFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return SubSport(rawValue: value) ?? .invalid
	}

	public func setSubSport(_ value: SubSport) throws {
		try setFieldValue(fieldNum: SportMesg.subSportFieldNum, value: value.rawValue)
	}

	public func getName() -> String? {
		guard let value = getFieldValue(fieldNum: SportMesg.nameFieldNum, index:0) as? String else {
            return nil
        }
		return value
	}

	public func setName(_ value: String) throws {
		try setFieldValue(fieldNum: SportMesg.nameFieldNum, value: value)
	}

	public class func createSportMesg() -> SportMesg {
        let mesg = SportMesg(name: "Sport", num: Profile.MesgNum.sport)
		
		mesg.fields[SportMesg.sportFieldNum] = Field(name: "Sport", num: SportMesg.sportFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SportMesg.subSportFieldNum] = Field(name: "SubSport", num: SportMesg.subSportFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SportMesg.nameFieldNum] = Field(name: "Name", num: SportMesg.nameFieldNum, type: BaseType.STRING.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
        return mesg
    }
}