/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class SkinTempOvernightMesg : Mesg {
    public static let timestampFieldNum:UInt8 = 253
    public static let localTimestampFieldNum:UInt8 = 0
    public static let averageDeviationFieldNum:UInt8 = 1
    public static let average7DayDeviationFieldNum:UInt8 = 2
    public static let nightlyValueFieldNum:UInt8 = 4

	public init() {
        super.init(mesg: SkinTempOvernightMesg.createSkinTempOvernightMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getTimestamp() -> DateTime? {
		guard let value = getFieldValue(fieldNum: SkinTempOvernightMesg.timestampFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setTimestamp(_ value: DateTime) throws {
		try setFieldValue(fieldNum: SkinTempOvernightMesg.timestampFieldNum, value: value.timestamp)
	}

	public func getLocalTimestamp() -> LocalDateTime? {
		guard let value = getFieldValue(fieldNum: SkinTempOvernightMesg.localTimestampFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setLocalTimestamp(_ value: LocalDateTime) throws {
		try setFieldValue(fieldNum: SkinTempOvernightMesg.localTimestampFieldNum, value: value)
	}

	public func getAverageDeviation() -> Float32? {
		guard let value = getFieldValue(fieldNum: SkinTempOvernightMesg.averageDeviationFieldNum, index:0) as? Float32 else {
            return nil
        }
		return value
	}

	public func setAverageDeviation(_ value: Float32) throws {
		try setFieldValue(fieldNum: SkinTempOvernightMesg.averageDeviationFieldNum, value: value)
	}

	public func getAverage7DayDeviation() -> Float32? {
		guard let value = getFieldValue(fieldNum: SkinTempOvernightMesg.average7DayDeviationFieldNum, index:0) as? Float32 else {
            return nil
        }
		return value
	}

	public func setAverage7DayDeviation(_ value: Float32) throws {
		try setFieldValue(fieldNum: SkinTempOvernightMesg.average7DayDeviationFieldNum, value: value)
	}

	public func getNightlyValue() -> Float32? {
		guard let value = getFieldValue(fieldNum: SkinTempOvernightMesg.nightlyValueFieldNum, index:0) as? Float32 else {
            return nil
        }
		return value
	}

	public func setNightlyValue(_ value: Float32) throws {
		try setFieldValue(fieldNum: SkinTempOvernightMesg.nightlyValueFieldNum, value: value)
	}

	public class func createSkinTempOvernightMesg() -> SkinTempOvernightMesg {
        let mesg = SkinTempOvernightMesg(name: "SkinTempOvernight", num: Profile.MesgNum.skinTempOvernight)
		
		mesg.fields[SkinTempOvernightMesg.timestampFieldNum] = Field(name: "Timestamp", num: SkinTempOvernightMesg.timestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SkinTempOvernightMesg.localTimestampFieldNum] = Field(name: "LocalTimestamp", num: SkinTempOvernightMesg.localTimestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SkinTempOvernightMesg.averageDeviationFieldNum] = Field(name: "AverageDeviation", num: SkinTempOvernightMesg.averageDeviationFieldNum, type: BaseType.FLOAT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SkinTempOvernightMesg.average7DayDeviationFieldNum] = Field(name: "Average7DayDeviation", num: SkinTempOvernightMesg.average7DayDeviationFieldNum, type: BaseType.FLOAT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SkinTempOvernightMesg.nightlyValueFieldNum] = Field(name: "NightlyValue", num: SkinTempOvernightMesg.nightlyValueFieldNum, type: BaseType.FLOAT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
        return mesg
    }
}