/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class SplitMesg : Mesg {
    public static let messageIndexFieldNum:UInt8 = 254
    public static let splitTypeFieldNum:UInt8 = 0
    public static let totalElapsedTimeFieldNum:UInt8 = 1
    public static let totalTimerTimeFieldNum:UInt8 = 2
    public static let totalDistanceFieldNum:UInt8 = 3
    public static let avgSpeedFieldNum:UInt8 = 4
    public static let startTimeFieldNum:UInt8 = 9
    public static let totalAscentFieldNum:UInt8 = 13
    public static let totalDescentFieldNum:UInt8 = 14
    public static let startPositionLatFieldNum:UInt8 = 21
    public static let startPositionLongFieldNum:UInt8 = 22
    public static let endPositionLatFieldNum:UInt8 = 23
    public static let endPositionLongFieldNum:UInt8 = 24
    public static let maxSpeedFieldNum:UInt8 = 25
    public static let avgVertSpeedFieldNum:UInt8 = 26
    public static let endTimeFieldNum:UInt8 = 27
    public static let totalCaloriesFieldNum:UInt8 = 28
    public static let startElevationFieldNum:UInt8 = 74
    public static let totalMovingTimeFieldNum:UInt8 = 110

	public init() {
        super.init(mesg: SplitMesg.createSplitMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getMessageIndex() -> MessageIndex? {
		guard let value = getFieldValue(fieldNum: SplitMesg.messageIndexFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setMessageIndex(_ value: MessageIndex) throws {
		try setFieldValue(fieldNum: SplitMesg.messageIndexFieldNum, value: value)
	}

	public func getSplitType() -> SplitType? {
		guard let value = getFieldValue(fieldNum: SplitMesg.splitTypeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return SplitType(rawValue: value) ?? .invalid
	}

	public func setSplitType(_ value: SplitType) throws {
		try setFieldValue(fieldNum: SplitMesg.splitTypeFieldNum, value: value.rawValue)
	}

	public func getTotalElapsedTime() -> Float64? {
		guard let value = getFieldValue(fieldNum: SplitMesg.totalElapsedTimeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTotalElapsedTime(_ value: Float64) throws {
		try setFieldValue(fieldNum: SplitMesg.totalElapsedTimeFieldNum, value: value)
	}

	public func getTotalTimerTime() -> Float64? {
		guard let value = getFieldValue(fieldNum: SplitMesg.totalTimerTimeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTotalTimerTime(_ value: Float64) throws {
		try setFieldValue(fieldNum: SplitMesg.totalTimerTimeFieldNum, value: value)
	}

	public func getTotalDistance() -> Float64? {
		guard let value = getFieldValue(fieldNum: SplitMesg.totalDistanceFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTotalDistance(_ value: Float64) throws {
		try setFieldValue(fieldNum: SplitMesg.totalDistanceFieldNum, value: value)
	}

	public func getAvgSpeed() -> Float64? {
		guard let value = getFieldValue(fieldNum: SplitMesg.avgSpeedFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgSpeed(_ value: Float64) throws {
		try setFieldValue(fieldNum: SplitMesg.avgSpeedFieldNum, value: value)
	}

	public func getStartTime() -> DateTime? {
		guard let value = getFieldValue(fieldNum: SplitMesg.startTimeFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setStartTime(_ value: DateTime) throws {
		try setFieldValue(fieldNum: SplitMesg.startTimeFieldNum, value: value.timestamp)
	}

	public func getTotalAscent() -> UInt16? {
		guard let value = getFieldValue(fieldNum: SplitMesg.totalAscentFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setTotalAscent(_ value: UInt16) throws {
		try setFieldValue(fieldNum: SplitMesg.totalAscentFieldNum, value: value)
	}

	public func getTotalDescent() -> UInt16? {
		guard let value = getFieldValue(fieldNum: SplitMesg.totalDescentFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setTotalDescent(_ value: UInt16) throws {
		try setFieldValue(fieldNum: SplitMesg.totalDescentFieldNum, value: value)
	}

	public func getStartPositionLat() -> Int32? {
		guard let value = getFieldValue(fieldNum: SplitMesg.startPositionLatFieldNum, index:0) as? Int32 else {
            return nil
        }
		return value
	}

	public func setStartPositionLat(_ value: Int32) throws {
		try setFieldValue(fieldNum: SplitMesg.startPositionLatFieldNum, value: value)
	}

	public func getStartPositionLong() -> Int32? {
		guard let value = getFieldValue(fieldNum: SplitMesg.startPositionLongFieldNum, index:0) as? Int32 else {
            return nil
        }
		return value
	}

	public func setStartPositionLong(_ value: Int32) throws {
		try setFieldValue(fieldNum: SplitMesg.startPositionLongFieldNum, value: value)
	}

	public func getEndPositionLat() -> Int32? {
		guard let value = getFieldValue(fieldNum: SplitMesg.endPositionLatFieldNum, index:0) as? Int32 else {
            return nil
        }
		return value
	}

	public func setEndPositionLat(_ value: Int32) throws {
		try setFieldValue(fieldNum: SplitMesg.endPositionLatFieldNum, value: value)
	}

	public func getEndPositionLong() -> Int32? {
		guard let value = getFieldValue(fieldNum: SplitMesg.endPositionLongFieldNum, index:0) as? Int32 else {
            return nil
        }
		return value
	}

	public func setEndPositionLong(_ value: Int32) throws {
		try setFieldValue(fieldNum: SplitMesg.endPositionLongFieldNum, value: value)
	}

	public func getMaxSpeed() -> Float64? {
		guard let value = getFieldValue(fieldNum: SplitMesg.maxSpeedFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setMaxSpeed(_ value: Float64) throws {
		try setFieldValue(fieldNum: SplitMesg.maxSpeedFieldNum, value: value)
	}

	public func getAvgVertSpeed() -> Float64? {
		guard let value = getFieldValue(fieldNum: SplitMesg.avgVertSpeedFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgVertSpeed(_ value: Float64) throws {
		try setFieldValue(fieldNum: SplitMesg.avgVertSpeedFieldNum, value: value)
	}

	public func getEndTime() -> DateTime? {
		guard let value = getFieldValue(fieldNum: SplitMesg.endTimeFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setEndTime(_ value: DateTime) throws {
		try setFieldValue(fieldNum: SplitMesg.endTimeFieldNum, value: value.timestamp)
	}

	public func getTotalCalories() -> UInt32? {
		guard let value = getFieldValue(fieldNum: SplitMesg.totalCaloriesFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setTotalCalories(_ value: UInt32) throws {
		try setFieldValue(fieldNum: SplitMesg.totalCaloriesFieldNum, value: value)
	}

	public func getStartElevation() -> Float64? {
		guard let value = getFieldValue(fieldNum: SplitMesg.startElevationFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setStartElevation(_ value: Float64) throws {
		try setFieldValue(fieldNum: SplitMesg.startElevationFieldNum, value: value)
	}

	public func getTotalMovingTime() -> Float64? {
		guard let value = getFieldValue(fieldNum: SplitMesg.totalMovingTimeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTotalMovingTime(_ value: Float64) throws {
		try setFieldValue(fieldNum: SplitMesg.totalMovingTimeFieldNum, value: value)
	}

	public class func createSplitMesg() -> SplitMesg {
        let mesg = SplitMesg(name: "Split", num: Profile.MesgNum.split)
		
		mesg.fields[SplitMesg.messageIndexFieldNum] = Field(name: "MessageIndex", num: SplitMesg.messageIndexFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SplitMesg.splitTypeFieldNum] = Field(name: "SplitType", num: SplitMesg.splitTypeFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SplitMesg.totalElapsedTimeFieldNum] = Field(name: "TotalElapsedTime", num: SplitMesg.totalElapsedTimeFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "s", accumulated: false)
		mesg.fields[SplitMesg.totalTimerTimeFieldNum] = Field(name: "TotalTimerTime", num: SplitMesg.totalTimerTimeFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "s", accumulated: false)
		mesg.fields[SplitMesg.totalDistanceFieldNum] = Field(name: "TotalDistance", num: SplitMesg.totalDistanceFieldNum, type: BaseType.UINT32.rawValue, scale: 100, offset: 0, units: "m", accumulated: false)
		mesg.fields[SplitMesg.avgSpeedFieldNum] = Field(name: "AvgSpeed", num: SplitMesg.avgSpeedFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "m/s", accumulated: false)
		mesg.fields[SplitMesg.startTimeFieldNum] = Field(name: "StartTime", num: SplitMesg.startTimeFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SplitMesg.totalAscentFieldNum] = Field(name: "TotalAscent", num: SplitMesg.totalAscentFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "m", accumulated: false)
		mesg.fields[SplitMesg.totalDescentFieldNum] = Field(name: "TotalDescent", num: SplitMesg.totalDescentFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "m", accumulated: false)
		mesg.fields[SplitMesg.startPositionLatFieldNum] = Field(name: "StartPositionLat", num: SplitMesg.startPositionLatFieldNum, type: BaseType.SINT32.rawValue, scale: 1, offset: 0, units: "semicircles", accumulated: false)
		mesg.fields[SplitMesg.startPositionLongFieldNum] = Field(name: "StartPositionLong", num: SplitMesg.startPositionLongFieldNum, type: BaseType.SINT32.rawValue, scale: 1, offset: 0, units: "semicircles", accumulated: false)
		mesg.fields[SplitMesg.endPositionLatFieldNum] = Field(name: "EndPositionLat", num: SplitMesg.endPositionLatFieldNum, type: BaseType.SINT32.rawValue, scale: 1, offset: 0, units: "semicircles", accumulated: false)
		mesg.fields[SplitMesg.endPositionLongFieldNum] = Field(name: "EndPositionLong", num: SplitMesg.endPositionLongFieldNum, type: BaseType.SINT32.rawValue, scale: 1, offset: 0, units: "semicircles", accumulated: false)
		mesg.fields[SplitMesg.maxSpeedFieldNum] = Field(name: "MaxSpeed", num: SplitMesg.maxSpeedFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "m/s", accumulated: false)
		mesg.fields[SplitMesg.avgVertSpeedFieldNum] = Field(name: "AvgVertSpeed", num: SplitMesg.avgVertSpeedFieldNum, type: BaseType.SINT32.rawValue, scale: 1000, offset: 0, units: "m/s", accumulated: false)
		mesg.fields[SplitMesg.endTimeFieldNum] = Field(name: "EndTime", num: SplitMesg.endTimeFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SplitMesg.totalCaloriesFieldNum] = Field(name: "TotalCalories", num: SplitMesg.totalCaloriesFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "kcal", accumulated: false)
		mesg.fields[SplitMesg.startElevationFieldNum] = Field(name: "StartElevation", num: SplitMesg.startElevationFieldNum, type: BaseType.UINT32.rawValue, scale: 5, offset: 500, units: "m", accumulated: false)
		mesg.fields[SplitMesg.totalMovingTimeFieldNum] = Field(name: "TotalMovingTime", num: SplitMesg.totalMovingTimeFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "s", accumulated: false)
        return mesg
    }
}