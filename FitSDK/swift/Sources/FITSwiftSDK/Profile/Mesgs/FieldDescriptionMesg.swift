/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class FieldDescriptionMesg : Mesg {
    public static let developerDataIndexFieldNum:UInt8 = 0
    public static let fieldDefinitionNumberFieldNum:UInt8 = 1
    public static let fitBaseTypeIdFieldNum:UInt8 = 2
    public static let fieldNameFieldNum:UInt8 = 3
    public static let arrayFieldNum:UInt8 = 4
    public static let componentsFieldNum:UInt8 = 5
    public static let scaleFieldNum:UInt8 = 6
    public static let offsetFieldNum:UInt8 = 7
    public static let unitsFieldNum:UInt8 = 8
    public static let bitsFieldNum:UInt8 = 9
    public static let accumulateFieldNum:UInt8 = 10
    public static let fitBaseUnitIdFieldNum:UInt8 = 13
    public static let nativeMesgNumFieldNum:UInt8 = 14
    public static let nativeFieldNumFieldNum:UInt8 = 15

	public init() {
        super.init(mesg: FieldDescriptionMesg.createFieldDescriptionMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getDeveloperDataIndex() -> UInt8? {
		guard let value = getFieldValue(fieldNum: FieldDescriptionMesg.developerDataIndexFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setDeveloperDataIndex(_ value: UInt8) throws {
		try setFieldValue(fieldNum: FieldDescriptionMesg.developerDataIndexFieldNum, value: value)
	}

	public func getFieldDefinitionNumber() -> UInt8? {
		guard let value = getFieldValue(fieldNum: FieldDescriptionMesg.fieldDefinitionNumberFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setFieldDefinitionNumber(_ value: UInt8) throws {
		try setFieldValue(fieldNum: FieldDescriptionMesg.fieldDefinitionNumberFieldNum, value: value)
	}

	public func getFitBaseTypeId() -> FitBaseType? {
		guard let value = getFieldValue(fieldNum: FieldDescriptionMesg.fitBaseTypeIdFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return FitBaseType(rawValue: value) ?? .invalid
	}

	public func setFitBaseTypeId(_ value: FitBaseType) throws {
		try setFieldValue(fieldNum: FieldDescriptionMesg.fitBaseTypeIdFieldNum, value: value.rawValue)
	}

	public func getNumFieldName() -> UInt8 {
		guard let field = getField(fieldNum: FieldDescriptionMesg.fieldNameFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getFieldName() -> [String?]? {
		guard let field = getField(fieldNum: FieldDescriptionMesg.fieldNameFieldNum) else {
			return nil
		}
		return field.toArray() as [String?]
	}

	public func getFieldName(index: Int) -> String? {
		guard let value = getFieldValue(fieldNum: FieldDescriptionMesg.fieldNameFieldNum, index: index) as? String else {
            return nil
        }
		return value
	}

	public func setFieldName(index: Int, value: String) throws {
		try setFieldValue(fieldNum: FieldDescriptionMesg.fieldNameFieldNum, value: value, index: index)
	}

	public func getArray() -> UInt8? {
		guard let value = getFieldValue(fieldNum: FieldDescriptionMesg.arrayFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setArray(_ value: UInt8) throws {
		try setFieldValue(fieldNum: FieldDescriptionMesg.arrayFieldNum, value: value)
	}

	public func getComponents() -> String? {
		guard let value = getFieldValue(fieldNum: FieldDescriptionMesg.componentsFieldNum, index:0) as? String else {
            return nil
        }
		return value
	}

	public func setComponents(_ value: String) throws {
		try setFieldValue(fieldNum: FieldDescriptionMesg.componentsFieldNum, value: value)
	}

	public func getScale() -> UInt8? {
		guard let value = getFieldValue(fieldNum: FieldDescriptionMesg.scaleFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setScale(_ value: UInt8) throws {
		try setFieldValue(fieldNum: FieldDescriptionMesg.scaleFieldNum, value: value)
	}

	public func getOffset() -> Int8? {
		guard let value = getFieldValue(fieldNum: FieldDescriptionMesg.offsetFieldNum, index:0) as? Int8 else {
            return nil
        }
		return value
	}

	public func setOffset(_ value: Int8) throws {
		try setFieldValue(fieldNum: FieldDescriptionMesg.offsetFieldNum, value: value)
	}

	public func getNumUnits() -> UInt8 {
		guard let field = getField(fieldNum: FieldDescriptionMesg.unitsFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getUnits() -> [String?]? {
		guard let field = getField(fieldNum: FieldDescriptionMesg.unitsFieldNum) else {
			return nil
		}
		return field.toArray() as [String?]
	}

	public func getUnits(index: Int) -> String? {
		guard let value = getFieldValue(fieldNum: FieldDescriptionMesg.unitsFieldNum, index: index) as? String else {
            return nil
        }
		return value
	}

	public func setUnits(index: Int, value: String) throws {
		try setFieldValue(fieldNum: FieldDescriptionMesg.unitsFieldNum, value: value, index: index)
	}

	public func getBits() -> String? {
		guard let value = getFieldValue(fieldNum: FieldDescriptionMesg.bitsFieldNum, index:0) as? String else {
            return nil
        }
		return value
	}

	public func setBits(_ value: String) throws {
		try setFieldValue(fieldNum: FieldDescriptionMesg.bitsFieldNum, value: value)
	}

	public func getAccumulate() -> String? {
		guard let value = getFieldValue(fieldNum: FieldDescriptionMesg.accumulateFieldNum, index:0) as? String else {
            return nil
        }
		return value
	}

	public func setAccumulate(_ value: String) throws {
		try setFieldValue(fieldNum: FieldDescriptionMesg.accumulateFieldNum, value: value)
	}

	public func getFitBaseUnitId() -> FitBaseUnit? {
		guard let value = getFieldValue(fieldNum: FieldDescriptionMesg.fitBaseUnitIdFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return FitBaseUnit(rawValue: value) ?? .invalid
	}

	public func setFitBaseUnitId(_ value: FitBaseUnit) throws {
		try setFieldValue(fieldNum: FieldDescriptionMesg.fitBaseUnitIdFieldNum, value: value.rawValue)
	}

	public func getNativeMesgNum() -> MesgNum? {
		guard let value = getFieldValue(fieldNum: FieldDescriptionMesg.nativeMesgNumFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return MesgNum(rawValue: value) ?? .invalid
	}

	public func setNativeMesgNum(_ value: MesgNum) throws {
		try setFieldValue(fieldNum: FieldDescriptionMesg.nativeMesgNumFieldNum, value: value.rawValue)
	}

	public func getNativeFieldNum() -> UInt8? {
		guard let value = getFieldValue(fieldNum: FieldDescriptionMesg.nativeFieldNumFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setNativeFieldNum(_ value: UInt8) throws {
		try setFieldValue(fieldNum: FieldDescriptionMesg.nativeFieldNumFieldNum, value: value)
	}

	public class func createFieldDescriptionMesg() -> FieldDescriptionMesg {
        let mesg = FieldDescriptionMesg(name: "FieldDescription", num: Profile.MesgNum.fieldDescription)
		
		mesg.fields[FieldDescriptionMesg.developerDataIndexFieldNum] = Field(name: "DeveloperDataIndex", num: FieldDescriptionMesg.developerDataIndexFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[FieldDescriptionMesg.fieldDefinitionNumberFieldNum] = Field(name: "FieldDefinitionNumber", num: FieldDescriptionMesg.fieldDefinitionNumberFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[FieldDescriptionMesg.fitBaseTypeIdFieldNum] = Field(name: "FitBaseTypeId", num: FieldDescriptionMesg.fitBaseTypeIdFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[FieldDescriptionMesg.fieldNameFieldNum] = Field(name: "FieldName", num: FieldDescriptionMesg.fieldNameFieldNum, type: BaseType.STRING.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[FieldDescriptionMesg.arrayFieldNum] = Field(name: "Array", num: FieldDescriptionMesg.arrayFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[FieldDescriptionMesg.componentsFieldNum] = Field(name: "Components", num: FieldDescriptionMesg.componentsFieldNum, type: BaseType.STRING.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[FieldDescriptionMesg.scaleFieldNum] = Field(name: "Scale", num: FieldDescriptionMesg.scaleFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[FieldDescriptionMesg.offsetFieldNum] = Field(name: "Offset", num: FieldDescriptionMesg.offsetFieldNum, type: BaseType.SINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[FieldDescriptionMesg.unitsFieldNum] = Field(name: "Units", num: FieldDescriptionMesg.unitsFieldNum, type: BaseType.STRING.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[FieldDescriptionMesg.bitsFieldNum] = Field(name: "Bits", num: FieldDescriptionMesg.bitsFieldNum, type: BaseType.STRING.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[FieldDescriptionMesg.accumulateFieldNum] = Field(name: "Accumulate", num: FieldDescriptionMesg.accumulateFieldNum, type: BaseType.STRING.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[FieldDescriptionMesg.fitBaseUnitIdFieldNum] = Field(name: "FitBaseUnitId", num: FieldDescriptionMesg.fitBaseUnitIdFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[FieldDescriptionMesg.nativeMesgNumFieldNum] = Field(name: "NativeMesgNum", num: FieldDescriptionMesg.nativeMesgNumFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[FieldDescriptionMesg.nativeFieldNumFieldNum] = Field(name: "NativeFieldNum", num: FieldDescriptionMesg.nativeFieldNumFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
        return mesg
    }
}