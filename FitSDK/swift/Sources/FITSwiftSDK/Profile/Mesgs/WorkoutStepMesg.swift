/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class WorkoutStepMesg : Mesg {
    public static let messageIndexFieldNum:UInt8 = 254
    public static let wktStepNameFieldNum:UInt8 = 0
    public static let durationTypeFieldNum:UInt8 = 1
    public static let durationValueFieldNum:UInt8 = 2
    public static let targetTypeFieldNum:UInt8 = 3
    public static let targetValueFieldNum:UInt8 = 4
    public static let customTargetValueLowFieldNum:UInt8 = 5
    public static let customTargetValueHighFieldNum:UInt8 = 6
    public static let intensityFieldNum:UInt8 = 7
    public static let notesFieldNum:UInt8 = 8
    public static let equipmentFieldNum:UInt8 = 9
    public static let exerciseCategoryFieldNum:UInt8 = 10
    public static let exerciseNameFieldNum:UInt8 = 11
    public static let exerciseWeightFieldNum:UInt8 = 12
    public static let weightDisplayUnitFieldNum:UInt8 = 13
    public static let secondaryTargetTypeFieldNum:UInt8 = 19
    public static let secondaryTargetValueFieldNum:UInt8 = 20
    public static let secondaryCustomTargetValueLowFieldNum:UInt8 = 21
    public static let secondaryCustomTargetValueHighFieldNum:UInt8 = 22

	private struct DurationValueSubField {
        public static let durationTime:UInt16 = 0
        public static let durationDistance:UInt16 = 1
        public static let durationHr:UInt16 = 2
        public static let durationCalories:UInt16 = 3
        public static let durationStep:UInt16 = 4
        public static let durationPower:UInt16 = 5
        public static let durationReps:UInt16 = 6
        public static let subfields:UInt16 = 7
        public static let active:UInt16 = FIT.SUBFIELD_INDEX.ACTIVE_SUBFIELD
        public static let mainField:UInt16 = FIT.SUBFIELD_INDEX.MAIN_FIELD
    }

	private struct TargetValueSubField {
        public static let targetSpeedZone:UInt16 = 0
        public static let targetHrZone:UInt16 = 1
        public static let targetCadenceZone:UInt16 = 2
        public static let targetPowerZone:UInt16 = 3
        public static let repeatSteps:UInt16 = 4
        public static let repeatTime:UInt16 = 5
        public static let repeatDistance:UInt16 = 6
        public static let repeatCalories:UInt16 = 7
        public static let repeatHr:UInt16 = 8
        public static let repeatPower:UInt16 = 9
        public static let targetStrokeType:UInt16 = 10
        public static let subfields:UInt16 = 11
        public static let active:UInt16 = FIT.SUBFIELD_INDEX.ACTIVE_SUBFIELD
        public static let mainField:UInt16 = FIT.SUBFIELD_INDEX.MAIN_FIELD
    }

	private struct CustomTargetValueLowSubField {
        public static let customTargetSpeedLow:UInt16 = 0
        public static let customTargetHeartRateLow:UInt16 = 1
        public static let customTargetCadenceLow:UInt16 = 2
        public static let customTargetPowerLow:UInt16 = 3
        public static let subfields:UInt16 = 4
        public static let active:UInt16 = FIT.SUBFIELD_INDEX.ACTIVE_SUBFIELD
        public static let mainField:UInt16 = FIT.SUBFIELD_INDEX.MAIN_FIELD
    }

	private struct CustomTargetValueHighSubField {
        public static let customTargetSpeedHigh:UInt16 = 0
        public static let customTargetHeartRateHigh:UInt16 = 1
        public static let customTargetCadenceHigh:UInt16 = 2
        public static let customTargetPowerHigh:UInt16 = 3
        public static let subfields:UInt16 = 4
        public static let active:UInt16 = FIT.SUBFIELD_INDEX.ACTIVE_SUBFIELD
        public static let mainField:UInt16 = FIT.SUBFIELD_INDEX.MAIN_FIELD
    }

	private struct SecondaryTargetValueSubField {
        public static let secondaryTargetSpeedZone:UInt16 = 0
        public static let secondaryTargetHrZone:UInt16 = 1
        public static let secondaryTargetCadenceZone:UInt16 = 2
        public static let secondaryTargetPowerZone:UInt16 = 3
        public static let secondaryTargetStrokeType:UInt16 = 4
        public static let subfields:UInt16 = 5
        public static let active:UInt16 = FIT.SUBFIELD_INDEX.ACTIVE_SUBFIELD
        public static let mainField:UInt16 = FIT.SUBFIELD_INDEX.MAIN_FIELD
    }

	private struct SecondaryCustomTargetValueLowSubField {
        public static let secondaryCustomTargetSpeedLow:UInt16 = 0
        public static let secondaryCustomTargetHeartRateLow:UInt16 = 1
        public static let secondaryCustomTargetCadenceLow:UInt16 = 2
        public static let secondaryCustomTargetPowerLow:UInt16 = 3
        public static let subfields:UInt16 = 4
        public static let active:UInt16 = FIT.SUBFIELD_INDEX.ACTIVE_SUBFIELD
        public static let mainField:UInt16 = FIT.SUBFIELD_INDEX.MAIN_FIELD
    }

	private struct SecondaryCustomTargetValueHighSubField {
        public static let secondaryCustomTargetSpeedHigh:UInt16 = 0
        public static let secondaryCustomTargetHeartRateHigh:UInt16 = 1
        public static let secondaryCustomTargetCadenceHigh:UInt16 = 2
        public static let secondaryCustomTargetPowerHigh:UInt16 = 3
        public static let subfields:UInt16 = 4
        public static let active:UInt16 = FIT.SUBFIELD_INDEX.ACTIVE_SUBFIELD
        public static let mainField:UInt16 = FIT.SUBFIELD_INDEX.MAIN_FIELD
    }

	public init() {
        super.init(mesg: WorkoutStepMesg.createWorkoutStepMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getMessageIndex() -> MessageIndex? {
		guard let value = getFieldValue(fieldNum: WorkoutStepMesg.messageIndexFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setMessageIndex(_ value: MessageIndex) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.messageIndexFieldNum, value: value)
	}

	public func getWktStepName() -> String? {
		guard let value = getFieldValue(fieldNum: WorkoutStepMesg.wktStepNameFieldNum, index:0) as? String else {
            return nil
        }
		return value
	}

	public func setWktStepName(_ value: String) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.wktStepNameFieldNum, value: value)
	}

	public func getDurationType() -> WktStepDuration? {
		guard let value = getFieldValue(fieldNum: WorkoutStepMesg.durationTypeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return WktStepDuration(rawValue: value) ?? .invalid
	}

	public func setDurationType(_ value: WktStepDuration) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.durationTypeFieldNum, value: value.rawValue)
	}

	public func getDurationValue() -> UInt32? {
		guard let value = getFieldValue(fieldNum: WorkoutStepMesg.durationValueFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setDurationValue(_ value: UInt32) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.durationValueFieldNum, value: value)
	}

	public func getDurationTime() throws -> Float64? {
		guard let value = try getFieldValue(fieldNum: WorkoutStepMesg.durationValueFieldNum, index: 0, subFieldIndex: DurationValueSubField.durationTime).map({Float64(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setDurationTime(_ value: Float64) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.durationValueFieldNum, value: value, index: 0, subFieldIndex: DurationValueSubField.durationTime )
	}

	public func getDurationDistance() throws -> Float64? {
		guard let value = try getFieldValue(fieldNum: WorkoutStepMesg.durationValueFieldNum, index: 0, subFieldIndex: DurationValueSubField.durationDistance).map({Float64(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setDurationDistance(_ value: Float64) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.durationValueFieldNum, value: value, index: 0, subFieldIndex: DurationValueSubField.durationDistance )
	}

	public func getDurationHr() throws -> WorkoutHr? {
		guard let value = try getFieldValue(fieldNum: WorkoutStepMesg.durationValueFieldNum, index: 0, subFieldIndex: DurationValueSubField.durationHr).map({UInt32(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setDurationHr(_ value: WorkoutHr) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.durationValueFieldNum, value: value, index: 0, subFieldIndex: DurationValueSubField.durationHr )
	}

	public func getDurationCalories() throws -> UInt32? {
		guard let value = try getFieldValue(fieldNum: WorkoutStepMesg.durationValueFieldNum, index: 0, subFieldIndex: DurationValueSubField.durationCalories).map({UInt32(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setDurationCalories(_ value: UInt32) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.durationValueFieldNum, value: value, index: 0, subFieldIndex: DurationValueSubField.durationCalories )
	}

	public func getDurationStep() throws -> UInt32? {
		guard let value = try getFieldValue(fieldNum: WorkoutStepMesg.durationValueFieldNum, index: 0, subFieldIndex: DurationValueSubField.durationStep).map({UInt32(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setDurationStep(_ value: UInt32) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.durationValueFieldNum, value: value, index: 0, subFieldIndex: DurationValueSubField.durationStep )
	}

	public func getDurationPower() throws -> WorkoutPower? {
		guard let value = try getFieldValue(fieldNum: WorkoutStepMesg.durationValueFieldNum, index: 0, subFieldIndex: DurationValueSubField.durationPower).map({UInt32(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setDurationPower(_ value: WorkoutPower) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.durationValueFieldNum, value: value, index: 0, subFieldIndex: DurationValueSubField.durationPower )
	}

	public func getDurationReps() throws -> UInt32? {
		guard let value = try getFieldValue(fieldNum: WorkoutStepMesg.durationValueFieldNum, index: 0, subFieldIndex: DurationValueSubField.durationReps).map({UInt32(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setDurationReps(_ value: UInt32) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.durationValueFieldNum, value: value, index: 0, subFieldIndex: DurationValueSubField.durationReps )
	}

	public func getTargetType() -> WktStepTarget? {
		guard let value = getFieldValue(fieldNum: WorkoutStepMesg.targetTypeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return WktStepTarget(rawValue: value) ?? .invalid
	}

	public func setTargetType(_ value: WktStepTarget) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.targetTypeFieldNum, value: value.rawValue)
	}

	public func getTargetValue() -> UInt32? {
		guard let value = getFieldValue(fieldNum: WorkoutStepMesg.targetValueFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setTargetValue(_ value: UInt32) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.targetValueFieldNum, value: value)
	}

	public func getTargetSpeedZone() throws -> UInt32? {
		guard let value = try getFieldValue(fieldNum: WorkoutStepMesg.targetValueFieldNum, index: 0, subFieldIndex: TargetValueSubField.targetSpeedZone).map({UInt32(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setTargetSpeedZone(_ value: UInt32) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.targetValueFieldNum, value: value, index: 0, subFieldIndex: TargetValueSubField.targetSpeedZone )
	}

	public func getTargetHrZone() throws -> UInt32? {
		guard let value = try getFieldValue(fieldNum: WorkoutStepMesg.targetValueFieldNum, index: 0, subFieldIndex: TargetValueSubField.targetHrZone).map({UInt32(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setTargetHrZone(_ value: UInt32) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.targetValueFieldNum, value: value, index: 0, subFieldIndex: TargetValueSubField.targetHrZone )
	}

	public func getTargetCadenceZone() throws -> UInt32? {
		guard let value = try getFieldValue(fieldNum: WorkoutStepMesg.targetValueFieldNum, index: 0, subFieldIndex: TargetValueSubField.targetCadenceZone).map({UInt32(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setTargetCadenceZone(_ value: UInt32) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.targetValueFieldNum, value: value, index: 0, subFieldIndex: TargetValueSubField.targetCadenceZone )
	}

	public func getTargetPowerZone() throws -> UInt32? {
		guard let value = try getFieldValue(fieldNum: WorkoutStepMesg.targetValueFieldNum, index: 0, subFieldIndex: TargetValueSubField.targetPowerZone).map({UInt32(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setTargetPowerZone(_ value: UInt32) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.targetValueFieldNum, value: value, index: 0, subFieldIndex: TargetValueSubField.targetPowerZone )
	}

	public func getRepeatSteps() throws -> UInt32? {
		guard let value = try getFieldValue(fieldNum: WorkoutStepMesg.targetValueFieldNum, index: 0, subFieldIndex: TargetValueSubField.repeatSteps).map({UInt32(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setRepeatSteps(_ value: UInt32) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.targetValueFieldNum, value: value, index: 0, subFieldIndex: TargetValueSubField.repeatSteps )
	}

	public func getRepeatTime() throws -> Float64? {
		guard let value = try getFieldValue(fieldNum: WorkoutStepMesg.targetValueFieldNum, index: 0, subFieldIndex: TargetValueSubField.repeatTime).map({Float64(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setRepeatTime(_ value: Float64) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.targetValueFieldNum, value: value, index: 0, subFieldIndex: TargetValueSubField.repeatTime )
	}

	public func getRepeatDistance() throws -> Float64? {
		guard let value = try getFieldValue(fieldNum: WorkoutStepMesg.targetValueFieldNum, index: 0, subFieldIndex: TargetValueSubField.repeatDistance).map({Float64(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setRepeatDistance(_ value: Float64) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.targetValueFieldNum, value: value, index: 0, subFieldIndex: TargetValueSubField.repeatDistance )
	}

	public func getRepeatCalories() throws -> UInt32? {
		guard let value = try getFieldValue(fieldNum: WorkoutStepMesg.targetValueFieldNum, index: 0, subFieldIndex: TargetValueSubField.repeatCalories).map({UInt32(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setRepeatCalories(_ value: UInt32) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.targetValueFieldNum, value: value, index: 0, subFieldIndex: TargetValueSubField.repeatCalories )
	}

	public func getRepeatHr() throws -> WorkoutHr? {
		guard let value = try getFieldValue(fieldNum: WorkoutStepMesg.targetValueFieldNum, index: 0, subFieldIndex: TargetValueSubField.repeatHr).map({UInt32(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setRepeatHr(_ value: WorkoutHr) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.targetValueFieldNum, value: value, index: 0, subFieldIndex: TargetValueSubField.repeatHr )
	}

	public func getRepeatPower() throws -> WorkoutPower? {
		guard let value = try getFieldValue(fieldNum: WorkoutStepMesg.targetValueFieldNum, index: 0, subFieldIndex: TargetValueSubField.repeatPower).map({UInt32(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setRepeatPower(_ value: WorkoutPower) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.targetValueFieldNum, value: value, index: 0, subFieldIndex: TargetValueSubField.repeatPower )
	}

	public func getTargetStrokeType() throws -> SwimStroke? {
		guard let value = try getFieldValue(fieldNum: WorkoutStepMesg.targetValueFieldNum, index: 0, subFieldIndex: TargetValueSubField.targetStrokeType).map({UInt8(fitValue: $0)}) else {
			return nil
		}
		
		return SwimStroke(rawValue: value) ?? .invalid
	}

	public func setTargetStrokeType(_ value: SwimStroke) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.targetValueFieldNum, value: value.rawValue, index: 0, subFieldIndex: TargetValueSubField.targetStrokeType )
	}

	public func getCustomTargetValueLow() -> UInt32? {
		guard let value = getFieldValue(fieldNum: WorkoutStepMesg.customTargetValueLowFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setCustomTargetValueLow(_ value: UInt32) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.customTargetValueLowFieldNum, value: value)
	}

	public func getCustomTargetSpeedLow() throws -> Float64? {
		guard let value = try getFieldValue(fieldNum: WorkoutStepMesg.customTargetValueLowFieldNum, index: 0, subFieldIndex: CustomTargetValueLowSubField.customTargetSpeedLow).map({Float64(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setCustomTargetSpeedLow(_ value: Float64) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.customTargetValueLowFieldNum, value: value, index: 0, subFieldIndex: CustomTargetValueLowSubField.customTargetSpeedLow )
	}

	public func getCustomTargetHeartRateLow() throws -> WorkoutHr? {
		guard let value = try getFieldValue(fieldNum: WorkoutStepMesg.customTargetValueLowFieldNum, index: 0, subFieldIndex: CustomTargetValueLowSubField.customTargetHeartRateLow).map({UInt32(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setCustomTargetHeartRateLow(_ value: WorkoutHr) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.customTargetValueLowFieldNum, value: value, index: 0, subFieldIndex: CustomTargetValueLowSubField.customTargetHeartRateLow )
	}

	public func getCustomTargetCadenceLow() throws -> UInt32? {
		guard let value = try getFieldValue(fieldNum: WorkoutStepMesg.customTargetValueLowFieldNum, index: 0, subFieldIndex: CustomTargetValueLowSubField.customTargetCadenceLow).map({UInt32(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setCustomTargetCadenceLow(_ value: UInt32) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.customTargetValueLowFieldNum, value: value, index: 0, subFieldIndex: CustomTargetValueLowSubField.customTargetCadenceLow )
	}

	public func getCustomTargetPowerLow() throws -> WorkoutPower? {
		guard let value = try getFieldValue(fieldNum: WorkoutStepMesg.customTargetValueLowFieldNum, index: 0, subFieldIndex: CustomTargetValueLowSubField.customTargetPowerLow).map({UInt32(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setCustomTargetPowerLow(_ value: WorkoutPower) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.customTargetValueLowFieldNum, value: value, index: 0, subFieldIndex: CustomTargetValueLowSubField.customTargetPowerLow )
	}

	public func getCustomTargetValueHigh() -> UInt32? {
		guard let value = getFieldValue(fieldNum: WorkoutStepMesg.customTargetValueHighFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setCustomTargetValueHigh(_ value: UInt32) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.customTargetValueHighFieldNum, value: value)
	}

	public func getCustomTargetSpeedHigh() throws -> Float64? {
		guard let value = try getFieldValue(fieldNum: WorkoutStepMesg.customTargetValueHighFieldNum, index: 0, subFieldIndex: CustomTargetValueHighSubField.customTargetSpeedHigh).map({Float64(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setCustomTargetSpeedHigh(_ value: Float64) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.customTargetValueHighFieldNum, value: value, index: 0, subFieldIndex: CustomTargetValueHighSubField.customTargetSpeedHigh )
	}

	public func getCustomTargetHeartRateHigh() throws -> WorkoutHr? {
		guard let value = try getFieldValue(fieldNum: WorkoutStepMesg.customTargetValueHighFieldNum, index: 0, subFieldIndex: CustomTargetValueHighSubField.customTargetHeartRateHigh).map({UInt32(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setCustomTargetHeartRateHigh(_ value: WorkoutHr) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.customTargetValueHighFieldNum, value: value, index: 0, subFieldIndex: CustomTargetValueHighSubField.customTargetHeartRateHigh )
	}

	public func getCustomTargetCadenceHigh() throws -> UInt32? {
		guard let value = try getFieldValue(fieldNum: WorkoutStepMesg.customTargetValueHighFieldNum, index: 0, subFieldIndex: CustomTargetValueHighSubField.customTargetCadenceHigh).map({UInt32(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setCustomTargetCadenceHigh(_ value: UInt32) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.customTargetValueHighFieldNum, value: value, index: 0, subFieldIndex: CustomTargetValueHighSubField.customTargetCadenceHigh )
	}

	public func getCustomTargetPowerHigh() throws -> WorkoutPower? {
		guard let value = try getFieldValue(fieldNum: WorkoutStepMesg.customTargetValueHighFieldNum, index: 0, subFieldIndex: CustomTargetValueHighSubField.customTargetPowerHigh).map({UInt32(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setCustomTargetPowerHigh(_ value: WorkoutPower) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.customTargetValueHighFieldNum, value: value, index: 0, subFieldIndex: CustomTargetValueHighSubField.customTargetPowerHigh )
	}

	public func getIntensity() -> Intensity? {
		guard let value = getFieldValue(fieldNum: WorkoutStepMesg.intensityFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return Intensity(rawValue: value) ?? .invalid
	}

	public func setIntensity(_ value: Intensity) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.intensityFieldNum, value: value.rawValue)
	}

	public func getNotes() -> String? {
		guard let value = getFieldValue(fieldNum: WorkoutStepMesg.notesFieldNum, index:0) as? String else {
            return nil
        }
		return value
	}

	public func setNotes(_ value: String) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.notesFieldNum, value: value)
	}

	public func getEquipment() -> WorkoutEquipment? {
		guard let value = getFieldValue(fieldNum: WorkoutStepMesg.equipmentFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return WorkoutEquipment(rawValue: value) ?? .invalid
	}

	public func setEquipment(_ value: WorkoutEquipment) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.equipmentFieldNum, value: value.rawValue)
	}

	public func getExerciseCategory() -> ExerciseCategory? {
		guard let value = getFieldValue(fieldNum: WorkoutStepMesg.exerciseCategoryFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return ExerciseCategory(rawValue: value) ?? .invalid
	}

	public func setExerciseCategory(_ value: ExerciseCategory) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.exerciseCategoryFieldNum, value: value.rawValue)
	}

	public func getExerciseName() -> UInt16? {
		guard let value = getFieldValue(fieldNum: WorkoutStepMesg.exerciseNameFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setExerciseName(_ value: UInt16) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.exerciseNameFieldNum, value: value)
	}

	public func getExerciseWeight() -> Float64? {
		guard let value = getFieldValue(fieldNum: WorkoutStepMesg.exerciseWeightFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setExerciseWeight(_ value: Float64) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.exerciseWeightFieldNum, value: value)
	}

	public func getWeightDisplayUnit() -> FitBaseUnit? {
		guard let value = getFieldValue(fieldNum: WorkoutStepMesg.weightDisplayUnitFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return FitBaseUnit(rawValue: value) ?? .invalid
	}

	public func setWeightDisplayUnit(_ value: FitBaseUnit) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.weightDisplayUnitFieldNum, value: value.rawValue)
	}

	public func getSecondaryTargetType() -> WktStepTarget? {
		guard let value = getFieldValue(fieldNum: WorkoutStepMesg.secondaryTargetTypeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return WktStepTarget(rawValue: value) ?? .invalid
	}

	public func setSecondaryTargetType(_ value: WktStepTarget) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.secondaryTargetTypeFieldNum, value: value.rawValue)
	}

	public func getSecondaryTargetValue() -> UInt32? {
		guard let value = getFieldValue(fieldNum: WorkoutStepMesg.secondaryTargetValueFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setSecondaryTargetValue(_ value: UInt32) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.secondaryTargetValueFieldNum, value: value)
	}

	public func getSecondaryTargetSpeedZone() throws -> UInt32? {
		guard let value = try getFieldValue(fieldNum: WorkoutStepMesg.secondaryTargetValueFieldNum, index: 0, subFieldIndex: SecondaryTargetValueSubField.secondaryTargetSpeedZone).map({UInt32(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setSecondaryTargetSpeedZone(_ value: UInt32) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.secondaryTargetValueFieldNum, value: value, index: 0, subFieldIndex: SecondaryTargetValueSubField.secondaryTargetSpeedZone )
	}

	public func getSecondaryTargetHrZone() throws -> UInt32? {
		guard let value = try getFieldValue(fieldNum: WorkoutStepMesg.secondaryTargetValueFieldNum, index: 0, subFieldIndex: SecondaryTargetValueSubField.secondaryTargetHrZone).map({UInt32(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setSecondaryTargetHrZone(_ value: UInt32) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.secondaryTargetValueFieldNum, value: value, index: 0, subFieldIndex: SecondaryTargetValueSubField.secondaryTargetHrZone )
	}

	public func getSecondaryTargetCadenceZone() throws -> UInt32? {
		guard let value = try getFieldValue(fieldNum: WorkoutStepMesg.secondaryTargetValueFieldNum, index: 0, subFieldIndex: SecondaryTargetValueSubField.secondaryTargetCadenceZone).map({UInt32(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setSecondaryTargetCadenceZone(_ value: UInt32) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.secondaryTargetValueFieldNum, value: value, index: 0, subFieldIndex: SecondaryTargetValueSubField.secondaryTargetCadenceZone )
	}

	public func getSecondaryTargetPowerZone() throws -> UInt32? {
		guard let value = try getFieldValue(fieldNum: WorkoutStepMesg.secondaryTargetValueFieldNum, index: 0, subFieldIndex: SecondaryTargetValueSubField.secondaryTargetPowerZone).map({UInt32(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setSecondaryTargetPowerZone(_ value: UInt32) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.secondaryTargetValueFieldNum, value: value, index: 0, subFieldIndex: SecondaryTargetValueSubField.secondaryTargetPowerZone )
	}

	public func getSecondaryTargetStrokeType() throws -> SwimStroke? {
		guard let value = try getFieldValue(fieldNum: WorkoutStepMesg.secondaryTargetValueFieldNum, index: 0, subFieldIndex: SecondaryTargetValueSubField.secondaryTargetStrokeType).map({UInt8(fitValue: $0)}) else {
			return nil
		}
		
		return SwimStroke(rawValue: value) ?? .invalid
	}

	public func setSecondaryTargetStrokeType(_ value: SwimStroke) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.secondaryTargetValueFieldNum, value: value.rawValue, index: 0, subFieldIndex: SecondaryTargetValueSubField.secondaryTargetStrokeType )
	}

	public func getSecondaryCustomTargetValueLow() -> UInt32? {
		guard let value = getFieldValue(fieldNum: WorkoutStepMesg.secondaryCustomTargetValueLowFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setSecondaryCustomTargetValueLow(_ value: UInt32) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.secondaryCustomTargetValueLowFieldNum, value: value)
	}

	public func getSecondaryCustomTargetSpeedLow() throws -> Float64? {
		guard let value = try getFieldValue(fieldNum: WorkoutStepMesg.secondaryCustomTargetValueLowFieldNum, index: 0, subFieldIndex: SecondaryCustomTargetValueLowSubField.secondaryCustomTargetSpeedLow).map({Float64(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setSecondaryCustomTargetSpeedLow(_ value: Float64) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.secondaryCustomTargetValueLowFieldNum, value: value, index: 0, subFieldIndex: SecondaryCustomTargetValueLowSubField.secondaryCustomTargetSpeedLow )
	}

	public func getSecondaryCustomTargetHeartRateLow() throws -> WorkoutHr? {
		guard let value = try getFieldValue(fieldNum: WorkoutStepMesg.secondaryCustomTargetValueLowFieldNum, index: 0, subFieldIndex: SecondaryCustomTargetValueLowSubField.secondaryCustomTargetHeartRateLow).map({UInt32(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setSecondaryCustomTargetHeartRateLow(_ value: WorkoutHr) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.secondaryCustomTargetValueLowFieldNum, value: value, index: 0, subFieldIndex: SecondaryCustomTargetValueLowSubField.secondaryCustomTargetHeartRateLow )
	}

	public func getSecondaryCustomTargetCadenceLow() throws -> UInt32? {
		guard let value = try getFieldValue(fieldNum: WorkoutStepMesg.secondaryCustomTargetValueLowFieldNum, index: 0, subFieldIndex: SecondaryCustomTargetValueLowSubField.secondaryCustomTargetCadenceLow).map({UInt32(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setSecondaryCustomTargetCadenceLow(_ value: UInt32) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.secondaryCustomTargetValueLowFieldNum, value: value, index: 0, subFieldIndex: SecondaryCustomTargetValueLowSubField.secondaryCustomTargetCadenceLow )
	}

	public func getSecondaryCustomTargetPowerLow() throws -> WorkoutPower? {
		guard let value = try getFieldValue(fieldNum: WorkoutStepMesg.secondaryCustomTargetValueLowFieldNum, index: 0, subFieldIndex: SecondaryCustomTargetValueLowSubField.secondaryCustomTargetPowerLow).map({UInt32(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setSecondaryCustomTargetPowerLow(_ value: WorkoutPower) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.secondaryCustomTargetValueLowFieldNum, value: value, index: 0, subFieldIndex: SecondaryCustomTargetValueLowSubField.secondaryCustomTargetPowerLow )
	}

	public func getSecondaryCustomTargetValueHigh() -> UInt32? {
		guard let value = getFieldValue(fieldNum: WorkoutStepMesg.secondaryCustomTargetValueHighFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setSecondaryCustomTargetValueHigh(_ value: UInt32) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.secondaryCustomTargetValueHighFieldNum, value: value)
	}

	public func getSecondaryCustomTargetSpeedHigh() throws -> Float64? {
		guard let value = try getFieldValue(fieldNum: WorkoutStepMesg.secondaryCustomTargetValueHighFieldNum, index: 0, subFieldIndex: SecondaryCustomTargetValueHighSubField.secondaryCustomTargetSpeedHigh).map({Float64(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setSecondaryCustomTargetSpeedHigh(_ value: Float64) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.secondaryCustomTargetValueHighFieldNum, value: value, index: 0, subFieldIndex: SecondaryCustomTargetValueHighSubField.secondaryCustomTargetSpeedHigh )
	}

	public func getSecondaryCustomTargetHeartRateHigh() throws -> WorkoutHr? {
		guard let value = try getFieldValue(fieldNum: WorkoutStepMesg.secondaryCustomTargetValueHighFieldNum, index: 0, subFieldIndex: SecondaryCustomTargetValueHighSubField.secondaryCustomTargetHeartRateHigh).map({UInt32(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setSecondaryCustomTargetHeartRateHigh(_ value: WorkoutHr) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.secondaryCustomTargetValueHighFieldNum, value: value, index: 0, subFieldIndex: SecondaryCustomTargetValueHighSubField.secondaryCustomTargetHeartRateHigh )
	}

	public func getSecondaryCustomTargetCadenceHigh() throws -> UInt32? {
		guard let value = try getFieldValue(fieldNum: WorkoutStepMesg.secondaryCustomTargetValueHighFieldNum, index: 0, subFieldIndex: SecondaryCustomTargetValueHighSubField.secondaryCustomTargetCadenceHigh).map({UInt32(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setSecondaryCustomTargetCadenceHigh(_ value: UInt32) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.secondaryCustomTargetValueHighFieldNum, value: value, index: 0, subFieldIndex: SecondaryCustomTargetValueHighSubField.secondaryCustomTargetCadenceHigh )
	}

	public func getSecondaryCustomTargetPowerHigh() throws -> WorkoutPower? {
		guard let value = try getFieldValue(fieldNum: WorkoutStepMesg.secondaryCustomTargetValueHighFieldNum, index: 0, subFieldIndex: SecondaryCustomTargetValueHighSubField.secondaryCustomTargetPowerHigh).map({UInt32(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setSecondaryCustomTargetPowerHigh(_ value: WorkoutPower) throws {
		try setFieldValue(fieldNum: WorkoutStepMesg.secondaryCustomTargetValueHighFieldNum, value: value, index: 0, subFieldIndex: SecondaryCustomTargetValueHighSubField.secondaryCustomTargetPowerHigh )
	}

	public class func createWorkoutStepMesg() -> WorkoutStepMesg {
        let mesg = WorkoutStepMesg(name: "WorkoutStep", num: Profile.MesgNum.workoutStep)
		
		mesg.fields[WorkoutStepMesg.messageIndexFieldNum] = Field(name: "MessageIndex", num: WorkoutStepMesg.messageIndexFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[WorkoutStepMesg.wktStepNameFieldNum] = Field(name: "WktStepName", num: WorkoutStepMesg.wktStepNameFieldNum, type: BaseType.STRING.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[WorkoutStepMesg.durationTypeFieldNum] = Field(name: "DurationType", num: WorkoutStepMesg.durationTypeFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[WorkoutStepMesg.durationValueFieldNum] = Field(name: "DurationValue", num: WorkoutStepMesg.durationValueFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
        mesg.fields[WorkoutStepMesg.durationValueFieldNum]?.subFields.append(SubField(name: "DurationTime", type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "s"))
        mesg.fields[WorkoutStepMesg.durationValueFieldNum]?.subFields[Int(DurationValueSubField.durationTime)].addMap(refFieldNum: 1, refFieldValue: 0)
        mesg.fields[WorkoutStepMesg.durationValueFieldNum]?.subFields[Int(DurationValueSubField.durationTime)].addMap(refFieldNum: 1, refFieldValue: 28)
        mesg.fields[WorkoutStepMesg.durationValueFieldNum]?.subFields.append(SubField(name: "DurationDistance", type: BaseType.UINT32.rawValue, scale: 100, offset: 0, units: "m"))
        mesg.fields[WorkoutStepMesg.durationValueFieldNum]?.subFields[Int(DurationValueSubField.durationDistance)].addMap(refFieldNum: 1, refFieldValue: 1)
        mesg.fields[WorkoutStepMesg.durationValueFieldNum]?.subFields.append(SubField(name: "DurationHr", type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "% or bpm"))
        mesg.fields[WorkoutStepMesg.durationValueFieldNum]?.subFields[Int(DurationValueSubField.durationHr)].addMap(refFieldNum: 1, refFieldValue: 2)
        mesg.fields[WorkoutStepMesg.durationValueFieldNum]?.subFields[Int(DurationValueSubField.durationHr)].addMap(refFieldNum: 1, refFieldValue: 3)
        mesg.fields[WorkoutStepMesg.durationValueFieldNum]?.subFields.append(SubField(name: "DurationCalories", type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "calories"))
        mesg.fields[WorkoutStepMesg.durationValueFieldNum]?.subFields[Int(DurationValueSubField.durationCalories)].addMap(refFieldNum: 1, refFieldValue: 4)
        mesg.fields[WorkoutStepMesg.durationValueFieldNum]?.subFields.append(SubField(name: "DurationStep", type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: ""))
        mesg.fields[WorkoutStepMesg.durationValueFieldNum]?.subFields[Int(DurationValueSubField.durationStep)].addMap(refFieldNum: 1, refFieldValue: 6)
        mesg.fields[WorkoutStepMesg.durationValueFieldNum]?.subFields[Int(DurationValueSubField.durationStep)].addMap(refFieldNum: 1, refFieldValue: 7)
        mesg.fields[WorkoutStepMesg.durationValueFieldNum]?.subFields[Int(DurationValueSubField.durationStep)].addMap(refFieldNum: 1, refFieldValue: 8)
        mesg.fields[WorkoutStepMesg.durationValueFieldNum]?.subFields[Int(DurationValueSubField.durationStep)].addMap(refFieldNum: 1, refFieldValue: 9)
        mesg.fields[WorkoutStepMesg.durationValueFieldNum]?.subFields[Int(DurationValueSubField.durationStep)].addMap(refFieldNum: 1, refFieldValue: 10)
        mesg.fields[WorkoutStepMesg.durationValueFieldNum]?.subFields[Int(DurationValueSubField.durationStep)].addMap(refFieldNum: 1, refFieldValue: 11)
        mesg.fields[WorkoutStepMesg.durationValueFieldNum]?.subFields[Int(DurationValueSubField.durationStep)].addMap(refFieldNum: 1, refFieldValue: 12)
        mesg.fields[WorkoutStepMesg.durationValueFieldNum]?.subFields[Int(DurationValueSubField.durationStep)].addMap(refFieldNum: 1, refFieldValue: 13)
        mesg.fields[WorkoutStepMesg.durationValueFieldNum]?.subFields.append(SubField(name: "DurationPower", type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "% or watts"))
        mesg.fields[WorkoutStepMesg.durationValueFieldNum]?.subFields[Int(DurationValueSubField.durationPower)].addMap(refFieldNum: 1, refFieldValue: 14)
        mesg.fields[WorkoutStepMesg.durationValueFieldNum]?.subFields[Int(DurationValueSubField.durationPower)].addMap(refFieldNum: 1, refFieldValue: 15)
        mesg.fields[WorkoutStepMesg.durationValueFieldNum]?.subFields.append(SubField(name: "DurationReps", type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: ""))
        mesg.fields[WorkoutStepMesg.durationValueFieldNum]?.subFields[Int(DurationValueSubField.durationReps)].addMap(refFieldNum: 1, refFieldValue: 29)
		mesg.fields[WorkoutStepMesg.targetTypeFieldNum] = Field(name: "TargetType", num: WorkoutStepMesg.targetTypeFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[WorkoutStepMesg.targetValueFieldNum] = Field(name: "TargetValue", num: WorkoutStepMesg.targetValueFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
        mesg.fields[WorkoutStepMesg.targetValueFieldNum]?.subFields.append(SubField(name: "TargetSpeedZone", type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: ""))
        mesg.fields[WorkoutStepMesg.targetValueFieldNum]?.subFields[Int(TargetValueSubField.targetSpeedZone)].addMap(refFieldNum: 3, refFieldValue: 0)
        mesg.fields[WorkoutStepMesg.targetValueFieldNum]?.subFields.append(SubField(name: "TargetHrZone", type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: ""))
        mesg.fields[WorkoutStepMesg.targetValueFieldNum]?.subFields[Int(TargetValueSubField.targetHrZone)].addMap(refFieldNum: 3, refFieldValue: 1)
        mesg.fields[WorkoutStepMesg.targetValueFieldNum]?.subFields.append(SubField(name: "TargetCadenceZone", type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: ""))
        mesg.fields[WorkoutStepMesg.targetValueFieldNum]?.subFields[Int(TargetValueSubField.targetCadenceZone)].addMap(refFieldNum: 3, refFieldValue: 3)
        mesg.fields[WorkoutStepMesg.targetValueFieldNum]?.subFields.append(SubField(name: "TargetPowerZone", type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: ""))
        mesg.fields[WorkoutStepMesg.targetValueFieldNum]?.subFields[Int(TargetValueSubField.targetPowerZone)].addMap(refFieldNum: 3, refFieldValue: 4)
        mesg.fields[WorkoutStepMesg.targetValueFieldNum]?.subFields.append(SubField(name: "RepeatSteps", type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: ""))
        mesg.fields[WorkoutStepMesg.targetValueFieldNum]?.subFields[Int(TargetValueSubField.repeatSteps)].addMap(refFieldNum: 1, refFieldValue: 6)
        mesg.fields[WorkoutStepMesg.targetValueFieldNum]?.subFields.append(SubField(name: "RepeatTime", type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "s"))
        mesg.fields[WorkoutStepMesg.targetValueFieldNum]?.subFields[Int(TargetValueSubField.repeatTime)].addMap(refFieldNum: 1, refFieldValue: 7)
        mesg.fields[WorkoutStepMesg.targetValueFieldNum]?.subFields.append(SubField(name: "RepeatDistance", type: BaseType.UINT32.rawValue, scale: 100, offset: 0, units: "m"))
        mesg.fields[WorkoutStepMesg.targetValueFieldNum]?.subFields[Int(TargetValueSubField.repeatDistance)].addMap(refFieldNum: 1, refFieldValue: 8)
        mesg.fields[WorkoutStepMesg.targetValueFieldNum]?.subFields.append(SubField(name: "RepeatCalories", type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "calories"))
        mesg.fields[WorkoutStepMesg.targetValueFieldNum]?.subFields[Int(TargetValueSubField.repeatCalories)].addMap(refFieldNum: 1, refFieldValue: 9)
        mesg.fields[WorkoutStepMesg.targetValueFieldNum]?.subFields.append(SubField(name: "RepeatHr", type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "% or bpm"))
        mesg.fields[WorkoutStepMesg.targetValueFieldNum]?.subFields[Int(TargetValueSubField.repeatHr)].addMap(refFieldNum: 1, refFieldValue: 10)
        mesg.fields[WorkoutStepMesg.targetValueFieldNum]?.subFields[Int(TargetValueSubField.repeatHr)].addMap(refFieldNum: 1, refFieldValue: 11)
        mesg.fields[WorkoutStepMesg.targetValueFieldNum]?.subFields.append(SubField(name: "RepeatPower", type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "% or watts"))
        mesg.fields[WorkoutStepMesg.targetValueFieldNum]?.subFields[Int(TargetValueSubField.repeatPower)].addMap(refFieldNum: 1, refFieldValue: 12)
        mesg.fields[WorkoutStepMesg.targetValueFieldNum]?.subFields[Int(TargetValueSubField.repeatPower)].addMap(refFieldNum: 1, refFieldValue: 13)
        mesg.fields[WorkoutStepMesg.targetValueFieldNum]?.subFields.append(SubField(name: "TargetStrokeType", type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: ""))
        mesg.fields[WorkoutStepMesg.targetValueFieldNum]?.subFields[Int(TargetValueSubField.targetStrokeType)].addMap(refFieldNum: 3, refFieldValue: 11)
		mesg.fields[WorkoutStepMesg.customTargetValueLowFieldNum] = Field(name: "CustomTargetValueLow", num: WorkoutStepMesg.customTargetValueLowFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
        mesg.fields[WorkoutStepMesg.customTargetValueLowFieldNum]?.subFields.append(SubField(name: "CustomTargetSpeedLow", type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "m/s"))
        mesg.fields[WorkoutStepMesg.customTargetValueLowFieldNum]?.subFields[Int(CustomTargetValueLowSubField.customTargetSpeedLow)].addMap(refFieldNum: 3, refFieldValue: 0)
        mesg.fields[WorkoutStepMesg.customTargetValueLowFieldNum]?.subFields.append(SubField(name: "CustomTargetHeartRateLow", type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "% or bpm"))
        mesg.fields[WorkoutStepMesg.customTargetValueLowFieldNum]?.subFields[Int(CustomTargetValueLowSubField.customTargetHeartRateLow)].addMap(refFieldNum: 3, refFieldValue: 1)
        mesg.fields[WorkoutStepMesg.customTargetValueLowFieldNum]?.subFields.append(SubField(name: "CustomTargetCadenceLow", type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "rpm"))
        mesg.fields[WorkoutStepMesg.customTargetValueLowFieldNum]?.subFields[Int(CustomTargetValueLowSubField.customTargetCadenceLow)].addMap(refFieldNum: 3, refFieldValue: 3)
        mesg.fields[WorkoutStepMesg.customTargetValueLowFieldNum]?.subFields.append(SubField(name: "CustomTargetPowerLow", type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "% or watts"))
        mesg.fields[WorkoutStepMesg.customTargetValueLowFieldNum]?.subFields[Int(CustomTargetValueLowSubField.customTargetPowerLow)].addMap(refFieldNum: 3, refFieldValue: 4)
		mesg.fields[WorkoutStepMesg.customTargetValueHighFieldNum] = Field(name: "CustomTargetValueHigh", num: WorkoutStepMesg.customTargetValueHighFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
        mesg.fields[WorkoutStepMesg.customTargetValueHighFieldNum]?.subFields.append(SubField(name: "CustomTargetSpeedHigh", type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "m/s"))
        mesg.fields[WorkoutStepMesg.customTargetValueHighFieldNum]?.subFields[Int(CustomTargetValueHighSubField.customTargetSpeedHigh)].addMap(refFieldNum: 3, refFieldValue: 0)
        mesg.fields[WorkoutStepMesg.customTargetValueHighFieldNum]?.subFields.append(SubField(name: "CustomTargetHeartRateHigh", type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "% or bpm"))
        mesg.fields[WorkoutStepMesg.customTargetValueHighFieldNum]?.subFields[Int(CustomTargetValueHighSubField.customTargetHeartRateHigh)].addMap(refFieldNum: 3, refFieldValue: 1)
        mesg.fields[WorkoutStepMesg.customTargetValueHighFieldNum]?.subFields.append(SubField(name: "CustomTargetCadenceHigh", type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "rpm"))
        mesg.fields[WorkoutStepMesg.customTargetValueHighFieldNum]?.subFields[Int(CustomTargetValueHighSubField.customTargetCadenceHigh)].addMap(refFieldNum: 3, refFieldValue: 3)
        mesg.fields[WorkoutStepMesg.customTargetValueHighFieldNum]?.subFields.append(SubField(name: "CustomTargetPowerHigh", type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "% or watts"))
        mesg.fields[WorkoutStepMesg.customTargetValueHighFieldNum]?.subFields[Int(CustomTargetValueHighSubField.customTargetPowerHigh)].addMap(refFieldNum: 3, refFieldValue: 4)
		mesg.fields[WorkoutStepMesg.intensityFieldNum] = Field(name: "Intensity", num: WorkoutStepMesg.intensityFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[WorkoutStepMesg.notesFieldNum] = Field(name: "Notes", num: WorkoutStepMesg.notesFieldNum, type: BaseType.STRING.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[WorkoutStepMesg.equipmentFieldNum] = Field(name: "Equipment", num: WorkoutStepMesg.equipmentFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[WorkoutStepMesg.exerciseCategoryFieldNum] = Field(name: "ExerciseCategory", num: WorkoutStepMesg.exerciseCategoryFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[WorkoutStepMesg.exerciseNameFieldNum] = Field(name: "ExerciseName", num: WorkoutStepMesg.exerciseNameFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[WorkoutStepMesg.exerciseWeightFieldNum] = Field(name: "ExerciseWeight", num: WorkoutStepMesg.exerciseWeightFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "kg", accumulated: false)
		mesg.fields[WorkoutStepMesg.weightDisplayUnitFieldNum] = Field(name: "WeightDisplayUnit", num: WorkoutStepMesg.weightDisplayUnitFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[WorkoutStepMesg.secondaryTargetTypeFieldNum] = Field(name: "SecondaryTargetType", num: WorkoutStepMesg.secondaryTargetTypeFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[WorkoutStepMesg.secondaryTargetValueFieldNum] = Field(name: "SecondaryTargetValue", num: WorkoutStepMesg.secondaryTargetValueFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
        mesg.fields[WorkoutStepMesg.secondaryTargetValueFieldNum]?.subFields.append(SubField(name: "SecondaryTargetSpeedZone", type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: ""))
        mesg.fields[WorkoutStepMesg.secondaryTargetValueFieldNum]?.subFields[Int(SecondaryTargetValueSubField.secondaryTargetSpeedZone)].addMap(refFieldNum: 19, refFieldValue: 0)
        mesg.fields[WorkoutStepMesg.secondaryTargetValueFieldNum]?.subFields.append(SubField(name: "SecondaryTargetHrZone", type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: ""))
        mesg.fields[WorkoutStepMesg.secondaryTargetValueFieldNum]?.subFields[Int(SecondaryTargetValueSubField.secondaryTargetHrZone)].addMap(refFieldNum: 19, refFieldValue: 1)
        mesg.fields[WorkoutStepMesg.secondaryTargetValueFieldNum]?.subFields.append(SubField(name: "SecondaryTargetCadenceZone", type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: ""))
        mesg.fields[WorkoutStepMesg.secondaryTargetValueFieldNum]?.subFields[Int(SecondaryTargetValueSubField.secondaryTargetCadenceZone)].addMap(refFieldNum: 19, refFieldValue: 3)
        mesg.fields[WorkoutStepMesg.secondaryTargetValueFieldNum]?.subFields.append(SubField(name: "SecondaryTargetPowerZone", type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: ""))
        mesg.fields[WorkoutStepMesg.secondaryTargetValueFieldNum]?.subFields[Int(SecondaryTargetValueSubField.secondaryTargetPowerZone)].addMap(refFieldNum: 19, refFieldValue: 4)
        mesg.fields[WorkoutStepMesg.secondaryTargetValueFieldNum]?.subFields.append(SubField(name: "SecondaryTargetStrokeType", type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: ""))
        mesg.fields[WorkoutStepMesg.secondaryTargetValueFieldNum]?.subFields[Int(SecondaryTargetValueSubField.secondaryTargetStrokeType)].addMap(refFieldNum: 19, refFieldValue: 11)
		mesg.fields[WorkoutStepMesg.secondaryCustomTargetValueLowFieldNum] = Field(name: "SecondaryCustomTargetValueLow", num: WorkoutStepMesg.secondaryCustomTargetValueLowFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
        mesg.fields[WorkoutStepMesg.secondaryCustomTargetValueLowFieldNum]?.subFields.append(SubField(name: "SecondaryCustomTargetSpeedLow", type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "m/s"))
        mesg.fields[WorkoutStepMesg.secondaryCustomTargetValueLowFieldNum]?.subFields[Int(SecondaryCustomTargetValueLowSubField.secondaryCustomTargetSpeedLow)].addMap(refFieldNum: 19, refFieldValue: 0)
        mesg.fields[WorkoutStepMesg.secondaryCustomTargetValueLowFieldNum]?.subFields.append(SubField(name: "SecondaryCustomTargetHeartRateLow", type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "% or bpm"))
        mesg.fields[WorkoutStepMesg.secondaryCustomTargetValueLowFieldNum]?.subFields[Int(SecondaryCustomTargetValueLowSubField.secondaryCustomTargetHeartRateLow)].addMap(refFieldNum: 19, refFieldValue: 1)
        mesg.fields[WorkoutStepMesg.secondaryCustomTargetValueLowFieldNum]?.subFields.append(SubField(name: "SecondaryCustomTargetCadenceLow", type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "rpm"))
        mesg.fields[WorkoutStepMesg.secondaryCustomTargetValueLowFieldNum]?.subFields[Int(SecondaryCustomTargetValueLowSubField.secondaryCustomTargetCadenceLow)].addMap(refFieldNum: 19, refFieldValue: 3)
        mesg.fields[WorkoutStepMesg.secondaryCustomTargetValueLowFieldNum]?.subFields.append(SubField(name: "SecondaryCustomTargetPowerLow", type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "% or watts"))
        mesg.fields[WorkoutStepMesg.secondaryCustomTargetValueLowFieldNum]?.subFields[Int(SecondaryCustomTargetValueLowSubField.secondaryCustomTargetPowerLow)].addMap(refFieldNum: 19, refFieldValue: 4)
		mesg.fields[WorkoutStepMesg.secondaryCustomTargetValueHighFieldNum] = Field(name: "SecondaryCustomTargetValueHigh", num: WorkoutStepMesg.secondaryCustomTargetValueHighFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
        mesg.fields[WorkoutStepMesg.secondaryCustomTargetValueHighFieldNum]?.subFields.append(SubField(name: "SecondaryCustomTargetSpeedHigh", type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "m/s"))
        mesg.fields[WorkoutStepMesg.secondaryCustomTargetValueHighFieldNum]?.subFields[Int(SecondaryCustomTargetValueHighSubField.secondaryCustomTargetSpeedHigh)].addMap(refFieldNum: 19, refFieldValue: 0)
        mesg.fields[WorkoutStepMesg.secondaryCustomTargetValueHighFieldNum]?.subFields.append(SubField(name: "SecondaryCustomTargetHeartRateHigh", type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "% or bpm"))
        mesg.fields[WorkoutStepMesg.secondaryCustomTargetValueHighFieldNum]?.subFields[Int(SecondaryCustomTargetValueHighSubField.secondaryCustomTargetHeartRateHigh)].addMap(refFieldNum: 19, refFieldValue: 1)
        mesg.fields[WorkoutStepMesg.secondaryCustomTargetValueHighFieldNum]?.subFields.append(SubField(name: "SecondaryCustomTargetCadenceHigh", type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "rpm"))
        mesg.fields[WorkoutStepMesg.secondaryCustomTargetValueHighFieldNum]?.subFields[Int(SecondaryCustomTargetValueHighSubField.secondaryCustomTargetCadenceHigh)].addMap(refFieldNum: 19, refFieldValue: 3)
        mesg.fields[WorkoutStepMesg.secondaryCustomTargetValueHighFieldNum]?.subFields.append(SubField(name: "SecondaryCustomTargetPowerHigh", type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "% or watts"))
        mesg.fields[WorkoutStepMesg.secondaryCustomTargetValueHighFieldNum]?.subFields[Int(SecondaryCustomTargetValueHighSubField.secondaryCustomTargetPowerHigh)].addMap(refFieldNum: 19, refFieldValue: 4)
        return mesg
    }
}