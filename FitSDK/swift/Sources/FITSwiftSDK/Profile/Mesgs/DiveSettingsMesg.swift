/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class DiveSettingsMesg : Mesg {
    public static let timestampFieldNum:UInt8 = 253
    public static let messageIndexFieldNum:UInt8 = 254
    public static let nameFieldNum:UInt8 = 0
    public static let modelFieldNum:UInt8 = 1
    public static let gfLowFieldNum:UInt8 = 2
    public static let gfHighFieldNum:UInt8 = 3
    public static let waterTypeFieldNum:UInt8 = 4
    public static let waterDensityFieldNum:UInt8 = 5
    public static let po2WarnFieldNum:UInt8 = 6
    public static let po2CriticalFieldNum:UInt8 = 7
    public static let po2DecoFieldNum:UInt8 = 8
    public static let safetyStopEnabledFieldNum:UInt8 = 9
    public static let bottomDepthFieldNum:UInt8 = 10
    public static let bottomTimeFieldNum:UInt8 = 11
    public static let apneaCountdownEnabledFieldNum:UInt8 = 12
    public static let apneaCountdownTimeFieldNum:UInt8 = 13
    public static let backlightModeFieldNum:UInt8 = 14
    public static let backlightBrightnessFieldNum:UInt8 = 15
    public static let backlightTimeoutFieldNum:UInt8 = 16
    public static let repeatDiveIntervalFieldNum:UInt8 = 17
    public static let safetyStopTimeFieldNum:UInt8 = 18
    public static let heartRateSourceTypeFieldNum:UInt8 = 19
    public static let heartRateSourceFieldNum:UInt8 = 20
    public static let travelGasFieldNum:UInt8 = 21
    public static let ccrLowSetpointSwitchModeFieldNum:UInt8 = 22
    public static let ccrLowSetpointFieldNum:UInt8 = 23
    public static let ccrLowSetpointDepthFieldNum:UInt8 = 24
    public static let ccrHighSetpointSwitchModeFieldNum:UInt8 = 25
    public static let ccrHighSetpointFieldNum:UInt8 = 26
    public static let ccrHighSetpointDepthFieldNum:UInt8 = 27
    public static let gasConsumptionDisplayFieldNum:UInt8 = 29
    public static let upKeyEnabledFieldNum:UInt8 = 30
    public static let diveSoundsFieldNum:UInt8 = 35
    public static let lastStopMultipleFieldNum:UInt8 = 36
    public static let noFlyTimeModeFieldNum:UInt8 = 37

	private struct HeartRateSourceSubField {
        public static let heartRateAntplusDeviceType:UInt16 = 0
        public static let heartRateLocalDeviceType:UInt16 = 1
        public static let subfields:UInt16 = 2
        public static let active:UInt16 = FIT.SUBFIELD_INDEX.ACTIVE_SUBFIELD
        public static let mainField:UInt16 = FIT.SUBFIELD_INDEX.MAIN_FIELD
    }

	public init() {
        super.init(mesg: DiveSettingsMesg.createDiveSettingsMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getTimestamp() -> DateTime? {
		guard let value = getFieldValue(fieldNum: DiveSettingsMesg.timestampFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setTimestamp(_ value: DateTime) throws {
		try setFieldValue(fieldNum: DiveSettingsMesg.timestampFieldNum, value: value.timestamp)
	}

	public func getMessageIndex() -> MessageIndex? {
		guard let value = getFieldValue(fieldNum: DiveSettingsMesg.messageIndexFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setMessageIndex(_ value: MessageIndex) throws {
		try setFieldValue(fieldNum: DiveSettingsMesg.messageIndexFieldNum, value: value)
	}

	public func getName() -> String? {
		guard let value = getFieldValue(fieldNum: DiveSettingsMesg.nameFieldNum, index:0) as? String else {
            return nil
        }
		return value
	}

	public func setName(_ value: String) throws {
		try setFieldValue(fieldNum: DiveSettingsMesg.nameFieldNum, value: value)
	}

	public func getModel() -> TissueModelType? {
		guard let value = getFieldValue(fieldNum: DiveSettingsMesg.modelFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return TissueModelType(rawValue: value) ?? .invalid
	}

	public func setModel(_ value: TissueModelType) throws {
		try setFieldValue(fieldNum: DiveSettingsMesg.modelFieldNum, value: value.rawValue)
	}

	public func getGfLow() -> UInt8? {
		guard let value = getFieldValue(fieldNum: DiveSettingsMesg.gfLowFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setGfLow(_ value: UInt8) throws {
		try setFieldValue(fieldNum: DiveSettingsMesg.gfLowFieldNum, value: value)
	}

	public func getGfHigh() -> UInt8? {
		guard let value = getFieldValue(fieldNum: DiveSettingsMesg.gfHighFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setGfHigh(_ value: UInt8) throws {
		try setFieldValue(fieldNum: DiveSettingsMesg.gfHighFieldNum, value: value)
	}

	public func getWaterType() -> WaterType? {
		guard let value = getFieldValue(fieldNum: DiveSettingsMesg.waterTypeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return WaterType(rawValue: value) ?? .invalid
	}

	public func setWaterType(_ value: WaterType) throws {
		try setFieldValue(fieldNum: DiveSettingsMesg.waterTypeFieldNum, value: value.rawValue)
	}

	public func getWaterDensity() -> Float32? {
		guard let value = getFieldValue(fieldNum: DiveSettingsMesg.waterDensityFieldNum, index:0) as? Float32 else {
            return nil
        }
		return value
	}

	public func setWaterDensity(_ value: Float32) throws {
		try setFieldValue(fieldNum: DiveSettingsMesg.waterDensityFieldNum, value: value)
	}

	public func getPo2Warn() -> Float64? {
		guard let value = getFieldValue(fieldNum: DiveSettingsMesg.po2WarnFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setPo2Warn(_ value: Float64) throws {
		try setFieldValue(fieldNum: DiveSettingsMesg.po2WarnFieldNum, value: value)
	}

	public func getPo2Critical() -> Float64? {
		guard let value = getFieldValue(fieldNum: DiveSettingsMesg.po2CriticalFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setPo2Critical(_ value: Float64) throws {
		try setFieldValue(fieldNum: DiveSettingsMesg.po2CriticalFieldNum, value: value)
	}

	public func getPo2Deco() -> Float64? {
		guard let value = getFieldValue(fieldNum: DiveSettingsMesg.po2DecoFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setPo2Deco(_ value: Float64) throws {
		try setFieldValue(fieldNum: DiveSettingsMesg.po2DecoFieldNum, value: value)
	}

	public func getSafetyStopEnabled() -> Bool? {
		guard let value = getFieldValue(fieldNum: DiveSettingsMesg.safetyStopEnabledFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value == 1 ? true : false
	}

	public func setSafetyStopEnabled(_ value: Bool) throws {
		try setFieldValue(fieldNum: DiveSettingsMesg.safetyStopEnabledFieldNum, value: value)
	}

	public func getBottomDepth() -> Float32? {
		guard let value = getFieldValue(fieldNum: DiveSettingsMesg.bottomDepthFieldNum, index:0) as? Float32 else {
            return nil
        }
		return value
	}

	public func setBottomDepth(_ value: Float32) throws {
		try setFieldValue(fieldNum: DiveSettingsMesg.bottomDepthFieldNum, value: value)
	}

	public func getBottomTime() -> UInt32? {
		guard let value = getFieldValue(fieldNum: DiveSettingsMesg.bottomTimeFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setBottomTime(_ value: UInt32) throws {
		try setFieldValue(fieldNum: DiveSettingsMesg.bottomTimeFieldNum, value: value)
	}

	public func getApneaCountdownEnabled() -> Bool? {
		guard let value = getFieldValue(fieldNum: DiveSettingsMesg.apneaCountdownEnabledFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value == 1 ? true : false
	}

	public func setApneaCountdownEnabled(_ value: Bool) throws {
		try setFieldValue(fieldNum: DiveSettingsMesg.apneaCountdownEnabledFieldNum, value: value)
	}

	public func getApneaCountdownTime() -> UInt32? {
		guard let value = getFieldValue(fieldNum: DiveSettingsMesg.apneaCountdownTimeFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setApneaCountdownTime(_ value: UInt32) throws {
		try setFieldValue(fieldNum: DiveSettingsMesg.apneaCountdownTimeFieldNum, value: value)
	}

	public func getBacklightMode() -> DiveBacklightMode? {
		guard let value = getFieldValue(fieldNum: DiveSettingsMesg.backlightModeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return DiveBacklightMode(rawValue: value) ?? .invalid
	}

	public func setBacklightMode(_ value: DiveBacklightMode) throws {
		try setFieldValue(fieldNum: DiveSettingsMesg.backlightModeFieldNum, value: value.rawValue)
	}

	public func getBacklightBrightness() -> UInt8? {
		guard let value = getFieldValue(fieldNum: DiveSettingsMesg.backlightBrightnessFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setBacklightBrightness(_ value: UInt8) throws {
		try setFieldValue(fieldNum: DiveSettingsMesg.backlightBrightnessFieldNum, value: value)
	}

	public func getBacklightTimeout() -> BacklightTimeout? {
		guard let value = getFieldValue(fieldNum: DiveSettingsMesg.backlightTimeoutFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setBacklightTimeout(_ value: BacklightTimeout) throws {
		try setFieldValue(fieldNum: DiveSettingsMesg.backlightTimeoutFieldNum, value: value)
	}

	public func getRepeatDiveInterval() -> UInt16? {
		guard let value = getFieldValue(fieldNum: DiveSettingsMesg.repeatDiveIntervalFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setRepeatDiveInterval(_ value: UInt16) throws {
		try setFieldValue(fieldNum: DiveSettingsMesg.repeatDiveIntervalFieldNum, value: value)
	}

	public func getSafetyStopTime() -> UInt16? {
		guard let value = getFieldValue(fieldNum: DiveSettingsMesg.safetyStopTimeFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setSafetyStopTime(_ value: UInt16) throws {
		try setFieldValue(fieldNum: DiveSettingsMesg.safetyStopTimeFieldNum, value: value)
	}

	public func getHeartRateSourceType() -> SourceType? {
		guard let value = getFieldValue(fieldNum: DiveSettingsMesg.heartRateSourceTypeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return SourceType(rawValue: value) ?? .invalid
	}

	public func setHeartRateSourceType(_ value: SourceType) throws {
		try setFieldValue(fieldNum: DiveSettingsMesg.heartRateSourceTypeFieldNum, value: value.rawValue)
	}

	public func getHeartRateSource() -> UInt8? {
		guard let value = getFieldValue(fieldNum: DiveSettingsMesg.heartRateSourceFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setHeartRateSource(_ value: UInt8) throws {
		try setFieldValue(fieldNum: DiveSettingsMesg.heartRateSourceFieldNum, value: value)
	}

	public func getHeartRateAntplusDeviceType() throws -> AntplusDeviceType? {
		guard let value = try getFieldValue(fieldNum: DiveSettingsMesg.heartRateSourceFieldNum, index: 0, subFieldIndex: HeartRateSourceSubField.heartRateAntplusDeviceType).map({UInt8(fitValue: $0)}) else {
			return nil
		}
		
		return AntplusDeviceType(rawValue: value) ?? .invalid
	}

	public func setHeartRateAntplusDeviceType(_ value: AntplusDeviceType) throws {
		try setFieldValue(fieldNum: DiveSettingsMesg.heartRateSourceFieldNum, value: value.rawValue, index: 0, subFieldIndex: HeartRateSourceSubField.heartRateAntplusDeviceType )
	}

	public func getHeartRateLocalDeviceType() throws -> LocalDeviceType? {
		guard let value = try getFieldValue(fieldNum: DiveSettingsMesg.heartRateSourceFieldNum, index: 0, subFieldIndex: HeartRateSourceSubField.heartRateLocalDeviceType).map({UInt8(fitValue: $0)}) else {
			return nil
		}
		
		return LocalDeviceType(rawValue: value) ?? .invalid
	}

	public func setHeartRateLocalDeviceType(_ value: LocalDeviceType) throws {
		try setFieldValue(fieldNum: DiveSettingsMesg.heartRateSourceFieldNum, value: value.rawValue, index: 0, subFieldIndex: HeartRateSourceSubField.heartRateLocalDeviceType )
	}

	public func getTravelGas() -> MessageIndex? {
		guard let value = getFieldValue(fieldNum: DiveSettingsMesg.travelGasFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setTravelGas(_ value: MessageIndex) throws {
		try setFieldValue(fieldNum: DiveSettingsMesg.travelGasFieldNum, value: value)
	}

	public func getCcrLowSetpointSwitchMode() -> CcrSetpointSwitchMode? {
		guard let value = getFieldValue(fieldNum: DiveSettingsMesg.ccrLowSetpointSwitchModeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return CcrSetpointSwitchMode(rawValue: value) ?? .invalid
	}

	public func setCcrLowSetpointSwitchMode(_ value: CcrSetpointSwitchMode) throws {
		try setFieldValue(fieldNum: DiveSettingsMesg.ccrLowSetpointSwitchModeFieldNum, value: value.rawValue)
	}

	public func getCcrLowSetpoint() -> Float64? {
		guard let value = getFieldValue(fieldNum: DiveSettingsMesg.ccrLowSetpointFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setCcrLowSetpoint(_ value: Float64) throws {
		try setFieldValue(fieldNum: DiveSettingsMesg.ccrLowSetpointFieldNum, value: value)
	}

	public func getCcrLowSetpointDepth() -> Float64? {
		guard let value = getFieldValue(fieldNum: DiveSettingsMesg.ccrLowSetpointDepthFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setCcrLowSetpointDepth(_ value: Float64) throws {
		try setFieldValue(fieldNum: DiveSettingsMesg.ccrLowSetpointDepthFieldNum, value: value)
	}

	public func getCcrHighSetpointSwitchMode() -> CcrSetpointSwitchMode? {
		guard let value = getFieldValue(fieldNum: DiveSettingsMesg.ccrHighSetpointSwitchModeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return CcrSetpointSwitchMode(rawValue: value) ?? .invalid
	}

	public func setCcrHighSetpointSwitchMode(_ value: CcrSetpointSwitchMode) throws {
		try setFieldValue(fieldNum: DiveSettingsMesg.ccrHighSetpointSwitchModeFieldNum, value: value.rawValue)
	}

	public func getCcrHighSetpoint() -> Float64? {
		guard let value = getFieldValue(fieldNum: DiveSettingsMesg.ccrHighSetpointFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setCcrHighSetpoint(_ value: Float64) throws {
		try setFieldValue(fieldNum: DiveSettingsMesg.ccrHighSetpointFieldNum, value: value)
	}

	public func getCcrHighSetpointDepth() -> Float64? {
		guard let value = getFieldValue(fieldNum: DiveSettingsMesg.ccrHighSetpointDepthFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setCcrHighSetpointDepth(_ value: Float64) throws {
		try setFieldValue(fieldNum: DiveSettingsMesg.ccrHighSetpointDepthFieldNum, value: value)
	}

	public func getGasConsumptionDisplay() -> GasConsumptionRateType? {
		guard let value = getFieldValue(fieldNum: DiveSettingsMesg.gasConsumptionDisplayFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return GasConsumptionRateType(rawValue: value) ?? .invalid
	}

	public func setGasConsumptionDisplay(_ value: GasConsumptionRateType) throws {
		try setFieldValue(fieldNum: DiveSettingsMesg.gasConsumptionDisplayFieldNum, value: value.rawValue)
	}

	public func getUpKeyEnabled() -> Bool? {
		guard let value = getFieldValue(fieldNum: DiveSettingsMesg.upKeyEnabledFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value == 1 ? true : false
	}

	public func setUpKeyEnabled(_ value: Bool) throws {
		try setFieldValue(fieldNum: DiveSettingsMesg.upKeyEnabledFieldNum, value: value)
	}

	public func getDiveSounds() -> Tone? {
		guard let value = getFieldValue(fieldNum: DiveSettingsMesg.diveSoundsFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return Tone(rawValue: value) ?? .invalid
	}

	public func setDiveSounds(_ value: Tone) throws {
		try setFieldValue(fieldNum: DiveSettingsMesg.diveSoundsFieldNum, value: value.rawValue)
	}

	public func getLastStopMultiple() -> Float64? {
		guard let value = getFieldValue(fieldNum: DiveSettingsMesg.lastStopMultipleFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setLastStopMultiple(_ value: Float64) throws {
		try setFieldValue(fieldNum: DiveSettingsMesg.lastStopMultipleFieldNum, value: value)
	}

	public func getNoFlyTimeMode() -> NoFlyTimeMode? {
		guard let value = getFieldValue(fieldNum: DiveSettingsMesg.noFlyTimeModeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return NoFlyTimeMode(rawValue: value) ?? .invalid
	}

	public func setNoFlyTimeMode(_ value: NoFlyTimeMode) throws {
		try setFieldValue(fieldNum: DiveSettingsMesg.noFlyTimeModeFieldNum, value: value.rawValue)
	}

	public class func createDiveSettingsMesg() -> DiveSettingsMesg {
        let mesg = DiveSettingsMesg(name: "DiveSettings", num: Profile.MesgNum.diveSettings)
		
		mesg.fields[DiveSettingsMesg.timestampFieldNum] = Field(name: "Timestamp", num: DiveSettingsMesg.timestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DiveSettingsMesg.messageIndexFieldNum] = Field(name: "MessageIndex", num: DiveSettingsMesg.messageIndexFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DiveSettingsMesg.nameFieldNum] = Field(name: "Name", num: DiveSettingsMesg.nameFieldNum, type: BaseType.STRING.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DiveSettingsMesg.modelFieldNum] = Field(name: "Model", num: DiveSettingsMesg.modelFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DiveSettingsMesg.gfLowFieldNum] = Field(name: "GfLow", num: DiveSettingsMesg.gfLowFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "percent", accumulated: false)
		mesg.fields[DiveSettingsMesg.gfHighFieldNum] = Field(name: "GfHigh", num: DiveSettingsMesg.gfHighFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "percent", accumulated: false)
		mesg.fields[DiveSettingsMesg.waterTypeFieldNum] = Field(name: "WaterType", num: DiveSettingsMesg.waterTypeFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DiveSettingsMesg.waterDensityFieldNum] = Field(name: "WaterDensity", num: DiveSettingsMesg.waterDensityFieldNum, type: BaseType.FLOAT32.rawValue, scale: 1, offset: 0, units: "kg/m^3", accumulated: false)
		mesg.fields[DiveSettingsMesg.po2WarnFieldNum] = Field(name: "Po2Warn", num: DiveSettingsMesg.po2WarnFieldNum, type: BaseType.UINT8.rawValue, scale: 100, offset: 0, units: "percent", accumulated: false)
		mesg.fields[DiveSettingsMesg.po2CriticalFieldNum] = Field(name: "Po2Critical", num: DiveSettingsMesg.po2CriticalFieldNum, type: BaseType.UINT8.rawValue, scale: 100, offset: 0, units: "percent", accumulated: false)
		mesg.fields[DiveSettingsMesg.po2DecoFieldNum] = Field(name: "Po2Deco", num: DiveSettingsMesg.po2DecoFieldNum, type: BaseType.UINT8.rawValue, scale: 100, offset: 0, units: "percent", accumulated: false)
		mesg.fields[DiveSettingsMesg.safetyStopEnabledFieldNum] = Field(name: "SafetyStopEnabled", num: DiveSettingsMesg.safetyStopEnabledFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DiveSettingsMesg.bottomDepthFieldNum] = Field(name: "BottomDepth", num: DiveSettingsMesg.bottomDepthFieldNum, type: BaseType.FLOAT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DiveSettingsMesg.bottomTimeFieldNum] = Field(name: "BottomTime", num: DiveSettingsMesg.bottomTimeFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DiveSettingsMesg.apneaCountdownEnabledFieldNum] = Field(name: "ApneaCountdownEnabled", num: DiveSettingsMesg.apneaCountdownEnabledFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DiveSettingsMesg.apneaCountdownTimeFieldNum] = Field(name: "ApneaCountdownTime", num: DiveSettingsMesg.apneaCountdownTimeFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DiveSettingsMesg.backlightModeFieldNum] = Field(name: "BacklightMode", num: DiveSettingsMesg.backlightModeFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DiveSettingsMesg.backlightBrightnessFieldNum] = Field(name: "BacklightBrightness", num: DiveSettingsMesg.backlightBrightnessFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DiveSettingsMesg.backlightTimeoutFieldNum] = Field(name: "BacklightTimeout", num: DiveSettingsMesg.backlightTimeoutFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DiveSettingsMesg.repeatDiveIntervalFieldNum] = Field(name: "RepeatDiveInterval", num: DiveSettingsMesg.repeatDiveIntervalFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
		mesg.fields[DiveSettingsMesg.safetyStopTimeFieldNum] = Field(name: "SafetyStopTime", num: DiveSettingsMesg.safetyStopTimeFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
		mesg.fields[DiveSettingsMesg.heartRateSourceTypeFieldNum] = Field(name: "HeartRateSourceType", num: DiveSettingsMesg.heartRateSourceTypeFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DiveSettingsMesg.heartRateSourceFieldNum] = Field(name: "HeartRateSource", num: DiveSettingsMesg.heartRateSourceFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
        mesg.fields[DiveSettingsMesg.heartRateSourceFieldNum]?.subFields.append(SubField(name: "HeartRateAntplusDeviceType", type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: ""))
        mesg.fields[DiveSettingsMesg.heartRateSourceFieldNum]?.subFields[Int(HeartRateSourceSubField.heartRateAntplusDeviceType)].addMap(refFieldNum: 19, refFieldValue: 1)
        mesg.fields[DiveSettingsMesg.heartRateSourceFieldNum]?.subFields.append(SubField(name: "HeartRateLocalDeviceType", type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: ""))
        mesg.fields[DiveSettingsMesg.heartRateSourceFieldNum]?.subFields[Int(HeartRateSourceSubField.heartRateLocalDeviceType)].addMap(refFieldNum: 19, refFieldValue: 5)
		mesg.fields[DiveSettingsMesg.travelGasFieldNum] = Field(name: "TravelGas", num: DiveSettingsMesg.travelGasFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DiveSettingsMesg.ccrLowSetpointSwitchModeFieldNum] = Field(name: "CcrLowSetpointSwitchMode", num: DiveSettingsMesg.ccrLowSetpointSwitchModeFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DiveSettingsMesg.ccrLowSetpointFieldNum] = Field(name: "CcrLowSetpoint", num: DiveSettingsMesg.ccrLowSetpointFieldNum, type: BaseType.UINT8.rawValue, scale: 100, offset: 0, units: "percent", accumulated: false)
		mesg.fields[DiveSettingsMesg.ccrLowSetpointDepthFieldNum] = Field(name: "CcrLowSetpointDepth", num: DiveSettingsMesg.ccrLowSetpointDepthFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "m", accumulated: false)
		mesg.fields[DiveSettingsMesg.ccrHighSetpointSwitchModeFieldNum] = Field(name: "CcrHighSetpointSwitchMode", num: DiveSettingsMesg.ccrHighSetpointSwitchModeFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DiveSettingsMesg.ccrHighSetpointFieldNum] = Field(name: "CcrHighSetpoint", num: DiveSettingsMesg.ccrHighSetpointFieldNum, type: BaseType.UINT8.rawValue, scale: 100, offset: 0, units: "percent", accumulated: false)
		mesg.fields[DiveSettingsMesg.ccrHighSetpointDepthFieldNum] = Field(name: "CcrHighSetpointDepth", num: DiveSettingsMesg.ccrHighSetpointDepthFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "m", accumulated: false)
		mesg.fields[DiveSettingsMesg.gasConsumptionDisplayFieldNum] = Field(name: "GasConsumptionDisplay", num: DiveSettingsMesg.gasConsumptionDisplayFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DiveSettingsMesg.upKeyEnabledFieldNum] = Field(name: "UpKeyEnabled", num: DiveSettingsMesg.upKeyEnabledFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DiveSettingsMesg.diveSoundsFieldNum] = Field(name: "DiveSounds", num: DiveSettingsMesg.diveSoundsFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DiveSettingsMesg.lastStopMultipleFieldNum] = Field(name: "LastStopMultiple", num: DiveSettingsMesg.lastStopMultipleFieldNum, type: BaseType.UINT8.rawValue, scale: 10, offset: 0, units: "", accumulated: false)
		mesg.fields[DiveSettingsMesg.noFlyTimeModeFieldNum] = Field(name: "NoFlyTimeMode", num: DiveSettingsMesg.noFlyTimeModeFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
        return mesg
    }
}