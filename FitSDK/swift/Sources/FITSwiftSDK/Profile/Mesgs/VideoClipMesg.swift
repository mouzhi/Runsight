/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class VideoClipMesg : Mesg {
    public static let clipNumberFieldNum:UInt8 = 0
    public static let startTimestampFieldNum:UInt8 = 1
    public static let startTimestampMsFieldNum:UInt8 = 2
    public static let endTimestampFieldNum:UInt8 = 3
    public static let endTimestampMsFieldNum:UInt8 = 4
    public static let clipStartFieldNum:UInt8 = 6
    public static let clipEndFieldNum:UInt8 = 7

	public init() {
        super.init(mesg: VideoClipMesg.createVideoClipMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getClipNumber() -> UInt16? {
		guard let value = getFieldValue(fieldNum: VideoClipMesg.clipNumberFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setClipNumber(_ value: UInt16) throws {
		try setFieldValue(fieldNum: VideoClipMesg.clipNumberFieldNum, value: value)
	}

	public func getStartTimestamp() -> DateTime? {
		guard let value = getFieldValue(fieldNum: VideoClipMesg.startTimestampFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setStartTimestamp(_ value: DateTime) throws {
		try setFieldValue(fieldNum: VideoClipMesg.startTimestampFieldNum, value: value.timestamp)
	}

	public func getStartTimestampMs() -> UInt16? {
		guard let value = getFieldValue(fieldNum: VideoClipMesg.startTimestampMsFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setStartTimestampMs(_ value: UInt16) throws {
		try setFieldValue(fieldNum: VideoClipMesg.startTimestampMsFieldNum, value: value)
	}

	public func getEndTimestamp() -> DateTime? {
		guard let value = getFieldValue(fieldNum: VideoClipMesg.endTimestampFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setEndTimestamp(_ value: DateTime) throws {
		try setFieldValue(fieldNum: VideoClipMesg.endTimestampFieldNum, value: value.timestamp)
	}

	public func getEndTimestampMs() -> UInt16? {
		guard let value = getFieldValue(fieldNum: VideoClipMesg.endTimestampMsFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setEndTimestampMs(_ value: UInt16) throws {
		try setFieldValue(fieldNum: VideoClipMesg.endTimestampMsFieldNum, value: value)
	}

	public func getClipStart() -> UInt32? {
		guard let value = getFieldValue(fieldNum: VideoClipMesg.clipStartFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setClipStart(_ value: UInt32) throws {
		try setFieldValue(fieldNum: VideoClipMesg.clipStartFieldNum, value: value)
	}

	public func getClipEnd() -> UInt32? {
		guard let value = getFieldValue(fieldNum: VideoClipMesg.clipEndFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setClipEnd(_ value: UInt32) throws {
		try setFieldValue(fieldNum: VideoClipMesg.clipEndFieldNum, value: value)
	}

	public class func createVideoClipMesg() -> VideoClipMesg {
        let mesg = VideoClipMesg(name: "VideoClip", num: Profile.MesgNum.videoClip)
		
		mesg.fields[VideoClipMesg.clipNumberFieldNum] = Field(name: "ClipNumber", num: VideoClipMesg.clipNumberFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[VideoClipMesg.startTimestampFieldNum] = Field(name: "StartTimestamp", num: VideoClipMesg.startTimestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[VideoClipMesg.startTimestampMsFieldNum] = Field(name: "StartTimestampMs", num: VideoClipMesg.startTimestampMsFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[VideoClipMesg.endTimestampFieldNum] = Field(name: "EndTimestamp", num: VideoClipMesg.endTimestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[VideoClipMesg.endTimestampMsFieldNum] = Field(name: "EndTimestampMs", num: VideoClipMesg.endTimestampMsFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[VideoClipMesg.clipStartFieldNum] = Field(name: "ClipStart", num: VideoClipMesg.clipStartFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "ms", accumulated: false)
		mesg.fields[VideoClipMesg.clipEndFieldNum] = Field(name: "ClipEnd", num: VideoClipMesg.clipEndFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "ms", accumulated: false)
        return mesg
    }
}