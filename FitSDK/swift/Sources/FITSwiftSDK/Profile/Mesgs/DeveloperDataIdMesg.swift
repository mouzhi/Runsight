/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class DeveloperDataIdMesg : Mesg {
    public static let developerIdFieldNum:UInt8 = 0
    public static let applicationIdFieldNum:UInt8 = 1
    public static let manufacturerIdFieldNum:UInt8 = 2
    public static let developerDataIndexFieldNum:UInt8 = 3
    public static let applicationVersionFieldNum:UInt8 = 4

	public init() {
        super.init(mesg: DeveloperDataIdMesg.createDeveloperDataIdMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getNumDeveloperId() -> UInt8 {
		guard let field = getField(fieldNum: DeveloperDataIdMesg.developerIdFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getDeveloperId() -> [UInt8?]? {
		guard let field = getField(fieldNum: DeveloperDataIdMesg.developerIdFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt8?]
	}

	public func getDeveloperId(index: Int) -> UInt8? {
		guard let value = getFieldValue(fieldNum: DeveloperDataIdMesg.developerIdFieldNum, index: index) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setDeveloperId(index: Int, value: UInt8) throws {
		try setFieldValue(fieldNum: DeveloperDataIdMesg.developerIdFieldNum, value: value, index: index)
	}

	public func getNumApplicationId() -> UInt8 {
		guard let field = getField(fieldNum: DeveloperDataIdMesg.applicationIdFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getApplicationId() -> [UInt8?]? {
		guard let field = getField(fieldNum: DeveloperDataIdMesg.applicationIdFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt8?]
	}

	public func getApplicationId(index: Int) -> UInt8? {
		guard let value = getFieldValue(fieldNum: DeveloperDataIdMesg.applicationIdFieldNum, index: index) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setApplicationId(index: Int, value: UInt8) throws {
		try setFieldValue(fieldNum: DeveloperDataIdMesg.applicationIdFieldNum, value: value, index: index)
	}

	public func getManufacturerId() -> Manufacturer? {
		guard let value = getFieldValue(fieldNum: DeveloperDataIdMesg.manufacturerIdFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return Manufacturer(rawValue: value) ?? .invalid
	}

	public func setManufacturerId(_ value: Manufacturer) throws {
		try setFieldValue(fieldNum: DeveloperDataIdMesg.manufacturerIdFieldNum, value: value.rawValue)
	}

	public func getDeveloperDataIndex() -> UInt8? {
		guard let value = getFieldValue(fieldNum: DeveloperDataIdMesg.developerDataIndexFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setDeveloperDataIndex(_ value: UInt8) throws {
		try setFieldValue(fieldNum: DeveloperDataIdMesg.developerDataIndexFieldNum, value: value)
	}

	public func getApplicationVersion() -> UInt32? {
		guard let value = getFieldValue(fieldNum: DeveloperDataIdMesg.applicationVersionFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setApplicationVersion(_ value: UInt32) throws {
		try setFieldValue(fieldNum: DeveloperDataIdMesg.applicationVersionFieldNum, value: value)
	}

	public class func createDeveloperDataIdMesg() -> DeveloperDataIdMesg {
        let mesg = DeveloperDataIdMesg(name: "DeveloperDataId", num: Profile.MesgNum.developerDataId)
		
		mesg.fields[DeveloperDataIdMesg.developerIdFieldNum] = Field(name: "DeveloperId", num: DeveloperDataIdMesg.developerIdFieldNum, type: BaseType.BYTE.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DeveloperDataIdMesg.applicationIdFieldNum] = Field(name: "ApplicationId", num: DeveloperDataIdMesg.applicationIdFieldNum, type: BaseType.BYTE.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DeveloperDataIdMesg.manufacturerIdFieldNum] = Field(name: "ManufacturerId", num: DeveloperDataIdMesg.manufacturerIdFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DeveloperDataIdMesg.developerDataIndexFieldNum] = Field(name: "DeveloperDataIndex", num: DeveloperDataIdMesg.developerDataIndexFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DeveloperDataIdMesg.applicationVersionFieldNum] = Field(name: "ApplicationVersion", num: DeveloperDataIdMesg.applicationVersionFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
        return mesg
    }
}