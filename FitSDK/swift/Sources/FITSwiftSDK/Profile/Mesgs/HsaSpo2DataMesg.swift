/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class HsaSpo2DataMesg : Mesg {
    public static let timestampFieldNum:UInt8 = 253
    public static let processingIntervalFieldNum:UInt8 = 0
    public static let readingSpo2FieldNum:UInt8 = 1
    public static let confidenceFieldNum:UInt8 = 2

	public init() {
        super.init(mesg: HsaSpo2DataMesg.createHsaSpo2DataMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getTimestamp() -> DateTime? {
		guard let value = getFieldValue(fieldNum: HsaSpo2DataMesg.timestampFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setTimestamp(_ value: DateTime) throws {
		try setFieldValue(fieldNum: HsaSpo2DataMesg.timestampFieldNum, value: value.timestamp)
	}

	public func getProcessingInterval() -> UInt16? {
		guard let value = getFieldValue(fieldNum: HsaSpo2DataMesg.processingIntervalFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setProcessingInterval(_ value: UInt16) throws {
		try setFieldValue(fieldNum: HsaSpo2DataMesg.processingIntervalFieldNum, value: value)
	}

	public func getNumReadingSpo2() -> UInt8 {
		guard let field = getField(fieldNum: HsaSpo2DataMesg.readingSpo2FieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getReadingSpo2() -> [UInt8?]? {
		guard let field = getField(fieldNum: HsaSpo2DataMesg.readingSpo2FieldNum) else {
			return nil
		}
		return field.toArray() as [UInt8?]
	}

	public func getReadingSpo2(index: Int) -> UInt8? {
		guard let value = getFieldValue(fieldNum: HsaSpo2DataMesg.readingSpo2FieldNum, index: index) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setReadingSpo2(index: Int, value: UInt8) throws {
		try setFieldValue(fieldNum: HsaSpo2DataMesg.readingSpo2FieldNum, value: value, index: index)
	}

	public func getNumConfidence() -> UInt8 {
		guard let field = getField(fieldNum: HsaSpo2DataMesg.confidenceFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getConfidence() -> [UInt8?]? {
		guard let field = getField(fieldNum: HsaSpo2DataMesg.confidenceFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt8?]
	}

	public func getConfidence(index: Int) -> UInt8? {
		guard let value = getFieldValue(fieldNum: HsaSpo2DataMesg.confidenceFieldNum, index: index) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setConfidence(index: Int, value: UInt8) throws {
		try setFieldValue(fieldNum: HsaSpo2DataMesg.confidenceFieldNum, value: value, index: index)
	}

	public class func createHsaSpo2DataMesg() -> HsaSpo2DataMesg {
        let mesg = HsaSpo2DataMesg(name: "HsaSpo2Data", num: Profile.MesgNum.hsaSpo2Data)
		
		mesg.fields[HsaSpo2DataMesg.timestampFieldNum] = Field(name: "Timestamp", num: HsaSpo2DataMesg.timestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
		mesg.fields[HsaSpo2DataMesg.processingIntervalFieldNum] = Field(name: "ProcessingInterval", num: HsaSpo2DataMesg.processingIntervalFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
		mesg.fields[HsaSpo2DataMesg.readingSpo2FieldNum] = Field(name: "ReadingSpo2", num: HsaSpo2DataMesg.readingSpo2FieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "percent", accumulated: false)
		mesg.fields[HsaSpo2DataMesg.confidenceFieldNum] = Field(name: "Confidence", num: HsaSpo2DataMesg.confidenceFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
        return mesg
    }
}