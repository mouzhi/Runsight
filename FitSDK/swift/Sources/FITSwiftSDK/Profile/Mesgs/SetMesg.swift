/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class SetMesg : Mesg {
    public static let timestampFieldNum:UInt8 = 254
    public static let durationFieldNum:UInt8 = 0
    public static let repetitionsFieldNum:UInt8 = 3
    public static let weightFieldNum:UInt8 = 4
    public static let setTypeFieldNum:UInt8 = 5
    public static let startTimeFieldNum:UInt8 = 6
    public static let categoryFieldNum:UInt8 = 7
    public static let categorySubtypeFieldNum:UInt8 = 8
    public static let weightDisplayUnitFieldNum:UInt8 = 9
    public static let messageIndexFieldNum:UInt8 = 10
    public static let wktStepIndexFieldNum:UInt8 = 11

	public init() {
        super.init(mesg: SetMesg.createSetMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getTimestamp() -> DateTime? {
		guard let value = getFieldValue(fieldNum: SetMesg.timestampFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setTimestamp(_ value: DateTime) throws {
		try setFieldValue(fieldNum: SetMesg.timestampFieldNum, value: value.timestamp)
	}

	public func getDuration() -> Float64? {
		guard let value = getFieldValue(fieldNum: SetMesg.durationFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setDuration(_ value: Float64) throws {
		try setFieldValue(fieldNum: SetMesg.durationFieldNum, value: value)
	}

	public func getRepetitions() -> UInt16? {
		guard let value = getFieldValue(fieldNum: SetMesg.repetitionsFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setRepetitions(_ value: UInt16) throws {
		try setFieldValue(fieldNum: SetMesg.repetitionsFieldNum, value: value)
	}

	public func getWeight() -> Float64? {
		guard let value = getFieldValue(fieldNum: SetMesg.weightFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setWeight(_ value: Float64) throws {
		try setFieldValue(fieldNum: SetMesg.weightFieldNum, value: value)
	}

	public func getSetType() -> SetType? {
		guard let value = getFieldValue(fieldNum: SetMesg.setTypeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return SetType(rawValue: value) ?? .invalid
	}

	public func setSetType(_ value: SetType) throws {
		try setFieldValue(fieldNum: SetMesg.setTypeFieldNum, value: value.rawValue)
	}

	public func getStartTime() -> DateTime? {
		guard let value = getFieldValue(fieldNum: SetMesg.startTimeFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setStartTime(_ value: DateTime) throws {
		try setFieldValue(fieldNum: SetMesg.startTimeFieldNum, value: value.timestamp)
	}

	public func getNumCategory() -> UInt8 {
		guard let field = getField(fieldNum: SetMesg.categoryFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getCategory() -> [ExerciseCategory?]? {
		guard let field = getField(fieldNum: SetMesg.categoryFieldNum) else {
			return nil
		}

		let rawValues = field.toArray() as [Any?]
		var values = [ExerciseCategory]()
		for rawValue in rawValues {
			values.append(
				ExerciseCategory(rawValue: rawValue as! UInt16)!
			)
		}

		return values
	}

	public func getCategory(index: Int) -> ExerciseCategory? {
		guard let value = getFieldValue(fieldNum: SetMesg.categoryFieldNum, index: index) as? UInt16 else {
            return nil
        }
		return ExerciseCategory(rawValue: value) ?? .invalid
	}

	public func setCategory(index: Int, value: ExerciseCategory) throws {
		try setFieldValue(fieldNum: SetMesg.categoryFieldNum, value: value.rawValue, index: index)
	}

	public func getNumCategorySubtype() -> UInt8 {
		guard let field = getField(fieldNum: SetMesg.categorySubtypeFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getCategorySubtype() -> [UInt16?]? {
		guard let field = getField(fieldNum: SetMesg.categorySubtypeFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt16?]
	}

	public func getCategorySubtype(index: Int) -> UInt16? {
		guard let value = getFieldValue(fieldNum: SetMesg.categorySubtypeFieldNum, index: index) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setCategorySubtype(index: Int, value: UInt16) throws {
		try setFieldValue(fieldNum: SetMesg.categorySubtypeFieldNum, value: value, index: index)
	}

	public func getWeightDisplayUnit() -> FitBaseUnit? {
		guard let value = getFieldValue(fieldNum: SetMesg.weightDisplayUnitFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return FitBaseUnit(rawValue: value) ?? .invalid
	}

	public func setWeightDisplayUnit(_ value: FitBaseUnit) throws {
		try setFieldValue(fieldNum: SetMesg.weightDisplayUnitFieldNum, value: value.rawValue)
	}

	public func getMessageIndex() -> MessageIndex? {
		guard let value = getFieldValue(fieldNum: SetMesg.messageIndexFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setMessageIndex(_ value: MessageIndex) throws {
		try setFieldValue(fieldNum: SetMesg.messageIndexFieldNum, value: value)
	}

	public func getWktStepIndex() -> MessageIndex? {
		guard let value = getFieldValue(fieldNum: SetMesg.wktStepIndexFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setWktStepIndex(_ value: MessageIndex) throws {
		try setFieldValue(fieldNum: SetMesg.wktStepIndexFieldNum, value: value)
	}

	public class func createSetMesg() -> SetMesg {
        let mesg = SetMesg(name: "Set", num: Profile.MesgNum.set)
		
		mesg.fields[SetMesg.timestampFieldNum] = Field(name: "Timestamp", num: SetMesg.timestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SetMesg.durationFieldNum] = Field(name: "Duration", num: SetMesg.durationFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "s", accumulated: false)
		mesg.fields[SetMesg.repetitionsFieldNum] = Field(name: "Repetitions", num: SetMesg.repetitionsFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SetMesg.weightFieldNum] = Field(name: "Weight", num: SetMesg.weightFieldNum, type: BaseType.UINT16.rawValue, scale: 16, offset: 0, units: "kg", accumulated: false)
		mesg.fields[SetMesg.setTypeFieldNum] = Field(name: "SetType", num: SetMesg.setTypeFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SetMesg.startTimeFieldNum] = Field(name: "StartTime", num: SetMesg.startTimeFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SetMesg.categoryFieldNum] = Field(name: "Category", num: SetMesg.categoryFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SetMesg.categorySubtypeFieldNum] = Field(name: "CategorySubtype", num: SetMesg.categorySubtypeFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SetMesg.weightDisplayUnitFieldNum] = Field(name: "WeightDisplayUnit", num: SetMesg.weightDisplayUnitFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SetMesg.messageIndexFieldNum] = Field(name: "MessageIndex", num: SetMesg.messageIndexFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SetMesg.wktStepIndexFieldNum] = Field(name: "WktStepIndex", num: SetMesg.wktStepIndexFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
        return mesg
    }
}