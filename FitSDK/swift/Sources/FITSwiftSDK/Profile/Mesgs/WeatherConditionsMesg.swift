/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class WeatherConditionsMesg : Mesg {
    public static let timestampFieldNum:UInt8 = 253
    public static let weatherReportFieldNum:UInt8 = 0
    public static let temperatureFieldNum:UInt8 = 1
    public static let conditionFieldNum:UInt8 = 2
    public static let windDirectionFieldNum:UInt8 = 3
    public static let windSpeedFieldNum:UInt8 = 4
    public static let precipitationProbabilityFieldNum:UInt8 = 5
    public static let temperatureFeelsLikeFieldNum:UInt8 = 6
    public static let relativeHumidityFieldNum:UInt8 = 7
    public static let locationFieldNum:UInt8 = 8
    public static let observedAtTimeFieldNum:UInt8 = 9
    public static let observedLocationLatFieldNum:UInt8 = 10
    public static let observedLocationLongFieldNum:UInt8 = 11
    public static let dayOfWeekFieldNum:UInt8 = 12
    public static let highTemperatureFieldNum:UInt8 = 13
    public static let lowTemperatureFieldNum:UInt8 = 14

	public init() {
        super.init(mesg: WeatherConditionsMesg.createWeatherConditionsMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getTimestamp() -> DateTime? {
		guard let value = getFieldValue(fieldNum: WeatherConditionsMesg.timestampFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setTimestamp(_ value: DateTime) throws {
		try setFieldValue(fieldNum: WeatherConditionsMesg.timestampFieldNum, value: value.timestamp)
	}

	public func getWeatherReport() -> WeatherReport? {
		guard let value = getFieldValue(fieldNum: WeatherConditionsMesg.weatherReportFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return WeatherReport(rawValue: value) ?? .invalid
	}

	public func setWeatherReport(_ value: WeatherReport) throws {
		try setFieldValue(fieldNum: WeatherConditionsMesg.weatherReportFieldNum, value: value.rawValue)
	}

	public func getTemperature() -> Int8? {
		guard let value = getFieldValue(fieldNum: WeatherConditionsMesg.temperatureFieldNum, index:0) as? Int8 else {
            return nil
        }
		return value
	}

	public func setTemperature(_ value: Int8) throws {
		try setFieldValue(fieldNum: WeatherConditionsMesg.temperatureFieldNum, value: value)
	}

	public func getCondition() -> WeatherStatus? {
		guard let value = getFieldValue(fieldNum: WeatherConditionsMesg.conditionFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return WeatherStatus(rawValue: value) ?? .invalid
	}

	public func setCondition(_ value: WeatherStatus) throws {
		try setFieldValue(fieldNum: WeatherConditionsMesg.conditionFieldNum, value: value.rawValue)
	}

	public func getWindDirection() -> UInt16? {
		guard let value = getFieldValue(fieldNum: WeatherConditionsMesg.windDirectionFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setWindDirection(_ value: UInt16) throws {
		try setFieldValue(fieldNum: WeatherConditionsMesg.windDirectionFieldNum, value: value)
	}

	public func getWindSpeed() -> Float64? {
		guard let value = getFieldValue(fieldNum: WeatherConditionsMesg.windSpeedFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setWindSpeed(_ value: Float64) throws {
		try setFieldValue(fieldNum: WeatherConditionsMesg.windSpeedFieldNum, value: value)
	}

	public func getPrecipitationProbability() -> UInt8? {
		guard let value = getFieldValue(fieldNum: WeatherConditionsMesg.precipitationProbabilityFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setPrecipitationProbability(_ value: UInt8) throws {
		try setFieldValue(fieldNum: WeatherConditionsMesg.precipitationProbabilityFieldNum, value: value)
	}

	public func getTemperatureFeelsLike() -> Int8? {
		guard let value = getFieldValue(fieldNum: WeatherConditionsMesg.temperatureFeelsLikeFieldNum, index:0) as? Int8 else {
            return nil
        }
		return value
	}

	public func setTemperatureFeelsLike(_ value: Int8) throws {
		try setFieldValue(fieldNum: WeatherConditionsMesg.temperatureFeelsLikeFieldNum, value: value)
	}

	public func getRelativeHumidity() -> UInt8? {
		guard let value = getFieldValue(fieldNum: WeatherConditionsMesg.relativeHumidityFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setRelativeHumidity(_ value: UInt8) throws {
		try setFieldValue(fieldNum: WeatherConditionsMesg.relativeHumidityFieldNum, value: value)
	}

	public func getLocation() -> String? {
		guard let value = getFieldValue(fieldNum: WeatherConditionsMesg.locationFieldNum, index:0) as? String else {
            return nil
        }
		return value
	}

	public func setLocation(_ value: String) throws {
		try setFieldValue(fieldNum: WeatherConditionsMesg.locationFieldNum, value: value)
	}

	public func getObservedAtTime() -> DateTime? {
		guard let value = getFieldValue(fieldNum: WeatherConditionsMesg.observedAtTimeFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setObservedAtTime(_ value: DateTime) throws {
		try setFieldValue(fieldNum: WeatherConditionsMesg.observedAtTimeFieldNum, value: value.timestamp)
	}

	public func getObservedLocationLat() -> Int32? {
		guard let value = getFieldValue(fieldNum: WeatherConditionsMesg.observedLocationLatFieldNum, index:0) as? Int32 else {
            return nil
        }
		return value
	}

	public func setObservedLocationLat(_ value: Int32) throws {
		try setFieldValue(fieldNum: WeatherConditionsMesg.observedLocationLatFieldNum, value: value)
	}

	public func getObservedLocationLong() -> Int32? {
		guard let value = getFieldValue(fieldNum: WeatherConditionsMesg.observedLocationLongFieldNum, index:0) as? Int32 else {
            return nil
        }
		return value
	}

	public func setObservedLocationLong(_ value: Int32) throws {
		try setFieldValue(fieldNum: WeatherConditionsMesg.observedLocationLongFieldNum, value: value)
	}

	public func getDayOfWeek() -> DayOfWeek? {
		guard let value = getFieldValue(fieldNum: WeatherConditionsMesg.dayOfWeekFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return DayOfWeek(rawValue: value) ?? .invalid
	}

	public func setDayOfWeek(_ value: DayOfWeek) throws {
		try setFieldValue(fieldNum: WeatherConditionsMesg.dayOfWeekFieldNum, value: value.rawValue)
	}

	public func getHighTemperature() -> Int8? {
		guard let value = getFieldValue(fieldNum: WeatherConditionsMesg.highTemperatureFieldNum, index:0) as? Int8 else {
            return nil
        }
		return value
	}

	public func setHighTemperature(_ value: Int8) throws {
		try setFieldValue(fieldNum: WeatherConditionsMesg.highTemperatureFieldNum, value: value)
	}

	public func getLowTemperature() -> Int8? {
		guard let value = getFieldValue(fieldNum: WeatherConditionsMesg.lowTemperatureFieldNum, index:0) as? Int8 else {
            return nil
        }
		return value
	}

	public func setLowTemperature(_ value: Int8) throws {
		try setFieldValue(fieldNum: WeatherConditionsMesg.lowTemperatureFieldNum, value: value)
	}

	public class func createWeatherConditionsMesg() -> WeatherConditionsMesg {
        let mesg = WeatherConditionsMesg(name: "WeatherConditions", num: Profile.MesgNum.weatherConditions)
		
		mesg.fields[WeatherConditionsMesg.timestampFieldNum] = Field(name: "Timestamp", num: WeatherConditionsMesg.timestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[WeatherConditionsMesg.weatherReportFieldNum] = Field(name: "WeatherReport", num: WeatherConditionsMesg.weatherReportFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[WeatherConditionsMesg.temperatureFieldNum] = Field(name: "Temperature", num: WeatherConditionsMesg.temperatureFieldNum, type: BaseType.SINT8.rawValue, scale: 1, offset: 0, units: "C", accumulated: false)
		mesg.fields[WeatherConditionsMesg.conditionFieldNum] = Field(name: "Condition", num: WeatherConditionsMesg.conditionFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[WeatherConditionsMesg.windDirectionFieldNum] = Field(name: "WindDirection", num: WeatherConditionsMesg.windDirectionFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "degrees", accumulated: false)
		mesg.fields[WeatherConditionsMesg.windSpeedFieldNum] = Field(name: "WindSpeed", num: WeatherConditionsMesg.windSpeedFieldNum, type: BaseType.UINT16.rawValue, scale: 1000, offset: 0, units: "m/s", accumulated: false)
		mesg.fields[WeatherConditionsMesg.precipitationProbabilityFieldNum] = Field(name: "PrecipitationProbability", num: WeatherConditionsMesg.precipitationProbabilityFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[WeatherConditionsMesg.temperatureFeelsLikeFieldNum] = Field(name: "TemperatureFeelsLike", num: WeatherConditionsMesg.temperatureFeelsLikeFieldNum, type: BaseType.SINT8.rawValue, scale: 1, offset: 0, units: "C", accumulated: false)
		mesg.fields[WeatherConditionsMesg.relativeHumidityFieldNum] = Field(name: "RelativeHumidity", num: WeatherConditionsMesg.relativeHumidityFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[WeatherConditionsMesg.locationFieldNum] = Field(name: "Location", num: WeatherConditionsMesg.locationFieldNum, type: BaseType.STRING.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[WeatherConditionsMesg.observedAtTimeFieldNum] = Field(name: "ObservedAtTime", num: WeatherConditionsMesg.observedAtTimeFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[WeatherConditionsMesg.observedLocationLatFieldNum] = Field(name: "ObservedLocationLat", num: WeatherConditionsMesg.observedLocationLatFieldNum, type: BaseType.SINT32.rawValue, scale: 1, offset: 0, units: "semicircles", accumulated: false)
		mesg.fields[WeatherConditionsMesg.observedLocationLongFieldNum] = Field(name: "ObservedLocationLong", num: WeatherConditionsMesg.observedLocationLongFieldNum, type: BaseType.SINT32.rawValue, scale: 1, offset: 0, units: "semicircles", accumulated: false)
		mesg.fields[WeatherConditionsMesg.dayOfWeekFieldNum] = Field(name: "DayOfWeek", num: WeatherConditionsMesg.dayOfWeekFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[WeatherConditionsMesg.highTemperatureFieldNum] = Field(name: "HighTemperature", num: WeatherConditionsMesg.highTemperatureFieldNum, type: BaseType.SINT8.rawValue, scale: 1, offset: 0, units: "C", accumulated: false)
		mesg.fields[WeatherConditionsMesg.lowTemperatureFieldNum] = Field(name: "LowTemperature", num: WeatherConditionsMesg.lowTemperatureFieldNum, type: BaseType.SINT8.rawValue, scale: 1, offset: 0, units: "C", accumulated: false)
        return mesg
    }
}