/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class UserProfileMesg : Mesg {
    public static let messageIndexFieldNum:UInt8 = 254
    public static let friendlyNameFieldNum:UInt8 = 0
    public static let genderFieldNum:UInt8 = 1
    public static let ageFieldNum:UInt8 = 2
    public static let heightFieldNum:UInt8 = 3
    public static let weightFieldNum:UInt8 = 4
    public static let languageFieldNum:UInt8 = 5
    public static let elevSettingFieldNum:UInt8 = 6
    public static let weightSettingFieldNum:UInt8 = 7
    public static let restingHeartRateFieldNum:UInt8 = 8
    public static let defaultMaxRunningHeartRateFieldNum:UInt8 = 9
    public static let defaultMaxBikingHeartRateFieldNum:UInt8 = 10
    public static let defaultMaxHeartRateFieldNum:UInt8 = 11
    public static let hrSettingFieldNum:UInt8 = 12
    public static let speedSettingFieldNum:UInt8 = 13
    public static let distSettingFieldNum:UInt8 = 14
    public static let powerSettingFieldNum:UInt8 = 16
    public static let activityClassFieldNum:UInt8 = 17
    public static let positionSettingFieldNum:UInt8 = 18
    public static let temperatureSettingFieldNum:UInt8 = 21
    public static let localIdFieldNum:UInt8 = 22
    public static let globalIdFieldNum:UInt8 = 23
    public static let wakeTimeFieldNum:UInt8 = 28
    public static let sleepTimeFieldNum:UInt8 = 29
    public static let heightSettingFieldNum:UInt8 = 30
    public static let userRunningStepLengthFieldNum:UInt8 = 31
    public static let userWalkingStepLengthFieldNum:UInt8 = 32
    public static let depthSettingFieldNum:UInt8 = 47
    public static let diveCountFieldNum:UInt8 = 49

	public init() {
        super.init(mesg: UserProfileMesg.createUserProfileMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getMessageIndex() -> MessageIndex? {
		guard let value = getFieldValue(fieldNum: UserProfileMesg.messageIndexFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setMessageIndex(_ value: MessageIndex) throws {
		try setFieldValue(fieldNum: UserProfileMesg.messageIndexFieldNum, value: value)
	}

	public func getFriendlyName() -> String? {
		guard let value = getFieldValue(fieldNum: UserProfileMesg.friendlyNameFieldNum, index:0) as? String else {
            return nil
        }
		return value
	}

	public func setFriendlyName(_ value: String) throws {
		try setFieldValue(fieldNum: UserProfileMesg.friendlyNameFieldNum, value: value)
	}

	public func getGender() -> Gender? {
		guard let value = getFieldValue(fieldNum: UserProfileMesg.genderFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return Gender(rawValue: value) ?? .invalid
	}

	public func setGender(_ value: Gender) throws {
		try setFieldValue(fieldNum: UserProfileMesg.genderFieldNum, value: value.rawValue)
	}

	public func getAge() -> UInt8? {
		guard let value = getFieldValue(fieldNum: UserProfileMesg.ageFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setAge(_ value: UInt8) throws {
		try setFieldValue(fieldNum: UserProfileMesg.ageFieldNum, value: value)
	}

	public func getHeight() -> Float64? {
		guard let value = getFieldValue(fieldNum: UserProfileMesg.heightFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setHeight(_ value: Float64) throws {
		try setFieldValue(fieldNum: UserProfileMesg.heightFieldNum, value: value)
	}

	public func getWeight() -> Float64? {
		guard let value = getFieldValue(fieldNum: UserProfileMesg.weightFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setWeight(_ value: Float64) throws {
		try setFieldValue(fieldNum: UserProfileMesg.weightFieldNum, value: value)
	}

	public func getLanguage() -> Language? {
		guard let value = getFieldValue(fieldNum: UserProfileMesg.languageFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return Language(rawValue: value) ?? .invalid
	}

	public func setLanguage(_ value: Language) throws {
		try setFieldValue(fieldNum: UserProfileMesg.languageFieldNum, value: value.rawValue)
	}

	public func getElevSetting() -> DisplayMeasure? {
		guard let value = getFieldValue(fieldNum: UserProfileMesg.elevSettingFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return DisplayMeasure(rawValue: value) ?? .invalid
	}

	public func setElevSetting(_ value: DisplayMeasure) throws {
		try setFieldValue(fieldNum: UserProfileMesg.elevSettingFieldNum, value: value.rawValue)
	}

	public func getWeightSetting() -> DisplayMeasure? {
		guard let value = getFieldValue(fieldNum: UserProfileMesg.weightSettingFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return DisplayMeasure(rawValue: value) ?? .invalid
	}

	public func setWeightSetting(_ value: DisplayMeasure) throws {
		try setFieldValue(fieldNum: UserProfileMesg.weightSettingFieldNum, value: value.rawValue)
	}

	public func getRestingHeartRate() -> UInt8? {
		guard let value = getFieldValue(fieldNum: UserProfileMesg.restingHeartRateFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setRestingHeartRate(_ value: UInt8) throws {
		try setFieldValue(fieldNum: UserProfileMesg.restingHeartRateFieldNum, value: value)
	}

	public func getDefaultMaxRunningHeartRate() -> UInt8? {
		guard let value = getFieldValue(fieldNum: UserProfileMesg.defaultMaxRunningHeartRateFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setDefaultMaxRunningHeartRate(_ value: UInt8) throws {
		try setFieldValue(fieldNum: UserProfileMesg.defaultMaxRunningHeartRateFieldNum, value: value)
	}

	public func getDefaultMaxBikingHeartRate() -> UInt8? {
		guard let value = getFieldValue(fieldNum: UserProfileMesg.defaultMaxBikingHeartRateFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setDefaultMaxBikingHeartRate(_ value: UInt8) throws {
		try setFieldValue(fieldNum: UserProfileMesg.defaultMaxBikingHeartRateFieldNum, value: value)
	}

	public func getDefaultMaxHeartRate() -> UInt8? {
		guard let value = getFieldValue(fieldNum: UserProfileMesg.defaultMaxHeartRateFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setDefaultMaxHeartRate(_ value: UInt8) throws {
		try setFieldValue(fieldNum: UserProfileMesg.defaultMaxHeartRateFieldNum, value: value)
	}

	public func getHrSetting() -> DisplayHeart? {
		guard let value = getFieldValue(fieldNum: UserProfileMesg.hrSettingFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return DisplayHeart(rawValue: value) ?? .invalid
	}

	public func setHrSetting(_ value: DisplayHeart) throws {
		try setFieldValue(fieldNum: UserProfileMesg.hrSettingFieldNum, value: value.rawValue)
	}

	public func getSpeedSetting() -> DisplayMeasure? {
		guard let value = getFieldValue(fieldNum: UserProfileMesg.speedSettingFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return DisplayMeasure(rawValue: value) ?? .invalid
	}

	public func setSpeedSetting(_ value: DisplayMeasure) throws {
		try setFieldValue(fieldNum: UserProfileMesg.speedSettingFieldNum, value: value.rawValue)
	}

	public func getDistSetting() -> DisplayMeasure? {
		guard let value = getFieldValue(fieldNum: UserProfileMesg.distSettingFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return DisplayMeasure(rawValue: value) ?? .invalid
	}

	public func setDistSetting(_ value: DisplayMeasure) throws {
		try setFieldValue(fieldNum: UserProfileMesg.distSettingFieldNum, value: value.rawValue)
	}

	public func getPowerSetting() -> DisplayPower? {
		guard let value = getFieldValue(fieldNum: UserProfileMesg.powerSettingFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return DisplayPower(rawValue: value) ?? .invalid
	}

	public func setPowerSetting(_ value: DisplayPower) throws {
		try setFieldValue(fieldNum: UserProfileMesg.powerSettingFieldNum, value: value.rawValue)
	}

	public func getActivityClass() -> ActivityClass? {
		guard let value = getFieldValue(fieldNum: UserProfileMesg.activityClassFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return ActivityClass(rawValue: value) ?? .invalid
	}

	public func setActivityClass(_ value: ActivityClass) throws {
		try setFieldValue(fieldNum: UserProfileMesg.activityClassFieldNum, value: value.rawValue)
	}

	public func getPositionSetting() -> DisplayPosition? {
		guard let value = getFieldValue(fieldNum: UserProfileMesg.positionSettingFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return DisplayPosition(rawValue: value) ?? .invalid
	}

	public func setPositionSetting(_ value: DisplayPosition) throws {
		try setFieldValue(fieldNum: UserProfileMesg.positionSettingFieldNum, value: value.rawValue)
	}

	public func getTemperatureSetting() -> DisplayMeasure? {
		guard let value = getFieldValue(fieldNum: UserProfileMesg.temperatureSettingFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return DisplayMeasure(rawValue: value) ?? .invalid
	}

	public func setTemperatureSetting(_ value: DisplayMeasure) throws {
		try setFieldValue(fieldNum: UserProfileMesg.temperatureSettingFieldNum, value: value.rawValue)
	}

	public func getLocalId() -> UserLocalId? {
		guard let value = getFieldValue(fieldNum: UserProfileMesg.localIdFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setLocalId(_ value: UserLocalId) throws {
		try setFieldValue(fieldNum: UserProfileMesg.localIdFieldNum, value: value)
	}

	public func getNumGlobalId() -> UInt8 {
		guard let field = getField(fieldNum: UserProfileMesg.globalIdFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getGlobalId() -> [UInt8?]? {
		guard let field = getField(fieldNum: UserProfileMesg.globalIdFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt8?]
	}

	public func getGlobalId(index: Int) -> UInt8? {
		guard let value = getFieldValue(fieldNum: UserProfileMesg.globalIdFieldNum, index: index) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setGlobalId(index: Int, value: UInt8) throws {
		try setFieldValue(fieldNum: UserProfileMesg.globalIdFieldNum, value: value, index: index)
	}

	public func getWakeTime() -> LocaltimeIntoDay? {
		guard let value = getFieldValue(fieldNum: UserProfileMesg.wakeTimeFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setWakeTime(_ value: LocaltimeIntoDay) throws {
		try setFieldValue(fieldNum: UserProfileMesg.wakeTimeFieldNum, value: value)
	}

	public func getSleepTime() -> LocaltimeIntoDay? {
		guard let value = getFieldValue(fieldNum: UserProfileMesg.sleepTimeFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setSleepTime(_ value: LocaltimeIntoDay) throws {
		try setFieldValue(fieldNum: UserProfileMesg.sleepTimeFieldNum, value: value)
	}

	public func getHeightSetting() -> DisplayMeasure? {
		guard let value = getFieldValue(fieldNum: UserProfileMesg.heightSettingFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return DisplayMeasure(rawValue: value) ?? .invalid
	}

	public func setHeightSetting(_ value: DisplayMeasure) throws {
		try setFieldValue(fieldNum: UserProfileMesg.heightSettingFieldNum, value: value.rawValue)
	}

	public func getUserRunningStepLength() -> Float64? {
		guard let value = getFieldValue(fieldNum: UserProfileMesg.userRunningStepLengthFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setUserRunningStepLength(_ value: Float64) throws {
		try setFieldValue(fieldNum: UserProfileMesg.userRunningStepLengthFieldNum, value: value)
	}

	public func getUserWalkingStepLength() -> Float64? {
		guard let value = getFieldValue(fieldNum: UserProfileMesg.userWalkingStepLengthFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setUserWalkingStepLength(_ value: Float64) throws {
		try setFieldValue(fieldNum: UserProfileMesg.userWalkingStepLengthFieldNum, value: value)
	}

	public func getDepthSetting() -> DisplayMeasure? {
		guard let value = getFieldValue(fieldNum: UserProfileMesg.depthSettingFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return DisplayMeasure(rawValue: value) ?? .invalid
	}

	public func setDepthSetting(_ value: DisplayMeasure) throws {
		try setFieldValue(fieldNum: UserProfileMesg.depthSettingFieldNum, value: value.rawValue)
	}

	public func getDiveCount() -> UInt32? {
		guard let value = getFieldValue(fieldNum: UserProfileMesg.diveCountFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setDiveCount(_ value: UInt32) throws {
		try setFieldValue(fieldNum: UserProfileMesg.diveCountFieldNum, value: value)
	}

	public class func createUserProfileMesg() -> UserProfileMesg {
        let mesg = UserProfileMesg(name: "UserProfile", num: Profile.MesgNum.userProfile)
		
		mesg.fields[UserProfileMesg.messageIndexFieldNum] = Field(name: "MessageIndex", num: UserProfileMesg.messageIndexFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[UserProfileMesg.friendlyNameFieldNum] = Field(name: "FriendlyName", num: UserProfileMesg.friendlyNameFieldNum, type: BaseType.STRING.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[UserProfileMesg.genderFieldNum] = Field(name: "Gender", num: UserProfileMesg.genderFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[UserProfileMesg.ageFieldNum] = Field(name: "Age", num: UserProfileMesg.ageFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "years", accumulated: false)
		mesg.fields[UserProfileMesg.heightFieldNum] = Field(name: "Height", num: UserProfileMesg.heightFieldNum, type: BaseType.UINT8.rawValue, scale: 100, offset: 0, units: "m", accumulated: false)
		mesg.fields[UserProfileMesg.weightFieldNum] = Field(name: "Weight", num: UserProfileMesg.weightFieldNum, type: BaseType.UINT16.rawValue, scale: 10, offset: 0, units: "kg", accumulated: false)
		mesg.fields[UserProfileMesg.languageFieldNum] = Field(name: "Language", num: UserProfileMesg.languageFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[UserProfileMesg.elevSettingFieldNum] = Field(name: "ElevSetting", num: UserProfileMesg.elevSettingFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[UserProfileMesg.weightSettingFieldNum] = Field(name: "WeightSetting", num: UserProfileMesg.weightSettingFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[UserProfileMesg.restingHeartRateFieldNum] = Field(name: "RestingHeartRate", num: UserProfileMesg.restingHeartRateFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "bpm", accumulated: false)
		mesg.fields[UserProfileMesg.defaultMaxRunningHeartRateFieldNum] = Field(name: "DefaultMaxRunningHeartRate", num: UserProfileMesg.defaultMaxRunningHeartRateFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "bpm", accumulated: false)
		mesg.fields[UserProfileMesg.defaultMaxBikingHeartRateFieldNum] = Field(name: "DefaultMaxBikingHeartRate", num: UserProfileMesg.defaultMaxBikingHeartRateFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "bpm", accumulated: false)
		mesg.fields[UserProfileMesg.defaultMaxHeartRateFieldNum] = Field(name: "DefaultMaxHeartRate", num: UserProfileMesg.defaultMaxHeartRateFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "bpm", accumulated: false)
		mesg.fields[UserProfileMesg.hrSettingFieldNum] = Field(name: "HrSetting", num: UserProfileMesg.hrSettingFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[UserProfileMesg.speedSettingFieldNum] = Field(name: "SpeedSetting", num: UserProfileMesg.speedSettingFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[UserProfileMesg.distSettingFieldNum] = Field(name: "DistSetting", num: UserProfileMesg.distSettingFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[UserProfileMesg.powerSettingFieldNum] = Field(name: "PowerSetting", num: UserProfileMesg.powerSettingFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[UserProfileMesg.activityClassFieldNum] = Field(name: "ActivityClass", num: UserProfileMesg.activityClassFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[UserProfileMesg.positionSettingFieldNum] = Field(name: "PositionSetting", num: UserProfileMesg.positionSettingFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[UserProfileMesg.temperatureSettingFieldNum] = Field(name: "TemperatureSetting", num: UserProfileMesg.temperatureSettingFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[UserProfileMesg.localIdFieldNum] = Field(name: "LocalId", num: UserProfileMesg.localIdFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[UserProfileMesg.globalIdFieldNum] = Field(name: "GlobalId", num: UserProfileMesg.globalIdFieldNum, type: BaseType.BYTE.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[UserProfileMesg.wakeTimeFieldNum] = Field(name: "WakeTime", num: UserProfileMesg.wakeTimeFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[UserProfileMesg.sleepTimeFieldNum] = Field(name: "SleepTime", num: UserProfileMesg.sleepTimeFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[UserProfileMesg.heightSettingFieldNum] = Field(name: "HeightSetting", num: UserProfileMesg.heightSettingFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[UserProfileMesg.userRunningStepLengthFieldNum] = Field(name: "UserRunningStepLength", num: UserProfileMesg.userRunningStepLengthFieldNum, type: BaseType.UINT16.rawValue, scale: 1000, offset: 0, units: "m", accumulated: false)
		mesg.fields[UserProfileMesg.userWalkingStepLengthFieldNum] = Field(name: "UserWalkingStepLength", num: UserProfileMesg.userWalkingStepLengthFieldNum, type: BaseType.UINT16.rawValue, scale: 1000, offset: 0, units: "m", accumulated: false)
		mesg.fields[UserProfileMesg.depthSettingFieldNum] = Field(name: "DepthSetting", num: UserProfileMesg.depthSettingFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[UserProfileMesg.diveCountFieldNum] = Field(name: "DiveCount", num: UserProfileMesg.diveCountFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
        return mesg
    }
}