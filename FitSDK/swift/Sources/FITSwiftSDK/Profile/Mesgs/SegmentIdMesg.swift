/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class SegmentIdMesg : Mesg {
    public static let nameFieldNum:UInt8 = 0
    public static let uuidFieldNum:UInt8 = 1
    public static let sportFieldNum:UInt8 = 2
    public static let enabledFieldNum:UInt8 = 3
    public static let userProfilePrimaryKeyFieldNum:UInt8 = 4
    public static let deviceIdFieldNum:UInt8 = 5
    public static let defaultRaceLeaderFieldNum:UInt8 = 6
    public static let deleteStatusFieldNum:UInt8 = 7
    public static let selectionTypeFieldNum:UInt8 = 8

	public init() {
        super.init(mesg: SegmentIdMesg.createSegmentIdMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getName() -> String? {
		guard let value = getFieldValue(fieldNum: SegmentIdMesg.nameFieldNum, index:0) as? String else {
            return nil
        }
		return value
	}

	public func setName(_ value: String) throws {
		try setFieldValue(fieldNum: SegmentIdMesg.nameFieldNum, value: value)
	}

	public func getUuid() -> String? {
		guard let value = getFieldValue(fieldNum: SegmentIdMesg.uuidFieldNum, index:0) as? String else {
            return nil
        }
		return value
	}

	public func setUuid(_ value: String) throws {
		try setFieldValue(fieldNum: SegmentIdMesg.uuidFieldNum, value: value)
	}

	public func getSport() -> Sport? {
		guard let value = getFieldValue(fieldNum: SegmentIdMesg.sportFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return Sport(rawValue: value) ?? .invalid
	}

	public func setSport(_ value: Sport) throws {
		try setFieldValue(fieldNum: SegmentIdMesg.sportFieldNum, value: value.rawValue)
	}

	public func getEnabled() -> Bool? {
		guard let value = getFieldValue(fieldNum: SegmentIdMesg.enabledFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value == 1 ? true : false
	}

	public func setEnabled(_ value: Bool) throws {
		try setFieldValue(fieldNum: SegmentIdMesg.enabledFieldNum, value: value)
	}

	public func getUserProfilePrimaryKey() -> UInt32? {
		guard let value = getFieldValue(fieldNum: SegmentIdMesg.userProfilePrimaryKeyFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setUserProfilePrimaryKey(_ value: UInt32) throws {
		try setFieldValue(fieldNum: SegmentIdMesg.userProfilePrimaryKeyFieldNum, value: value)
	}

	public func getDeviceId() -> UInt32? {
		guard let value = getFieldValue(fieldNum: SegmentIdMesg.deviceIdFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setDeviceId(_ value: UInt32) throws {
		try setFieldValue(fieldNum: SegmentIdMesg.deviceIdFieldNum, value: value)
	}

	public func getDefaultRaceLeader() -> UInt8? {
		guard let value = getFieldValue(fieldNum: SegmentIdMesg.defaultRaceLeaderFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setDefaultRaceLeader(_ value: UInt8) throws {
		try setFieldValue(fieldNum: SegmentIdMesg.defaultRaceLeaderFieldNum, value: value)
	}

	public func getDeleteStatus() -> SegmentDeleteStatus? {
		guard let value = getFieldValue(fieldNum: SegmentIdMesg.deleteStatusFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return SegmentDeleteStatus(rawValue: value) ?? .invalid
	}

	public func setDeleteStatus(_ value: SegmentDeleteStatus) throws {
		try setFieldValue(fieldNum: SegmentIdMesg.deleteStatusFieldNum, value: value.rawValue)
	}

	public func getSelectionType() -> SegmentSelectionType? {
		guard let value = getFieldValue(fieldNum: SegmentIdMesg.selectionTypeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return SegmentSelectionType(rawValue: value) ?? .invalid
	}

	public func setSelectionType(_ value: SegmentSelectionType) throws {
		try setFieldValue(fieldNum: SegmentIdMesg.selectionTypeFieldNum, value: value.rawValue)
	}

	public class func createSegmentIdMesg() -> SegmentIdMesg {
        let mesg = SegmentIdMesg(name: "SegmentId", num: Profile.MesgNum.segmentId)
		
		mesg.fields[SegmentIdMesg.nameFieldNum] = Field(name: "Name", num: SegmentIdMesg.nameFieldNum, type: BaseType.STRING.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SegmentIdMesg.uuidFieldNum] = Field(name: "Uuid", num: SegmentIdMesg.uuidFieldNum, type: BaseType.STRING.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SegmentIdMesg.sportFieldNum] = Field(name: "Sport", num: SegmentIdMesg.sportFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SegmentIdMesg.enabledFieldNum] = Field(name: "Enabled", num: SegmentIdMesg.enabledFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SegmentIdMesg.userProfilePrimaryKeyFieldNum] = Field(name: "UserProfilePrimaryKey", num: SegmentIdMesg.userProfilePrimaryKeyFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SegmentIdMesg.deviceIdFieldNum] = Field(name: "DeviceId", num: SegmentIdMesg.deviceIdFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SegmentIdMesg.defaultRaceLeaderFieldNum] = Field(name: "DefaultRaceLeader", num: SegmentIdMesg.defaultRaceLeaderFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SegmentIdMesg.deleteStatusFieldNum] = Field(name: "DeleteStatus", num: SegmentIdMesg.deleteStatusFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SegmentIdMesg.selectionTypeFieldNum] = Field(name: "SelectionType", num: SegmentIdMesg.selectionTypeFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
        return mesg
    }
}