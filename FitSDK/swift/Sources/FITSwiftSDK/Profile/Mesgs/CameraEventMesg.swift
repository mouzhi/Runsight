/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class CameraEventMesg : Mesg {
    public static let timestampFieldNum:UInt8 = 253
    public static let timestampMsFieldNum:UInt8 = 0
    public static let cameraEventTypeFieldNum:UInt8 = 1
    public static let cameraFileUuidFieldNum:UInt8 = 2
    public static let cameraOrientationFieldNum:UInt8 = 3

	public init() {
        super.init(mesg: CameraEventMesg.createCameraEventMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getTimestamp() -> DateTime? {
		guard let value = getFieldValue(fieldNum: CameraEventMesg.timestampFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setTimestamp(_ value: DateTime) throws {
		try setFieldValue(fieldNum: CameraEventMesg.timestampFieldNum, value: value.timestamp)
	}

	public func getTimestampMs() -> UInt16? {
		guard let value = getFieldValue(fieldNum: CameraEventMesg.timestampMsFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setTimestampMs(_ value: UInt16) throws {
		try setFieldValue(fieldNum: CameraEventMesg.timestampMsFieldNum, value: value)
	}

	public func getCameraEventType() -> CameraEventType? {
		guard let value = getFieldValue(fieldNum: CameraEventMesg.cameraEventTypeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return CameraEventType(rawValue: value) ?? .invalid
	}

	public func setCameraEventType(_ value: CameraEventType) throws {
		try setFieldValue(fieldNum: CameraEventMesg.cameraEventTypeFieldNum, value: value.rawValue)
	}

	public func getCameraFileUuid() -> String? {
		guard let value = getFieldValue(fieldNum: CameraEventMesg.cameraFileUuidFieldNum, index:0) as? String else {
            return nil
        }
		return value
	}

	public func setCameraFileUuid(_ value: String) throws {
		try setFieldValue(fieldNum: CameraEventMesg.cameraFileUuidFieldNum, value: value)
	}

	public func getCameraOrientation() -> CameraOrientationType? {
		guard let value = getFieldValue(fieldNum: CameraEventMesg.cameraOrientationFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return CameraOrientationType(rawValue: value) ?? .invalid
	}

	public func setCameraOrientation(_ value: CameraOrientationType) throws {
		try setFieldValue(fieldNum: CameraEventMesg.cameraOrientationFieldNum, value: value.rawValue)
	}

	public class func createCameraEventMesg() -> CameraEventMesg {
        let mesg = CameraEventMesg(name: "CameraEvent", num: Profile.MesgNum.cameraEvent)
		
		mesg.fields[CameraEventMesg.timestampFieldNum] = Field(name: "Timestamp", num: CameraEventMesg.timestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
		mesg.fields[CameraEventMesg.timestampMsFieldNum] = Field(name: "TimestampMs", num: CameraEventMesg.timestampMsFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "ms", accumulated: false)
		mesg.fields[CameraEventMesg.cameraEventTypeFieldNum] = Field(name: "CameraEventType", num: CameraEventMesg.cameraEventTypeFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[CameraEventMesg.cameraFileUuidFieldNum] = Field(name: "CameraFileUuid", num: CameraEventMesg.cameraFileUuidFieldNum, type: BaseType.STRING.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[CameraEventMesg.cameraOrientationFieldNum] = Field(name: "CameraOrientation", num: CameraEventMesg.cameraOrientationFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
        return mesg
    }
}