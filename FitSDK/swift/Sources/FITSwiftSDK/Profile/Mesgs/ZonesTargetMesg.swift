/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class ZonesTargetMesg : Mesg {
    public static let maxHeartRateFieldNum:UInt8 = 1
    public static let thresholdHeartRateFieldNum:UInt8 = 2
    public static let functionalThresholdPowerFieldNum:UInt8 = 3
    public static let hrCalcTypeFieldNum:UInt8 = 5
    public static let pwrCalcTypeFieldNum:UInt8 = 7

	public init() {
        super.init(mesg: ZonesTargetMesg.createZonesTargetMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getMaxHeartRate() -> UInt8? {
		guard let value = getFieldValue(fieldNum: ZonesTargetMesg.maxHeartRateFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setMaxHeartRate(_ value: UInt8) throws {
		try setFieldValue(fieldNum: ZonesTargetMesg.maxHeartRateFieldNum, value: value)
	}

	public func getThresholdHeartRate() -> UInt8? {
		guard let value = getFieldValue(fieldNum: ZonesTargetMesg.thresholdHeartRateFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setThresholdHeartRate(_ value: UInt8) throws {
		try setFieldValue(fieldNum: ZonesTargetMesg.thresholdHeartRateFieldNum, value: value)
	}

	public func getFunctionalThresholdPower() -> UInt16? {
		guard let value = getFieldValue(fieldNum: ZonesTargetMesg.functionalThresholdPowerFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setFunctionalThresholdPower(_ value: UInt16) throws {
		try setFieldValue(fieldNum: ZonesTargetMesg.functionalThresholdPowerFieldNum, value: value)
	}

	public func getHrCalcType() -> HrZoneCalc? {
		guard let value = getFieldValue(fieldNum: ZonesTargetMesg.hrCalcTypeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return HrZoneCalc(rawValue: value) ?? .invalid
	}

	public func setHrCalcType(_ value: HrZoneCalc) throws {
		try setFieldValue(fieldNum: ZonesTargetMesg.hrCalcTypeFieldNum, value: value.rawValue)
	}

	public func getPwrCalcType() -> PwrZoneCalc? {
		guard let value = getFieldValue(fieldNum: ZonesTargetMesg.pwrCalcTypeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return PwrZoneCalc(rawValue: value) ?? .invalid
	}

	public func setPwrCalcType(_ value: PwrZoneCalc) throws {
		try setFieldValue(fieldNum: ZonesTargetMesg.pwrCalcTypeFieldNum, value: value.rawValue)
	}

	public class func createZonesTargetMesg() -> ZonesTargetMesg {
        let mesg = ZonesTargetMesg(name: "ZonesTarget", num: Profile.MesgNum.zonesTarget)
		
		mesg.fields[ZonesTargetMesg.maxHeartRateFieldNum] = Field(name: "MaxHeartRate", num: ZonesTargetMesg.maxHeartRateFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[ZonesTargetMesg.thresholdHeartRateFieldNum] = Field(name: "ThresholdHeartRate", num: ZonesTargetMesg.thresholdHeartRateFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[ZonesTargetMesg.functionalThresholdPowerFieldNum] = Field(name: "FunctionalThresholdPower", num: ZonesTargetMesg.functionalThresholdPowerFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[ZonesTargetMesg.hrCalcTypeFieldNum] = Field(name: "HrCalcType", num: ZonesTargetMesg.hrCalcTypeFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[ZonesTargetMesg.pwrCalcTypeFieldNum] = Field(name: "PwrCalcType", num: ZonesTargetMesg.pwrCalcTypeFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
        return mesg
    }
}