/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class HrvMesg : Mesg {
    public static let timeFieldNum:UInt8 = 0

	public init() {
        super.init(mesg: HrvMesg.createHrvMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getNumTime() -> UInt8 {
		guard let field = getField(fieldNum: HrvMesg.timeFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getTime() -> [Float64?]? {
		guard let field = getField(fieldNum: HrvMesg.timeFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getTime(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: HrvMesg.timeFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTime(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: HrvMesg.timeFieldNum, value: value, index: index)
	}

	public class func createHrvMesg() -> HrvMesg {
        let mesg = HrvMesg(name: "Hrv", num: Profile.MesgNum.hrv)
		
		mesg.fields[HrvMesg.timeFieldNum] = Field(name: "Time", num: HrvMesg.timeFieldNum, type: BaseType.UINT16.rawValue, scale: 1000, offset: 0, units: "s", accumulated: false)
        return mesg
    }
}