/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class MesgCapabilitiesMesg : Mesg {
    public static let messageIndexFieldNum:UInt8 = 254
    public static let fileFieldNum:UInt8 = 0
    public static let mesgNumFieldNum:UInt8 = 1
    public static let countTypeFieldNum:UInt8 = 2
    public static let countFieldNum:UInt8 = 3

	private struct CountSubField {
        public static let numPerFile:UInt16 = 0
        public static let maxPerFile:UInt16 = 1
        public static let maxPerFileType:UInt16 = 2
        public static let subfields:UInt16 = 3
        public static let active:UInt16 = FIT.SUBFIELD_INDEX.ACTIVE_SUBFIELD
        public static let mainField:UInt16 = FIT.SUBFIELD_INDEX.MAIN_FIELD
    }

	public init() {
        super.init(mesg: MesgCapabilitiesMesg.createMesgCapabilitiesMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getMessageIndex() -> MessageIndex? {
		guard let value = getFieldValue(fieldNum: MesgCapabilitiesMesg.messageIndexFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setMessageIndex(_ value: MessageIndex) throws {
		try setFieldValue(fieldNum: MesgCapabilitiesMesg.messageIndexFieldNum, value: value)
	}

	public func getFile() -> File? {
		guard let value = getFieldValue(fieldNum: MesgCapabilitiesMesg.fileFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return File(rawValue: value) ?? .invalid
	}

	public func setFile(_ value: File) throws {
		try setFieldValue(fieldNum: MesgCapabilitiesMesg.fileFieldNum, value: value.rawValue)
	}

	public func getMesgNum() -> MesgNum? {
		guard let value = getFieldValue(fieldNum: MesgCapabilitiesMesg.mesgNumFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return MesgNum(rawValue: value) ?? .invalid
	}

	public func setMesgNum(_ value: MesgNum) throws {
		try setFieldValue(fieldNum: MesgCapabilitiesMesg.mesgNumFieldNum, value: value.rawValue)
	}

	public func getCountType() -> MesgCount? {
		guard let value = getFieldValue(fieldNum: MesgCapabilitiesMesg.countTypeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return MesgCount(rawValue: value) ?? .invalid
	}

	public func setCountType(_ value: MesgCount) throws {
		try setFieldValue(fieldNum: MesgCapabilitiesMesg.countTypeFieldNum, value: value.rawValue)
	}

	public func getCount() -> UInt16? {
		guard let value = getFieldValue(fieldNum: MesgCapabilitiesMesg.countFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setCount(_ value: UInt16) throws {
		try setFieldValue(fieldNum: MesgCapabilitiesMesg.countFieldNum, value: value)
	}

	public func getNumPerFile() throws -> UInt16? {
		guard let value = try getFieldValue(fieldNum: MesgCapabilitiesMesg.countFieldNum, index: 0, subFieldIndex: CountSubField.numPerFile).map({UInt16(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setNumPerFile(_ value: UInt16) throws {
		try setFieldValue(fieldNum: MesgCapabilitiesMesg.countFieldNum, value: value, index: 0, subFieldIndex: CountSubField.numPerFile )
	}

	public func getMaxPerFile() throws -> UInt16? {
		guard let value = try getFieldValue(fieldNum: MesgCapabilitiesMesg.countFieldNum, index: 0, subFieldIndex: CountSubField.maxPerFile).map({UInt16(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setMaxPerFile(_ value: UInt16) throws {
		try setFieldValue(fieldNum: MesgCapabilitiesMesg.countFieldNum, value: value, index: 0, subFieldIndex: CountSubField.maxPerFile )
	}

	public func getMaxPerFileType() throws -> UInt16? {
		guard let value = try getFieldValue(fieldNum: MesgCapabilitiesMesg.countFieldNum, index: 0, subFieldIndex: CountSubField.maxPerFileType).map({UInt16(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setMaxPerFileType(_ value: UInt16) throws {
		try setFieldValue(fieldNum: MesgCapabilitiesMesg.countFieldNum, value: value, index: 0, subFieldIndex: CountSubField.maxPerFileType )
	}

	public class func createMesgCapabilitiesMesg() -> MesgCapabilitiesMesg {
        let mesg = MesgCapabilitiesMesg(name: "MesgCapabilities", num: Profile.MesgNum.mesgCapabilities)
		
		mesg.fields[MesgCapabilitiesMesg.messageIndexFieldNum] = Field(name: "MessageIndex", num: MesgCapabilitiesMesg.messageIndexFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[MesgCapabilitiesMesg.fileFieldNum] = Field(name: "File", num: MesgCapabilitiesMesg.fileFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[MesgCapabilitiesMesg.mesgNumFieldNum] = Field(name: "MesgNum", num: MesgCapabilitiesMesg.mesgNumFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[MesgCapabilitiesMesg.countTypeFieldNum] = Field(name: "CountType", num: MesgCapabilitiesMesg.countTypeFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[MesgCapabilitiesMesg.countFieldNum] = Field(name: "Count", num: MesgCapabilitiesMesg.countFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
        mesg.fields[MesgCapabilitiesMesg.countFieldNum]?.subFields.append(SubField(name: "NumPerFile", type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: ""))
        mesg.fields[MesgCapabilitiesMesg.countFieldNum]?.subFields[Int(CountSubField.numPerFile)].addMap(refFieldNum: 2, refFieldValue: 0)
        mesg.fields[MesgCapabilitiesMesg.countFieldNum]?.subFields.append(SubField(name: "MaxPerFile", type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: ""))
        mesg.fields[MesgCapabilitiesMesg.countFieldNum]?.subFields[Int(CountSubField.maxPerFile)].addMap(refFieldNum: 2, refFieldValue: 1)
        mesg.fields[MesgCapabilitiesMesg.countFieldNum]?.subFields.append(SubField(name: "MaxPerFileType", type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: ""))
        mesg.fields[MesgCapabilitiesMesg.countFieldNum]?.subFields[Int(CountSubField.maxPerFileType)].addMap(refFieldNum: 2, refFieldValue: 2)
        return mesg
    }
}