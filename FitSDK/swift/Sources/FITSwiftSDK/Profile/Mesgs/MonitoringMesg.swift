/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class MonitoringMesg : Mesg {
    public static let timestampFieldNum:UInt8 = 253
    public static let deviceIndexFieldNum:UInt8 = 0
    public static let caloriesFieldNum:UInt8 = 1
    public static let distanceFieldNum:UInt8 = 2
    public static let cyclesFieldNum:UInt8 = 3
    public static let activeTimeFieldNum:UInt8 = 4
    public static let activityTypeFieldNum:UInt8 = 5
    public static let activitySubtypeFieldNum:UInt8 = 6
    public static let activityLevelFieldNum:UInt8 = 7
    public static let distance16FieldNum:UInt8 = 8
    public static let cycles16FieldNum:UInt8 = 9
    public static let activeTime16FieldNum:UInt8 = 10
    public static let localTimestampFieldNum:UInt8 = 11
    public static let temperatureFieldNum:UInt8 = 12
    public static let temperatureMinFieldNum:UInt8 = 14
    public static let temperatureMaxFieldNum:UInt8 = 15
    public static let activityTimeFieldNum:UInt8 = 16
    public static let activeCaloriesFieldNum:UInt8 = 19
    public static let currentActivityTypeIntensityFieldNum:UInt8 = 24
    public static let timestampMin8FieldNum:UInt8 = 25
    public static let timestamp16FieldNum:UInt8 = 26
    public static let heartRateFieldNum:UInt8 = 27
    public static let intensityFieldNum:UInt8 = 28
    public static let durationMinFieldNum:UInt8 = 29
    public static let durationFieldNum:UInt8 = 30
    public static let ascentFieldNum:UInt8 = 31
    public static let descentFieldNum:UInt8 = 32
    public static let moderateActivityMinutesFieldNum:UInt8 = 33
    public static let vigorousActivityMinutesFieldNum:UInt8 = 34

	private struct CyclesSubField {
        public static let steps:UInt16 = 0
        public static let strokes:UInt16 = 1
        public static let subfields:UInt16 = 2
        public static let active:UInt16 = FIT.SUBFIELD_INDEX.ACTIVE_SUBFIELD
        public static let mainField:UInt16 = FIT.SUBFIELD_INDEX.MAIN_FIELD
    }

	public init() {
        super.init(mesg: MonitoringMesg.createMonitoringMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getTimestamp() -> DateTime? {
		guard let value = getFieldValue(fieldNum: MonitoringMesg.timestampFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setTimestamp(_ value: DateTime) throws {
		try setFieldValue(fieldNum: MonitoringMesg.timestampFieldNum, value: value.timestamp)
	}

	public func getDeviceIndex() -> DeviceIndex? {
		guard let value = getFieldValue(fieldNum: MonitoringMesg.deviceIndexFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setDeviceIndex(_ value: DeviceIndex) throws {
		try setFieldValue(fieldNum: MonitoringMesg.deviceIndexFieldNum, value: value)
	}

	public func getCalories() -> UInt16? {
		guard let value = getFieldValue(fieldNum: MonitoringMesg.caloriesFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setCalories(_ value: UInt16) throws {
		try setFieldValue(fieldNum: MonitoringMesg.caloriesFieldNum, value: value)
	}

	public func getDistance() -> Float64? {
		guard let value = getFieldValue(fieldNum: MonitoringMesg.distanceFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setDistance(_ value: Float64) throws {
		try setFieldValue(fieldNum: MonitoringMesg.distanceFieldNum, value: value)
	}

	public func getCycles() -> Float64? {
		guard let value = getFieldValue(fieldNum: MonitoringMesg.cyclesFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setCycles(_ value: Float64) throws {
		try setFieldValue(fieldNum: MonitoringMesg.cyclesFieldNum, value: value)
	}

	public func getSteps() throws -> UInt32? {
		guard let value = try getFieldValue(fieldNum: MonitoringMesg.cyclesFieldNum, index: 0, subFieldIndex: CyclesSubField.steps).map({UInt32(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setSteps(_ value: UInt32) throws {
		try setFieldValue(fieldNum: MonitoringMesg.cyclesFieldNum, value: value, index: 0, subFieldIndex: CyclesSubField.steps )
	}

	public func getStrokes() throws -> Float64? {
		guard let value = try getFieldValue(fieldNum: MonitoringMesg.cyclesFieldNum, index: 0, subFieldIndex: CyclesSubField.strokes).map({Float64(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setStrokes(_ value: Float64) throws {
		try setFieldValue(fieldNum: MonitoringMesg.cyclesFieldNum, value: value, index: 0, subFieldIndex: CyclesSubField.strokes )
	}

	public func getActiveTime() -> Float64? {
		guard let value = getFieldValue(fieldNum: MonitoringMesg.activeTimeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setActiveTime(_ value: Float64) throws {
		try setFieldValue(fieldNum: MonitoringMesg.activeTimeFieldNum, value: value)
	}

	public func getActivityType() -> ActivityType? {
		guard let value = getFieldValue(fieldNum: MonitoringMesg.activityTypeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return ActivityType(rawValue: value) ?? .invalid
	}

	public func setActivityType(_ value: ActivityType) throws {
		try setFieldValue(fieldNum: MonitoringMesg.activityTypeFieldNum, value: value.rawValue)
	}

	public func getActivitySubtype() -> ActivitySubtype? {
		guard let value = getFieldValue(fieldNum: MonitoringMesg.activitySubtypeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return ActivitySubtype(rawValue: value) ?? .invalid
	}

	public func setActivitySubtype(_ value: ActivitySubtype) throws {
		try setFieldValue(fieldNum: MonitoringMesg.activitySubtypeFieldNum, value: value.rawValue)
	}

	public func getActivityLevel() -> ActivityLevel? {
		guard let value = getFieldValue(fieldNum: MonitoringMesg.activityLevelFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return ActivityLevel(rawValue: value) ?? .invalid
	}

	public func setActivityLevel(_ value: ActivityLevel) throws {
		try setFieldValue(fieldNum: MonitoringMesg.activityLevelFieldNum, value: value.rawValue)
	}

	public func getDistance16() -> UInt16? {
		guard let value = getFieldValue(fieldNum: MonitoringMesg.distance16FieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setDistance16(_ value: UInt16) throws {
		try setFieldValue(fieldNum: MonitoringMesg.distance16FieldNum, value: value)
	}

	public func getCycles16() -> UInt16? {
		guard let value = getFieldValue(fieldNum: MonitoringMesg.cycles16FieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setCycles16(_ value: UInt16) throws {
		try setFieldValue(fieldNum: MonitoringMesg.cycles16FieldNum, value: value)
	}

	public func getActiveTime16() -> UInt16? {
		guard let value = getFieldValue(fieldNum: MonitoringMesg.activeTime16FieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setActiveTime16(_ value: UInt16) throws {
		try setFieldValue(fieldNum: MonitoringMesg.activeTime16FieldNum, value: value)
	}

	public func getLocalTimestamp() -> LocalDateTime? {
		guard let value = getFieldValue(fieldNum: MonitoringMesg.localTimestampFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setLocalTimestamp(_ value: LocalDateTime) throws {
		try setFieldValue(fieldNum: MonitoringMesg.localTimestampFieldNum, value: value)
	}

	public func getTemperature() -> Float64? {
		guard let value = getFieldValue(fieldNum: MonitoringMesg.temperatureFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTemperature(_ value: Float64) throws {
		try setFieldValue(fieldNum: MonitoringMesg.temperatureFieldNum, value: value)
	}

	public func getTemperatureMin() -> Float64? {
		guard let value = getFieldValue(fieldNum: MonitoringMesg.temperatureMinFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTemperatureMin(_ value: Float64) throws {
		try setFieldValue(fieldNum: MonitoringMesg.temperatureMinFieldNum, value: value)
	}

	public func getTemperatureMax() -> Float64? {
		guard let value = getFieldValue(fieldNum: MonitoringMesg.temperatureMaxFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTemperatureMax(_ value: Float64) throws {
		try setFieldValue(fieldNum: MonitoringMesg.temperatureMaxFieldNum, value: value)
	}

	public func getNumActivityTime() -> UInt8 {
		guard let field = getField(fieldNum: MonitoringMesg.activityTimeFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getActivityTime() -> [UInt16?]? {
		guard let field = getField(fieldNum: MonitoringMesg.activityTimeFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt16?]
	}

	public func getActivityTime(index: Int) -> UInt16? {
		guard let value = getFieldValue(fieldNum: MonitoringMesg.activityTimeFieldNum, index: index) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setActivityTime(index: Int, value: UInt16) throws {
		try setFieldValue(fieldNum: MonitoringMesg.activityTimeFieldNum, value: value, index: index)
	}

	public func getActiveCalories() -> UInt16? {
		guard let value = getFieldValue(fieldNum: MonitoringMesg.activeCaloriesFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setActiveCalories(_ value: UInt16) throws {
		try setFieldValue(fieldNum: MonitoringMesg.activeCaloriesFieldNum, value: value)
	}

	public func getCurrentActivityTypeIntensity() -> UInt8? {
		guard let value = getFieldValue(fieldNum: MonitoringMesg.currentActivityTypeIntensityFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setCurrentActivityTypeIntensity(_ value: UInt8) throws {
		try setFieldValue(fieldNum: MonitoringMesg.currentActivityTypeIntensityFieldNum, value: value)
	}

	public func getTimestampMin8() -> UInt8? {
		guard let value = getFieldValue(fieldNum: MonitoringMesg.timestampMin8FieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setTimestampMin8(_ value: UInt8) throws {
		try setFieldValue(fieldNum: MonitoringMesg.timestampMin8FieldNum, value: value)
	}

	public func getTimestamp16() -> UInt16? {
		guard let value = getFieldValue(fieldNum: MonitoringMesg.timestamp16FieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setTimestamp16(_ value: UInt16) throws {
		try setFieldValue(fieldNum: MonitoringMesg.timestamp16FieldNum, value: value)
	}

	public func getHeartRate() -> UInt8? {
		guard let value = getFieldValue(fieldNum: MonitoringMesg.heartRateFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setHeartRate(_ value: UInt8) throws {
		try setFieldValue(fieldNum: MonitoringMesg.heartRateFieldNum, value: value)
	}

	public func getIntensity() -> Float64? {
		guard let value = getFieldValue(fieldNum: MonitoringMesg.intensityFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setIntensity(_ value: Float64) throws {
		try setFieldValue(fieldNum: MonitoringMesg.intensityFieldNum, value: value)
	}

	public func getDurationMin() -> UInt16? {
		guard let value = getFieldValue(fieldNum: MonitoringMesg.durationMinFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setDurationMin(_ value: UInt16) throws {
		try setFieldValue(fieldNum: MonitoringMesg.durationMinFieldNum, value: value)
	}

	public func getDuration() -> UInt32? {
		guard let value = getFieldValue(fieldNum: MonitoringMesg.durationFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setDuration(_ value: UInt32) throws {
		try setFieldValue(fieldNum: MonitoringMesg.durationFieldNum, value: value)
	}

	public func getAscent() -> Float64? {
		guard let value = getFieldValue(fieldNum: MonitoringMesg.ascentFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAscent(_ value: Float64) throws {
		try setFieldValue(fieldNum: MonitoringMesg.ascentFieldNum, value: value)
	}

	public func getDescent() -> Float64? {
		guard let value = getFieldValue(fieldNum: MonitoringMesg.descentFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setDescent(_ value: Float64) throws {
		try setFieldValue(fieldNum: MonitoringMesg.descentFieldNum, value: value)
	}

	public func getModerateActivityMinutes() -> UInt16? {
		guard let value = getFieldValue(fieldNum: MonitoringMesg.moderateActivityMinutesFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setModerateActivityMinutes(_ value: UInt16) throws {
		try setFieldValue(fieldNum: MonitoringMesg.moderateActivityMinutesFieldNum, value: value)
	}

	public func getVigorousActivityMinutes() -> UInt16? {
		guard let value = getFieldValue(fieldNum: MonitoringMesg.vigorousActivityMinutesFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setVigorousActivityMinutes(_ value: UInt16) throws {
		try setFieldValue(fieldNum: MonitoringMesg.vigorousActivityMinutesFieldNum, value: value)
	}

	public class func createMonitoringMesg() -> MonitoringMesg {
        let mesg = MonitoringMesg(name: "Monitoring", num: Profile.MesgNum.monitoring)
		
		mesg.fields[MonitoringMesg.timestampFieldNum] = Field(name: "Timestamp", num: MonitoringMesg.timestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
		mesg.fields[MonitoringMesg.deviceIndexFieldNum] = Field(name: "DeviceIndex", num: MonitoringMesg.deviceIndexFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[MonitoringMesg.caloriesFieldNum] = Field(name: "Calories", num: MonitoringMesg.caloriesFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "kcal", accumulated: false)
		mesg.fields[MonitoringMesg.distanceFieldNum] = Field(name: "Distance", num: MonitoringMesg.distanceFieldNum, type: BaseType.UINT32.rawValue, scale: 100, offset: 0, units: "m", accumulated: false)
		mesg.fields[MonitoringMesg.cyclesFieldNum] = Field(name: "Cycles", num: MonitoringMesg.cyclesFieldNum, type: BaseType.UINT32.rawValue, scale: 2, offset: 0, units: "cycles", accumulated: false)
        mesg.fields[MonitoringMesg.cyclesFieldNum]?.subFields.append(SubField(name: "Steps", type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "steps"))
        mesg.fields[MonitoringMesg.cyclesFieldNum]?.subFields[Int(CyclesSubField.steps)].addMap(refFieldNum: 5, refFieldValue: 6)
        mesg.fields[MonitoringMesg.cyclesFieldNum]?.subFields[Int(CyclesSubField.steps)].addMap(refFieldNum: 5, refFieldValue: 1)
        mesg.fields[MonitoringMesg.cyclesFieldNum]?.subFields.append(SubField(name: "Strokes", type: BaseType.UINT32.rawValue, scale: 2, offset: 0, units: "strokes"))
        mesg.fields[MonitoringMesg.cyclesFieldNum]?.subFields[Int(CyclesSubField.strokes)].addMap(refFieldNum: 5, refFieldValue: 2)
        mesg.fields[MonitoringMesg.cyclesFieldNum]?.subFields[Int(CyclesSubField.strokes)].addMap(refFieldNum: 5, refFieldValue: 5)
		mesg.fields[MonitoringMesg.activeTimeFieldNum] = Field(name: "ActiveTime", num: MonitoringMesg.activeTimeFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "s", accumulated: false)
		mesg.fields[MonitoringMesg.activityTypeFieldNum] = Field(name: "ActivityType", num: MonitoringMesg.activityTypeFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[MonitoringMesg.activitySubtypeFieldNum] = Field(name: "ActivitySubtype", num: MonitoringMesg.activitySubtypeFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[MonitoringMesg.activityLevelFieldNum] = Field(name: "ActivityLevel", num: MonitoringMesg.activityLevelFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[MonitoringMesg.distance16FieldNum] = Field(name: "Distance16", num: MonitoringMesg.distance16FieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "100 * m", accumulated: false)
		mesg.fields[MonitoringMesg.cycles16FieldNum] = Field(name: "Cycles16", num: MonitoringMesg.cycles16FieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "2 * cycles (steps)", accumulated: false)
		mesg.fields[MonitoringMesg.activeTime16FieldNum] = Field(name: "ActiveTime16", num: MonitoringMesg.activeTime16FieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
		mesg.fields[MonitoringMesg.localTimestampFieldNum] = Field(name: "LocalTimestamp", num: MonitoringMesg.localTimestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[MonitoringMesg.temperatureFieldNum] = Field(name: "Temperature", num: MonitoringMesg.temperatureFieldNum, type: BaseType.SINT16.rawValue, scale: 100, offset: 0, units: "C", accumulated: false)
		mesg.fields[MonitoringMesg.temperatureMinFieldNum] = Field(name: "TemperatureMin", num: MonitoringMesg.temperatureMinFieldNum, type: BaseType.SINT16.rawValue, scale: 100, offset: 0, units: "C", accumulated: false)
		mesg.fields[MonitoringMesg.temperatureMaxFieldNum] = Field(name: "TemperatureMax", num: MonitoringMesg.temperatureMaxFieldNum, type: BaseType.SINT16.rawValue, scale: 100, offset: 0, units: "C", accumulated: false)
		mesg.fields[MonitoringMesg.activityTimeFieldNum] = Field(name: "ActivityTime", num: MonitoringMesg.activityTimeFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "minutes", accumulated: false)
		mesg.fields[MonitoringMesg.activeCaloriesFieldNum] = Field(name: "ActiveCalories", num: MonitoringMesg.activeCaloriesFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "kcal", accumulated: false)
		mesg.fields[MonitoringMesg.currentActivityTypeIntensityFieldNum] = Field(name: "CurrentActivityTypeIntensity", num: MonitoringMesg.currentActivityTypeIntensityFieldNum, type: BaseType.BYTE.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[MonitoringMesg.currentActivityTypeIntensityFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: activityTypeFieldNum, accumulated: false, bits: 5, scale: 1, offset: 0))
		mesg.fields[MonitoringMesg.currentActivityTypeIntensityFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: intensityFieldNum, accumulated: false, bits: 3, scale: 1, offset: 0))
		mesg.fields[MonitoringMesg.timestampMin8FieldNum] = Field(name: "TimestampMin8", num: MonitoringMesg.timestampMin8FieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "min", accumulated: false)
		mesg.fields[MonitoringMesg.timestamp16FieldNum] = Field(name: "Timestamp16", num: MonitoringMesg.timestamp16FieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
		mesg.fields[MonitoringMesg.heartRateFieldNum] = Field(name: "HeartRate", num: MonitoringMesg.heartRateFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "bpm", accumulated: false)
		mesg.fields[MonitoringMesg.intensityFieldNum] = Field(name: "Intensity", num: MonitoringMesg.intensityFieldNum, type: BaseType.UINT8.rawValue, scale: 10, offset: 0, units: "", accumulated: false)
		mesg.fields[MonitoringMesg.durationMinFieldNum] = Field(name: "DurationMin", num: MonitoringMesg.durationMinFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "min", accumulated: false)
		mesg.fields[MonitoringMesg.durationFieldNum] = Field(name: "Duration", num: MonitoringMesg.durationFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
		mesg.fields[MonitoringMesg.ascentFieldNum] = Field(name: "Ascent", num: MonitoringMesg.ascentFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "m", accumulated: false)
		mesg.fields[MonitoringMesg.descentFieldNum] = Field(name: "Descent", num: MonitoringMesg.descentFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "m", accumulated: false)
		mesg.fields[MonitoringMesg.moderateActivityMinutesFieldNum] = Field(name: "ModerateActivityMinutes", num: MonitoringMesg.moderateActivityMinutesFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "minutes", accumulated: false)
		mesg.fields[MonitoringMesg.vigorousActivityMinutesFieldNum] = Field(name: "VigorousActivityMinutes", num: MonitoringMesg.vigorousActivityMinutesFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "minutes", accumulated: false)
        return mesg
    }
}