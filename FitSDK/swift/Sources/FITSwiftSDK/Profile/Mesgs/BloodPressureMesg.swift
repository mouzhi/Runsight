/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class BloodPressureMesg : Mesg {
    public static let timestampFieldNum:UInt8 = 253
    public static let systolicPressureFieldNum:UInt8 = 0
    public static let diastolicPressureFieldNum:UInt8 = 1
    public static let meanArterialPressureFieldNum:UInt8 = 2
    public static let map3SampleMeanFieldNum:UInt8 = 3
    public static let mapMorningValuesFieldNum:UInt8 = 4
    public static let mapEveningValuesFieldNum:UInt8 = 5
    public static let heartRateFieldNum:UInt8 = 6
    public static let heartRateTypeFieldNum:UInt8 = 7
    public static let statusFieldNum:UInt8 = 8
    public static let userProfileIndexFieldNum:UInt8 = 9

	public init() {
        super.init(mesg: BloodPressureMesg.createBloodPressureMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getTimestamp() -> DateTime? {
		guard let value = getFieldValue(fieldNum: BloodPressureMesg.timestampFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setTimestamp(_ value: DateTime) throws {
		try setFieldValue(fieldNum: BloodPressureMesg.timestampFieldNum, value: value.timestamp)
	}

	public func getSystolicPressure() -> UInt16? {
		guard let value = getFieldValue(fieldNum: BloodPressureMesg.systolicPressureFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setSystolicPressure(_ value: UInt16) throws {
		try setFieldValue(fieldNum: BloodPressureMesg.systolicPressureFieldNum, value: value)
	}

	public func getDiastolicPressure() -> UInt16? {
		guard let value = getFieldValue(fieldNum: BloodPressureMesg.diastolicPressureFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setDiastolicPressure(_ value: UInt16) throws {
		try setFieldValue(fieldNum: BloodPressureMesg.diastolicPressureFieldNum, value: value)
	}

	public func getMeanArterialPressure() -> UInt16? {
		guard let value = getFieldValue(fieldNum: BloodPressureMesg.meanArterialPressureFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setMeanArterialPressure(_ value: UInt16) throws {
		try setFieldValue(fieldNum: BloodPressureMesg.meanArterialPressureFieldNum, value: value)
	}

	public func getMap3SampleMean() -> UInt16? {
		guard let value = getFieldValue(fieldNum: BloodPressureMesg.map3SampleMeanFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setMap3SampleMean(_ value: UInt16) throws {
		try setFieldValue(fieldNum: BloodPressureMesg.map3SampleMeanFieldNum, value: value)
	}

	public func getMapMorningValues() -> UInt16? {
		guard let value = getFieldValue(fieldNum: BloodPressureMesg.mapMorningValuesFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setMapMorningValues(_ value: UInt16) throws {
		try setFieldValue(fieldNum: BloodPressureMesg.mapMorningValuesFieldNum, value: value)
	}

	public func getMapEveningValues() -> UInt16? {
		guard let value = getFieldValue(fieldNum: BloodPressureMesg.mapEveningValuesFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setMapEveningValues(_ value: UInt16) throws {
		try setFieldValue(fieldNum: BloodPressureMesg.mapEveningValuesFieldNum, value: value)
	}

	public func getHeartRate() -> UInt8? {
		guard let value = getFieldValue(fieldNum: BloodPressureMesg.heartRateFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setHeartRate(_ value: UInt8) throws {
		try setFieldValue(fieldNum: BloodPressureMesg.heartRateFieldNum, value: value)
	}

	public func getHeartRateType() -> HrType? {
		guard let value = getFieldValue(fieldNum: BloodPressureMesg.heartRateTypeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return HrType(rawValue: value) ?? .invalid
	}

	public func setHeartRateType(_ value: HrType) throws {
		try setFieldValue(fieldNum: BloodPressureMesg.heartRateTypeFieldNum, value: value.rawValue)
	}

	public func getStatus() -> BpStatus? {
		guard let value = getFieldValue(fieldNum: BloodPressureMesg.statusFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return BpStatus(rawValue: value) ?? .invalid
	}

	public func setStatus(_ value: BpStatus) throws {
		try setFieldValue(fieldNum: BloodPressureMesg.statusFieldNum, value: value.rawValue)
	}

	public func getUserProfileIndex() -> MessageIndex? {
		guard let value = getFieldValue(fieldNum: BloodPressureMesg.userProfileIndexFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setUserProfileIndex(_ value: MessageIndex) throws {
		try setFieldValue(fieldNum: BloodPressureMesg.userProfileIndexFieldNum, value: value)
	}

	public class func createBloodPressureMesg() -> BloodPressureMesg {
        let mesg = BloodPressureMesg(name: "BloodPressure", num: Profile.MesgNum.bloodPressure)
		
		mesg.fields[BloodPressureMesg.timestampFieldNum] = Field(name: "Timestamp", num: BloodPressureMesg.timestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
		mesg.fields[BloodPressureMesg.systolicPressureFieldNum] = Field(name: "SystolicPressure", num: BloodPressureMesg.systolicPressureFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "mmHg", accumulated: false)
		mesg.fields[BloodPressureMesg.diastolicPressureFieldNum] = Field(name: "DiastolicPressure", num: BloodPressureMesg.diastolicPressureFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "mmHg", accumulated: false)
		mesg.fields[BloodPressureMesg.meanArterialPressureFieldNum] = Field(name: "MeanArterialPressure", num: BloodPressureMesg.meanArterialPressureFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "mmHg", accumulated: false)
		mesg.fields[BloodPressureMesg.map3SampleMeanFieldNum] = Field(name: "Map3SampleMean", num: BloodPressureMesg.map3SampleMeanFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "mmHg", accumulated: false)
		mesg.fields[BloodPressureMesg.mapMorningValuesFieldNum] = Field(name: "MapMorningValues", num: BloodPressureMesg.mapMorningValuesFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "mmHg", accumulated: false)
		mesg.fields[BloodPressureMesg.mapEveningValuesFieldNum] = Field(name: "MapEveningValues", num: BloodPressureMesg.mapEveningValuesFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "mmHg", accumulated: false)
		mesg.fields[BloodPressureMesg.heartRateFieldNum] = Field(name: "HeartRate", num: BloodPressureMesg.heartRateFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "bpm", accumulated: false)
		mesg.fields[BloodPressureMesg.heartRateTypeFieldNum] = Field(name: "HeartRateType", num: BloodPressureMesg.heartRateTypeFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[BloodPressureMesg.statusFieldNum] = Field(name: "Status", num: BloodPressureMesg.statusFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[BloodPressureMesg.userProfileIndexFieldNum] = Field(name: "UserProfileIndex", num: BloodPressureMesg.userProfileIndexFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
        return mesg
    }
}