/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class GoalMesg : Mesg {
    public static let messageIndexFieldNum:UInt8 = 254
    public static let sportFieldNum:UInt8 = 0
    public static let subSportFieldNum:UInt8 = 1
    public static let startDateFieldNum:UInt8 = 2
    public static let endDateFieldNum:UInt8 = 3
    public static let typeFieldNum:UInt8 = 4
    public static let valueFieldNum:UInt8 = 5
    public static let repeatFieldNum:UInt8 = 6
    public static let targetValueFieldNum:UInt8 = 7
    public static let recurrenceFieldNum:UInt8 = 8
    public static let recurrenceValueFieldNum:UInt8 = 9
    public static let enabledFieldNum:UInt8 = 10
    public static let sourceFieldNum:UInt8 = 11

	public init() {
        super.init(mesg: GoalMesg.createGoalMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getMessageIndex() -> MessageIndex? {
		guard let value = getFieldValue(fieldNum: GoalMesg.messageIndexFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setMessageIndex(_ value: MessageIndex) throws {
		try setFieldValue(fieldNum: GoalMesg.messageIndexFieldNum, value: value)
	}

	public func getSport() -> Sport? {
		guard let value = getFieldValue(fieldNum: GoalMesg.sportFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return Sport(rawValue: value) ?? .invalid
	}

	public func setSport(_ value: Sport) throws {
		try setFieldValue(fieldNum: GoalMesg.sportFieldNum, value: value.rawValue)
	}

	public func getSubSport() -> SubSport? {
		guard let value = getFieldValue(fieldNum: GoalMesg.subSportFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return SubSport(rawValue: value) ?? .invalid
	}

	public func setSubSport(_ value: SubSport) throws {
		try setFieldValue(fieldNum: GoalMesg.subSportFieldNum, value: value.rawValue)
	}

	public func getStartDate() -> DateTime? {
		guard let value = getFieldValue(fieldNum: GoalMesg.startDateFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setStartDate(_ value: DateTime) throws {
		try setFieldValue(fieldNum: GoalMesg.startDateFieldNum, value: value.timestamp)
	}

	public func getEndDate() -> DateTime? {
		guard let value = getFieldValue(fieldNum: GoalMesg.endDateFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setEndDate(_ value: DateTime) throws {
		try setFieldValue(fieldNum: GoalMesg.endDateFieldNum, value: value.timestamp)
	}

	public func getType() -> Goal? {
		guard let value = getFieldValue(fieldNum: GoalMesg.typeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return Goal(rawValue: value) ?? .invalid
	}

	public func setType(_ value: Goal) throws {
		try setFieldValue(fieldNum: GoalMesg.typeFieldNum, value: value.rawValue)
	}

	public func getValue() -> UInt32? {
		guard let value = getFieldValue(fieldNum: GoalMesg.valueFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setValue(_ value: UInt32) throws {
		try setFieldValue(fieldNum: GoalMesg.valueFieldNum, value: value)
	}

	public func getRepeat() -> Bool? {
		guard let value = getFieldValue(fieldNum: GoalMesg.repeatFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value == 1 ? true : false
	}

	public func setRepeat(_ value: Bool) throws {
		try setFieldValue(fieldNum: GoalMesg.repeatFieldNum, value: value)
	}

	public func getTargetValue() -> UInt32? {
		guard let value = getFieldValue(fieldNum: GoalMesg.targetValueFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setTargetValue(_ value: UInt32) throws {
		try setFieldValue(fieldNum: GoalMesg.targetValueFieldNum, value: value)
	}

	public func getRecurrence() -> GoalRecurrence? {
		guard let value = getFieldValue(fieldNum: GoalMesg.recurrenceFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return GoalRecurrence(rawValue: value) ?? .invalid
	}

	public func setRecurrence(_ value: GoalRecurrence) throws {
		try setFieldValue(fieldNum: GoalMesg.recurrenceFieldNum, value: value.rawValue)
	}

	public func getRecurrenceValue() -> UInt16? {
		guard let value = getFieldValue(fieldNum: GoalMesg.recurrenceValueFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setRecurrenceValue(_ value: UInt16) throws {
		try setFieldValue(fieldNum: GoalMesg.recurrenceValueFieldNum, value: value)
	}

	public func getEnabled() -> Bool? {
		guard let value = getFieldValue(fieldNum: GoalMesg.enabledFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value == 1 ? true : false
	}

	public func setEnabled(_ value: Bool) throws {
		try setFieldValue(fieldNum: GoalMesg.enabledFieldNum, value: value)
	}

	public func getSource() -> GoalSource? {
		guard let value = getFieldValue(fieldNum: GoalMesg.sourceFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return GoalSource(rawValue: value) ?? .invalid
	}

	public func setSource(_ value: GoalSource) throws {
		try setFieldValue(fieldNum: GoalMesg.sourceFieldNum, value: value.rawValue)
	}

	public class func createGoalMesg() -> GoalMesg {
        let mesg = GoalMesg(name: "Goal", num: Profile.MesgNum.goal)
		
		mesg.fields[GoalMesg.messageIndexFieldNum] = Field(name: "MessageIndex", num: GoalMesg.messageIndexFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[GoalMesg.sportFieldNum] = Field(name: "Sport", num: GoalMesg.sportFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[GoalMesg.subSportFieldNum] = Field(name: "SubSport", num: GoalMesg.subSportFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[GoalMesg.startDateFieldNum] = Field(name: "StartDate", num: GoalMesg.startDateFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[GoalMesg.endDateFieldNum] = Field(name: "EndDate", num: GoalMesg.endDateFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[GoalMesg.typeFieldNum] = Field(name: "Type", num: GoalMesg.typeFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[GoalMesg.valueFieldNum] = Field(name: "Value", num: GoalMesg.valueFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[GoalMesg.repeatFieldNum] = Field(name: "Repeat", num: GoalMesg.repeatFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[GoalMesg.targetValueFieldNum] = Field(name: "TargetValue", num: GoalMesg.targetValueFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[GoalMesg.recurrenceFieldNum] = Field(name: "Recurrence", num: GoalMesg.recurrenceFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[GoalMesg.recurrenceValueFieldNum] = Field(name: "RecurrenceValue", num: GoalMesg.recurrenceValueFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[GoalMesg.enabledFieldNum] = Field(name: "Enabled", num: GoalMesg.enabledFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[GoalMesg.sourceFieldNum] = Field(name: "Source", num: GoalMesg.sourceFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
        return mesg
    }
}