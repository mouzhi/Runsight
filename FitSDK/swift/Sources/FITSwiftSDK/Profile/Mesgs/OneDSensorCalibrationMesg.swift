/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class OneDSensorCalibrationMesg : Mesg {
    public static let timestampFieldNum:UInt8 = 253
    public static let sensorTypeFieldNum:UInt8 = 0
    public static let calibrationFactorFieldNum:UInt8 = 1
    public static let calibrationDivisorFieldNum:UInt8 = 2
    public static let levelShiftFieldNum:UInt8 = 3
    public static let offsetCalFieldNum:UInt8 = 4

	private struct CalibrationFactorSubField {
        public static let baroCalFactor:UInt16 = 0
        public static let subfields:UInt16 = 1
        public static let active:UInt16 = FIT.SUBFIELD_INDEX.ACTIVE_SUBFIELD
        public static let mainField:UInt16 = FIT.SUBFIELD_INDEX.MAIN_FIELD
    }

	public init() {
        super.init(mesg: OneDSensorCalibrationMesg.createOneDSensorCalibrationMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getTimestamp() -> DateTime? {
		guard let value = getFieldValue(fieldNum: OneDSensorCalibrationMesg.timestampFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setTimestamp(_ value: DateTime) throws {
		try setFieldValue(fieldNum: OneDSensorCalibrationMesg.timestampFieldNum, value: value.timestamp)
	}

	public func getSensorType() -> SensorType? {
		guard let value = getFieldValue(fieldNum: OneDSensorCalibrationMesg.sensorTypeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return SensorType(rawValue: value) ?? .invalid
	}

	public func setSensorType(_ value: SensorType) throws {
		try setFieldValue(fieldNum: OneDSensorCalibrationMesg.sensorTypeFieldNum, value: value.rawValue)
	}

	public func getCalibrationFactor() -> UInt32? {
		guard let value = getFieldValue(fieldNum: OneDSensorCalibrationMesg.calibrationFactorFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setCalibrationFactor(_ value: UInt32) throws {
		try setFieldValue(fieldNum: OneDSensorCalibrationMesg.calibrationFactorFieldNum, value: value)
	}

	public func getBaroCalFactor() throws -> UInt32? {
		guard let value = try getFieldValue(fieldNum: OneDSensorCalibrationMesg.calibrationFactorFieldNum, index: 0, subFieldIndex: CalibrationFactorSubField.baroCalFactor).map({UInt32(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setBaroCalFactor(_ value: UInt32) throws {
		try setFieldValue(fieldNum: OneDSensorCalibrationMesg.calibrationFactorFieldNum, value: value, index: 0, subFieldIndex: CalibrationFactorSubField.baroCalFactor )
	}

	public func getCalibrationDivisor() -> UInt32? {
		guard let value = getFieldValue(fieldNum: OneDSensorCalibrationMesg.calibrationDivisorFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setCalibrationDivisor(_ value: UInt32) throws {
		try setFieldValue(fieldNum: OneDSensorCalibrationMesg.calibrationDivisorFieldNum, value: value)
	}

	public func getLevelShift() -> UInt32? {
		guard let value = getFieldValue(fieldNum: OneDSensorCalibrationMesg.levelShiftFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setLevelShift(_ value: UInt32) throws {
		try setFieldValue(fieldNum: OneDSensorCalibrationMesg.levelShiftFieldNum, value: value)
	}

	public func getOffsetCal() -> Int32? {
		guard let value = getFieldValue(fieldNum: OneDSensorCalibrationMesg.offsetCalFieldNum, index:0) as? Int32 else {
            return nil
        }
		return value
	}

	public func setOffsetCal(_ value: Int32) throws {
		try setFieldValue(fieldNum: OneDSensorCalibrationMesg.offsetCalFieldNum, value: value)
	}

	public class func createOneDSensorCalibrationMesg() -> OneDSensorCalibrationMesg {
        let mesg = OneDSensorCalibrationMesg(name: "OneDSensorCalibration", num: Profile.MesgNum.oneDSensorCalibration)
		
		mesg.fields[OneDSensorCalibrationMesg.timestampFieldNum] = Field(name: "Timestamp", num: OneDSensorCalibrationMesg.timestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
		mesg.fields[OneDSensorCalibrationMesg.sensorTypeFieldNum] = Field(name: "SensorType", num: OneDSensorCalibrationMesg.sensorTypeFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[OneDSensorCalibrationMesg.calibrationFactorFieldNum] = Field(name: "CalibrationFactor", num: OneDSensorCalibrationMesg.calibrationFactorFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
        mesg.fields[OneDSensorCalibrationMesg.calibrationFactorFieldNum]?.subFields.append(SubField(name: "BaroCalFactor", type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "Pa"))
        mesg.fields[OneDSensorCalibrationMesg.calibrationFactorFieldNum]?.subFields[Int(CalibrationFactorSubField.baroCalFactor)].addMap(refFieldNum: 0, refFieldValue: 3)
		mesg.fields[OneDSensorCalibrationMesg.calibrationDivisorFieldNum] = Field(name: "CalibrationDivisor", num: OneDSensorCalibrationMesg.calibrationDivisorFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "counts", accumulated: false)
		mesg.fields[OneDSensorCalibrationMesg.levelShiftFieldNum] = Field(name: "LevelShift", num: OneDSensorCalibrationMesg.levelShiftFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[OneDSensorCalibrationMesg.offsetCalFieldNum] = Field(name: "OffsetCal", num: OneDSensorCalibrationMesg.offsetCalFieldNum, type: BaseType.SINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
        return mesg
    }
}