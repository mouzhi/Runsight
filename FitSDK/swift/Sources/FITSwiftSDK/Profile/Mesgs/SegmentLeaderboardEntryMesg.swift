/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class SegmentLeaderboardEntryMesg : Mesg {
    public static let messageIndexFieldNum:UInt8 = 254
    public static let nameFieldNum:UInt8 = 0
    public static let typeFieldNum:UInt8 = 1
    public static let groupPrimaryKeyFieldNum:UInt8 = 2
    public static let activityIdFieldNum:UInt8 = 3
    public static let segmentTimeFieldNum:UInt8 = 4
    public static let activityIdStringFieldNum:UInt8 = 5

	public init() {
        super.init(mesg: SegmentLeaderboardEntryMesg.createSegmentLeaderboardEntryMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getMessageIndex() -> MessageIndex? {
		guard let value = getFieldValue(fieldNum: SegmentLeaderboardEntryMesg.messageIndexFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setMessageIndex(_ value: MessageIndex) throws {
		try setFieldValue(fieldNum: SegmentLeaderboardEntryMesg.messageIndexFieldNum, value: value)
	}

	public func getName() -> String? {
		guard let value = getFieldValue(fieldNum: SegmentLeaderboardEntryMesg.nameFieldNum, index:0) as? String else {
            return nil
        }
		return value
	}

	public func setName(_ value: String) throws {
		try setFieldValue(fieldNum: SegmentLeaderboardEntryMesg.nameFieldNum, value: value)
	}

	public func getType() -> SegmentLeaderboardType? {
		guard let value = getFieldValue(fieldNum: SegmentLeaderboardEntryMesg.typeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return SegmentLeaderboardType(rawValue: value) ?? .invalid
	}

	public func setType(_ value: SegmentLeaderboardType) throws {
		try setFieldValue(fieldNum: SegmentLeaderboardEntryMesg.typeFieldNum, value: value.rawValue)
	}

	public func getGroupPrimaryKey() -> UInt32? {
		guard let value = getFieldValue(fieldNum: SegmentLeaderboardEntryMesg.groupPrimaryKeyFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setGroupPrimaryKey(_ value: UInt32) throws {
		try setFieldValue(fieldNum: SegmentLeaderboardEntryMesg.groupPrimaryKeyFieldNum, value: value)
	}

	public func getActivityId() -> UInt32? {
		guard let value = getFieldValue(fieldNum: SegmentLeaderboardEntryMesg.activityIdFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setActivityId(_ value: UInt32) throws {
		try setFieldValue(fieldNum: SegmentLeaderboardEntryMesg.activityIdFieldNum, value: value)
	}

	public func getSegmentTime() -> Float64? {
		guard let value = getFieldValue(fieldNum: SegmentLeaderboardEntryMesg.segmentTimeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setSegmentTime(_ value: Float64) throws {
		try setFieldValue(fieldNum: SegmentLeaderboardEntryMesg.segmentTimeFieldNum, value: value)
	}

	public func getActivityIdString() -> String? {
		guard let value = getFieldValue(fieldNum: SegmentLeaderboardEntryMesg.activityIdStringFieldNum, index:0) as? String else {
            return nil
        }
		return value
	}

	public func setActivityIdString(_ value: String) throws {
		try setFieldValue(fieldNum: SegmentLeaderboardEntryMesg.activityIdStringFieldNum, value: value)
	}

	public class func createSegmentLeaderboardEntryMesg() -> SegmentLeaderboardEntryMesg {
        let mesg = SegmentLeaderboardEntryMesg(name: "SegmentLeaderboardEntry", num: Profile.MesgNum.segmentLeaderboardEntry)
		
		mesg.fields[SegmentLeaderboardEntryMesg.messageIndexFieldNum] = Field(name: "MessageIndex", num: SegmentLeaderboardEntryMesg.messageIndexFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SegmentLeaderboardEntryMesg.nameFieldNum] = Field(name: "Name", num: SegmentLeaderboardEntryMesg.nameFieldNum, type: BaseType.STRING.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SegmentLeaderboardEntryMesg.typeFieldNum] = Field(name: "Type", num: SegmentLeaderboardEntryMesg.typeFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SegmentLeaderboardEntryMesg.groupPrimaryKeyFieldNum] = Field(name: "GroupPrimaryKey", num: SegmentLeaderboardEntryMesg.groupPrimaryKeyFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SegmentLeaderboardEntryMesg.activityIdFieldNum] = Field(name: "ActivityId", num: SegmentLeaderboardEntryMesg.activityIdFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SegmentLeaderboardEntryMesg.segmentTimeFieldNum] = Field(name: "SegmentTime", num: SegmentLeaderboardEntryMesg.segmentTimeFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "s", accumulated: false)
		mesg.fields[SegmentLeaderboardEntryMesg.activityIdStringFieldNum] = Field(name: "ActivityIdString", num: SegmentLeaderboardEntryMesg.activityIdStringFieldNum, type: BaseType.STRING.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
        return mesg
    }
}