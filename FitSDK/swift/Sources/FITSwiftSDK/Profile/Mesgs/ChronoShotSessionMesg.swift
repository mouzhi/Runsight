/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class ChronoShotSessionMesg : Mesg {
    public static let timestampFieldNum:UInt8 = 253
    public static let minSpeedFieldNum:UInt8 = 0
    public static let maxSpeedFieldNum:UInt8 = 1
    public static let avgSpeedFieldNum:UInt8 = 2
    public static let shotCountFieldNum:UInt8 = 3
    public static let projectileTypeFieldNum:UInt8 = 4
    public static let grainWeightFieldNum:UInt8 = 5
    public static let standardDeviationFieldNum:UInt8 = 6

	public init() {
        super.init(mesg: ChronoShotSessionMesg.createChronoShotSessionMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getTimestamp() -> DateTime? {
		guard let value = getFieldValue(fieldNum: ChronoShotSessionMesg.timestampFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setTimestamp(_ value: DateTime) throws {
		try setFieldValue(fieldNum: ChronoShotSessionMesg.timestampFieldNum, value: value.timestamp)
	}

	public func getMinSpeed() -> Float64? {
		guard let value = getFieldValue(fieldNum: ChronoShotSessionMesg.minSpeedFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setMinSpeed(_ value: Float64) throws {
		try setFieldValue(fieldNum: ChronoShotSessionMesg.minSpeedFieldNum, value: value)
	}

	public func getMaxSpeed() -> Float64? {
		guard let value = getFieldValue(fieldNum: ChronoShotSessionMesg.maxSpeedFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setMaxSpeed(_ value: Float64) throws {
		try setFieldValue(fieldNum: ChronoShotSessionMesg.maxSpeedFieldNum, value: value)
	}

	public func getAvgSpeed() -> Float64? {
		guard let value = getFieldValue(fieldNum: ChronoShotSessionMesg.avgSpeedFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgSpeed(_ value: Float64) throws {
		try setFieldValue(fieldNum: ChronoShotSessionMesg.avgSpeedFieldNum, value: value)
	}

	public func getShotCount() -> UInt16? {
		guard let value = getFieldValue(fieldNum: ChronoShotSessionMesg.shotCountFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setShotCount(_ value: UInt16) throws {
		try setFieldValue(fieldNum: ChronoShotSessionMesg.shotCountFieldNum, value: value)
	}

	public func getProjectileType() -> ProjectileType? {
		guard let value = getFieldValue(fieldNum: ChronoShotSessionMesg.projectileTypeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return ProjectileType(rawValue: value) ?? .invalid
	}

	public func setProjectileType(_ value: ProjectileType) throws {
		try setFieldValue(fieldNum: ChronoShotSessionMesg.projectileTypeFieldNum, value: value.rawValue)
	}

	public func getGrainWeight() -> Float64? {
		guard let value = getFieldValue(fieldNum: ChronoShotSessionMesg.grainWeightFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setGrainWeight(_ value: Float64) throws {
		try setFieldValue(fieldNum: ChronoShotSessionMesg.grainWeightFieldNum, value: value)
	}

	public func getStandardDeviation() -> Float64? {
		guard let value = getFieldValue(fieldNum: ChronoShotSessionMesg.standardDeviationFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setStandardDeviation(_ value: Float64) throws {
		try setFieldValue(fieldNum: ChronoShotSessionMesg.standardDeviationFieldNum, value: value)
	}

	public class func createChronoShotSessionMesg() -> ChronoShotSessionMesg {
        let mesg = ChronoShotSessionMesg(name: "ChronoShotSession", num: Profile.MesgNum.chronoShotSession)
		
		mesg.fields[ChronoShotSessionMesg.timestampFieldNum] = Field(name: "Timestamp", num: ChronoShotSessionMesg.timestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[ChronoShotSessionMesg.minSpeedFieldNum] = Field(name: "MinSpeed", num: ChronoShotSessionMesg.minSpeedFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "m/s", accumulated: false)
		mesg.fields[ChronoShotSessionMesg.maxSpeedFieldNum] = Field(name: "MaxSpeed", num: ChronoShotSessionMesg.maxSpeedFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "m/s", accumulated: false)
		mesg.fields[ChronoShotSessionMesg.avgSpeedFieldNum] = Field(name: "AvgSpeed", num: ChronoShotSessionMesg.avgSpeedFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "m/s", accumulated: false)
		mesg.fields[ChronoShotSessionMesg.shotCountFieldNum] = Field(name: "ShotCount", num: ChronoShotSessionMesg.shotCountFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[ChronoShotSessionMesg.projectileTypeFieldNum] = Field(name: "ProjectileType", num: ChronoShotSessionMesg.projectileTypeFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[ChronoShotSessionMesg.grainWeightFieldNum] = Field(name: "GrainWeight", num: ChronoShotSessionMesg.grainWeightFieldNum, type: BaseType.UINT32.rawValue, scale: 10, offset: 0, units: "gr", accumulated: false)
		mesg.fields[ChronoShotSessionMesg.standardDeviationFieldNum] = Field(name: "StandardDeviation", num: ChronoShotSessionMesg.standardDeviationFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "m/s", accumulated: false)
        return mesg
    }
}