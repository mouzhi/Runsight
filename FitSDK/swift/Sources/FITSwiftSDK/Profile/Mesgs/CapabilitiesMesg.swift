/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class CapabilitiesMesg : Mesg {
    public static let languagesFieldNum:UInt8 = 0
    public static let sportsFieldNum:UInt8 = 1
    public static let workoutsSupportedFieldNum:UInt8 = 21
    public static let connectivitySupportedFieldNum:UInt8 = 23

	public init() {
        super.init(mesg: CapabilitiesMesg.createCapabilitiesMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getNumLanguages() -> UInt8 {
		guard let field = getField(fieldNum: CapabilitiesMesg.languagesFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getLanguages() -> [UInt8?]? {
		guard let field = getField(fieldNum: CapabilitiesMesg.languagesFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt8?]
	}

	public func getLanguages(index: Int) -> UInt8? {
		guard let value = getFieldValue(fieldNum: CapabilitiesMesg.languagesFieldNum, index: index) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setLanguages(index: Int, value: UInt8) throws {
		try setFieldValue(fieldNum: CapabilitiesMesg.languagesFieldNum, value: value, index: index)
	}

	public func getNumSports() -> UInt8 {
		guard let field = getField(fieldNum: CapabilitiesMesg.sportsFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getSports() -> [SportBits0?]? {
		guard let field = getField(fieldNum: CapabilitiesMesg.sportsFieldNum) else {
			return nil
		}
		return field.toArray() as [SportBits0?]
	}

	public func getSports(index: Int) -> SportBits0? {
		guard let value = getFieldValue(fieldNum: CapabilitiesMesg.sportsFieldNum, index: index) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setSports(index: Int, value: SportBits0) throws {
		try setFieldValue(fieldNum: CapabilitiesMesg.sportsFieldNum, value: value, index: index)
	}

	public func getWorkoutsSupported() -> WorkoutCapabilities? {
		guard let value = getFieldValue(fieldNum: CapabilitiesMesg.workoutsSupportedFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setWorkoutsSupported(_ value: WorkoutCapabilities) throws {
		try setFieldValue(fieldNum: CapabilitiesMesg.workoutsSupportedFieldNum, value: value)
	}

	public func getConnectivitySupported() -> ConnectivityCapabilities? {
		guard let value = getFieldValue(fieldNum: CapabilitiesMesg.connectivitySupportedFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setConnectivitySupported(_ value: ConnectivityCapabilities) throws {
		try setFieldValue(fieldNum: CapabilitiesMesg.connectivitySupportedFieldNum, value: value)
	}

	public class func createCapabilitiesMesg() -> CapabilitiesMesg {
        let mesg = CapabilitiesMesg(name: "Capabilities", num: Profile.MesgNum.capabilities)
		
		mesg.fields[CapabilitiesMesg.languagesFieldNum] = Field(name: "Languages", num: CapabilitiesMesg.languagesFieldNum, type: BaseType.UINT8Z.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[CapabilitiesMesg.sportsFieldNum] = Field(name: "Sports", num: CapabilitiesMesg.sportsFieldNum, type: BaseType.UINT8Z.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[CapabilitiesMesg.workoutsSupportedFieldNum] = Field(name: "WorkoutsSupported", num: CapabilitiesMesg.workoutsSupportedFieldNum, type: BaseType.UINT32Z.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[CapabilitiesMesg.connectivitySupportedFieldNum] = Field(name: "ConnectivitySupported", num: CapabilitiesMesg.connectivitySupportedFieldNum, type: BaseType.UINT32Z.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
        return mesg
    }
}