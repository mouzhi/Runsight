/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class MonitoringInfoMesg : Mesg {
    public static let timestampFieldNum:UInt8 = 253
    public static let localTimestampFieldNum:UInt8 = 0
    public static let activityTypeFieldNum:UInt8 = 1
    public static let cyclesToDistanceFieldNum:UInt8 = 3
    public static let cyclesToCaloriesFieldNum:UInt8 = 4
    public static let restingMetabolicRateFieldNum:UInt8 = 5

	public init() {
        super.init(mesg: MonitoringInfoMesg.createMonitoringInfoMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getTimestamp() -> DateTime? {
		guard let value = getFieldValue(fieldNum: MonitoringInfoMesg.timestampFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setTimestamp(_ value: DateTime) throws {
		try setFieldValue(fieldNum: MonitoringInfoMesg.timestampFieldNum, value: value.timestamp)
	}

	public func getLocalTimestamp() -> LocalDateTime? {
		guard let value = getFieldValue(fieldNum: MonitoringInfoMesg.localTimestampFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setLocalTimestamp(_ value: LocalDateTime) throws {
		try setFieldValue(fieldNum: MonitoringInfoMesg.localTimestampFieldNum, value: value)
	}

	public func getNumActivityType() -> UInt8 {
		guard let field = getField(fieldNum: MonitoringInfoMesg.activityTypeFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getActivityType() -> [ActivityType?]? {
		guard let field = getField(fieldNum: MonitoringInfoMesg.activityTypeFieldNum) else {
			return nil
		}

		let rawValues = field.toArray() as [Any?]
		var values = [ActivityType]()
		for rawValue in rawValues {
			values.append(
				ActivityType(rawValue: rawValue as! UInt8)!
			)
		}

		return values
	}

	public func getActivityType(index: Int) -> ActivityType? {
		guard let value = getFieldValue(fieldNum: MonitoringInfoMesg.activityTypeFieldNum, index: index) as? UInt8 else {
            return nil
        }
		return ActivityType(rawValue: value) ?? .invalid
	}

	public func setActivityType(index: Int, value: ActivityType) throws {
		try setFieldValue(fieldNum: MonitoringInfoMesg.activityTypeFieldNum, value: value.rawValue, index: index)
	}

	public func getNumCyclesToDistance() -> UInt8 {
		guard let field = getField(fieldNum: MonitoringInfoMesg.cyclesToDistanceFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getCyclesToDistance() -> [Float64?]? {
		guard let field = getField(fieldNum: MonitoringInfoMesg.cyclesToDistanceFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getCyclesToDistance(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: MonitoringInfoMesg.cyclesToDistanceFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setCyclesToDistance(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: MonitoringInfoMesg.cyclesToDistanceFieldNum, value: value, index: index)
	}

	public func getNumCyclesToCalories() -> UInt8 {
		guard let field = getField(fieldNum: MonitoringInfoMesg.cyclesToCaloriesFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getCyclesToCalories() -> [Float64?]? {
		guard let field = getField(fieldNum: MonitoringInfoMesg.cyclesToCaloriesFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getCyclesToCalories(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: MonitoringInfoMesg.cyclesToCaloriesFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setCyclesToCalories(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: MonitoringInfoMesg.cyclesToCaloriesFieldNum, value: value, index: index)
	}

	public func getRestingMetabolicRate() -> UInt16? {
		guard let value = getFieldValue(fieldNum: MonitoringInfoMesg.restingMetabolicRateFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setRestingMetabolicRate(_ value: UInt16) throws {
		try setFieldValue(fieldNum: MonitoringInfoMesg.restingMetabolicRateFieldNum, value: value)
	}

	public class func createMonitoringInfoMesg() -> MonitoringInfoMesg {
        let mesg = MonitoringInfoMesg(name: "MonitoringInfo", num: Profile.MesgNum.monitoringInfo)
		
		mesg.fields[MonitoringInfoMesg.timestampFieldNum] = Field(name: "Timestamp", num: MonitoringInfoMesg.timestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
		mesg.fields[MonitoringInfoMesg.localTimestampFieldNum] = Field(name: "LocalTimestamp", num: MonitoringInfoMesg.localTimestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
		mesg.fields[MonitoringInfoMesg.activityTypeFieldNum] = Field(name: "ActivityType", num: MonitoringInfoMesg.activityTypeFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[MonitoringInfoMesg.cyclesToDistanceFieldNum] = Field(name: "CyclesToDistance", num: MonitoringInfoMesg.cyclesToDistanceFieldNum, type: BaseType.UINT16.rawValue, scale: 5000, offset: 0, units: "m/cycle", accumulated: false)
		mesg.fields[MonitoringInfoMesg.cyclesToCaloriesFieldNum] = Field(name: "CyclesToCalories", num: MonitoringInfoMesg.cyclesToCaloriesFieldNum, type: BaseType.UINT16.rawValue, scale: 5000, offset: 0, units: "kcal/cycle", accumulated: false)
		mesg.fields[MonitoringInfoMesg.restingMetabolicRateFieldNum] = Field(name: "RestingMetabolicRate", num: MonitoringInfoMesg.restingMetabolicRateFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "kcal / day", accumulated: false)
        return mesg
    }
}