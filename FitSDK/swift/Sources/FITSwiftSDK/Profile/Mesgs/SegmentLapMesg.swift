/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class SegmentLapMesg : Mesg {
    public static let messageIndexFieldNum:UInt8 = 254
    public static let timestampFieldNum:UInt8 = 253
    public static let eventFieldNum:UInt8 = 0
    public static let eventTypeFieldNum:UInt8 = 1
    public static let startTimeFieldNum:UInt8 = 2
    public static let startPositionLatFieldNum:UInt8 = 3
    public static let startPositionLongFieldNum:UInt8 = 4
    public static let endPositionLatFieldNum:UInt8 = 5
    public static let endPositionLongFieldNum:UInt8 = 6
    public static let totalElapsedTimeFieldNum:UInt8 = 7
    public static let totalTimerTimeFieldNum:UInt8 = 8
    public static let totalDistanceFieldNum:UInt8 = 9
    public static let totalCyclesFieldNum:UInt8 = 10
    public static let totalCaloriesFieldNum:UInt8 = 11
    public static let totalFatCaloriesFieldNum:UInt8 = 12
    public static let avgSpeedFieldNum:UInt8 = 13
    public static let maxSpeedFieldNum:UInt8 = 14
    public static let avgHeartRateFieldNum:UInt8 = 15
    public static let maxHeartRateFieldNum:UInt8 = 16
    public static let avgCadenceFieldNum:UInt8 = 17
    public static let maxCadenceFieldNum:UInt8 = 18
    public static let avgPowerFieldNum:UInt8 = 19
    public static let maxPowerFieldNum:UInt8 = 20
    public static let totalAscentFieldNum:UInt8 = 21
    public static let totalDescentFieldNum:UInt8 = 22
    public static let sportFieldNum:UInt8 = 23
    public static let eventGroupFieldNum:UInt8 = 24
    public static let necLatFieldNum:UInt8 = 25
    public static let necLongFieldNum:UInt8 = 26
    public static let swcLatFieldNum:UInt8 = 27
    public static let swcLongFieldNum:UInt8 = 28
    public static let nameFieldNum:UInt8 = 29
    public static let normalizedPowerFieldNum:UInt8 = 30
    public static let leftRightBalanceFieldNum:UInt8 = 31
    public static let subSportFieldNum:UInt8 = 32
    public static let totalWorkFieldNum:UInt8 = 33
    public static let avgAltitudeFieldNum:UInt8 = 34
    public static let maxAltitudeFieldNum:UInt8 = 35
    public static let gpsAccuracyFieldNum:UInt8 = 36
    public static let avgGradeFieldNum:UInt8 = 37
    public static let avgPosGradeFieldNum:UInt8 = 38
    public static let avgNegGradeFieldNum:UInt8 = 39
    public static let maxPosGradeFieldNum:UInt8 = 40
    public static let maxNegGradeFieldNum:UInt8 = 41
    public static let avgTemperatureFieldNum:UInt8 = 42
    public static let maxTemperatureFieldNum:UInt8 = 43
    public static let totalMovingTimeFieldNum:UInt8 = 44
    public static let avgPosVerticalSpeedFieldNum:UInt8 = 45
    public static let avgNegVerticalSpeedFieldNum:UInt8 = 46
    public static let maxPosVerticalSpeedFieldNum:UInt8 = 47
    public static let maxNegVerticalSpeedFieldNum:UInt8 = 48
    public static let timeInHrZoneFieldNum:UInt8 = 49
    public static let timeInSpeedZoneFieldNum:UInt8 = 50
    public static let timeInCadenceZoneFieldNum:UInt8 = 51
    public static let timeInPowerZoneFieldNum:UInt8 = 52
    public static let repetitionNumFieldNum:UInt8 = 53
    public static let minAltitudeFieldNum:UInt8 = 54
    public static let minHeartRateFieldNum:UInt8 = 55
    public static let activeTimeFieldNum:UInt8 = 56
    public static let wktStepIndexFieldNum:UInt8 = 57
    public static let sportEventFieldNum:UInt8 = 58
    public static let avgLeftTorqueEffectivenessFieldNum:UInt8 = 59
    public static let avgRightTorqueEffectivenessFieldNum:UInt8 = 60
    public static let avgLeftPedalSmoothnessFieldNum:UInt8 = 61
    public static let avgRightPedalSmoothnessFieldNum:UInt8 = 62
    public static let avgCombinedPedalSmoothnessFieldNum:UInt8 = 63
    public static let statusFieldNum:UInt8 = 64
    public static let uuidFieldNum:UInt8 = 65
    public static let avgFractionalCadenceFieldNum:UInt8 = 66
    public static let maxFractionalCadenceFieldNum:UInt8 = 67
    public static let totalFractionalCyclesFieldNum:UInt8 = 68
    public static let frontGearShiftCountFieldNum:UInt8 = 69
    public static let rearGearShiftCountFieldNum:UInt8 = 70
    public static let timeStandingFieldNum:UInt8 = 71
    public static let standCountFieldNum:UInt8 = 72
    public static let avgLeftPcoFieldNum:UInt8 = 73
    public static let avgRightPcoFieldNum:UInt8 = 74
    public static let avgLeftPowerPhaseFieldNum:UInt8 = 75
    public static let avgLeftPowerPhasePeakFieldNum:UInt8 = 76
    public static let avgRightPowerPhaseFieldNum:UInt8 = 77
    public static let avgRightPowerPhasePeakFieldNum:UInt8 = 78
    public static let avgPowerPositionFieldNum:UInt8 = 79
    public static let maxPowerPositionFieldNum:UInt8 = 80
    public static let avgCadencePositionFieldNum:UInt8 = 81
    public static let maxCadencePositionFieldNum:UInt8 = 82
    public static let manufacturerFieldNum:UInt8 = 83
    public static let totalGritFieldNum:UInt8 = 84
    public static let totalFlowFieldNum:UInt8 = 85
    public static let avgGritFieldNum:UInt8 = 86
    public static let avgFlowFieldNum:UInt8 = 87
    public static let totalFractionalAscentFieldNum:UInt8 = 89
    public static let totalFractionalDescentFieldNum:UInt8 = 90
    public static let enhancedAvgAltitudeFieldNum:UInt8 = 91
    public static let enhancedMaxAltitudeFieldNum:UInt8 = 92
    public static let enhancedMinAltitudeFieldNum:UInt8 = 93

	private struct TotalCyclesSubField {
        public static let totalStrokes:UInt16 = 0
        public static let subfields:UInt16 = 1
        public static let active:UInt16 = FIT.SUBFIELD_INDEX.ACTIVE_SUBFIELD
        public static let mainField:UInt16 = FIT.SUBFIELD_INDEX.MAIN_FIELD
    }

	public init() {
        super.init(mesg: SegmentLapMesg.createSegmentLapMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getMessageIndex() -> MessageIndex? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.messageIndexFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setMessageIndex(_ value: MessageIndex) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.messageIndexFieldNum, value: value)
	}

	public func getTimestamp() -> DateTime? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.timestampFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setTimestamp(_ value: DateTime) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.timestampFieldNum, value: value.timestamp)
	}

	public func getEvent() -> Event? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.eventFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return Event(rawValue: value) ?? .invalid
	}

	public func setEvent(_ value: Event) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.eventFieldNum, value: value.rawValue)
	}

	public func getEventType() -> EventType? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.eventTypeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return EventType(rawValue: value) ?? .invalid
	}

	public func setEventType(_ value: EventType) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.eventTypeFieldNum, value: value.rawValue)
	}

	public func getStartTime() -> DateTime? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.startTimeFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setStartTime(_ value: DateTime) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.startTimeFieldNum, value: value.timestamp)
	}

	public func getStartPositionLat() -> Int32? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.startPositionLatFieldNum, index:0) as? Int32 else {
            return nil
        }
		return value
	}

	public func setStartPositionLat(_ value: Int32) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.startPositionLatFieldNum, value: value)
	}

	public func getStartPositionLong() -> Int32? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.startPositionLongFieldNum, index:0) as? Int32 else {
            return nil
        }
		return value
	}

	public func setStartPositionLong(_ value: Int32) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.startPositionLongFieldNum, value: value)
	}

	public func getEndPositionLat() -> Int32? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.endPositionLatFieldNum, index:0) as? Int32 else {
            return nil
        }
		return value
	}

	public func setEndPositionLat(_ value: Int32) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.endPositionLatFieldNum, value: value)
	}

	public func getEndPositionLong() -> Int32? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.endPositionLongFieldNum, index:0) as? Int32 else {
            return nil
        }
		return value
	}

	public func setEndPositionLong(_ value: Int32) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.endPositionLongFieldNum, value: value)
	}

	public func getTotalElapsedTime() -> Float64? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.totalElapsedTimeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTotalElapsedTime(_ value: Float64) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.totalElapsedTimeFieldNum, value: value)
	}

	public func getTotalTimerTime() -> Float64? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.totalTimerTimeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTotalTimerTime(_ value: Float64) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.totalTimerTimeFieldNum, value: value)
	}

	public func getTotalDistance() -> Float64? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.totalDistanceFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTotalDistance(_ value: Float64) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.totalDistanceFieldNum, value: value)
	}

	public func getTotalCycles() -> UInt32? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.totalCyclesFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setTotalCycles(_ value: UInt32) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.totalCyclesFieldNum, value: value)
	}

	public func getTotalStrokes() throws -> UInt32? {
		guard let value = try getFieldValue(fieldNum: SegmentLapMesg.totalCyclesFieldNum, index: 0, subFieldIndex: TotalCyclesSubField.totalStrokes).map({UInt32(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setTotalStrokes(_ value: UInt32) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.totalCyclesFieldNum, value: value, index: 0, subFieldIndex: TotalCyclesSubField.totalStrokes )
	}

	public func getTotalCalories() -> UInt16? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.totalCaloriesFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setTotalCalories(_ value: UInt16) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.totalCaloriesFieldNum, value: value)
	}

	public func getTotalFatCalories() -> UInt16? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.totalFatCaloriesFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setTotalFatCalories(_ value: UInt16) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.totalFatCaloriesFieldNum, value: value)
	}

	public func getAvgSpeed() -> Float64? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.avgSpeedFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgSpeed(_ value: Float64) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.avgSpeedFieldNum, value: value)
	}

	public func getMaxSpeed() -> Float64? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.maxSpeedFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setMaxSpeed(_ value: Float64) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.maxSpeedFieldNum, value: value)
	}

	public func getAvgHeartRate() -> UInt8? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.avgHeartRateFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setAvgHeartRate(_ value: UInt8) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.avgHeartRateFieldNum, value: value)
	}

	public func getMaxHeartRate() -> UInt8? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.maxHeartRateFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setMaxHeartRate(_ value: UInt8) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.maxHeartRateFieldNum, value: value)
	}

	public func getAvgCadence() -> UInt8? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.avgCadenceFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setAvgCadence(_ value: UInt8) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.avgCadenceFieldNum, value: value)
	}

	public func getMaxCadence() -> UInt8? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.maxCadenceFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setMaxCadence(_ value: UInt8) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.maxCadenceFieldNum, value: value)
	}

	public func getAvgPower() -> UInt16? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.avgPowerFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setAvgPower(_ value: UInt16) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.avgPowerFieldNum, value: value)
	}

	public func getMaxPower() -> UInt16? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.maxPowerFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setMaxPower(_ value: UInt16) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.maxPowerFieldNum, value: value)
	}

	public func getTotalAscent() -> UInt16? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.totalAscentFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setTotalAscent(_ value: UInt16) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.totalAscentFieldNum, value: value)
	}

	public func getTotalDescent() -> UInt16? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.totalDescentFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setTotalDescent(_ value: UInt16) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.totalDescentFieldNum, value: value)
	}

	public func getSport() -> Sport? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.sportFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return Sport(rawValue: value) ?? .invalid
	}

	public func setSport(_ value: Sport) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.sportFieldNum, value: value.rawValue)
	}

	public func getEventGroup() -> UInt8? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.eventGroupFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setEventGroup(_ value: UInt8) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.eventGroupFieldNum, value: value)
	}

	public func getNecLat() -> Int32? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.necLatFieldNum, index:0) as? Int32 else {
            return nil
        }
		return value
	}

	public func setNecLat(_ value: Int32) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.necLatFieldNum, value: value)
	}

	public func getNecLong() -> Int32? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.necLongFieldNum, index:0) as? Int32 else {
            return nil
        }
		return value
	}

	public func setNecLong(_ value: Int32) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.necLongFieldNum, value: value)
	}

	public func getSwcLat() -> Int32? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.swcLatFieldNum, index:0) as? Int32 else {
            return nil
        }
		return value
	}

	public func setSwcLat(_ value: Int32) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.swcLatFieldNum, value: value)
	}

	public func getSwcLong() -> Int32? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.swcLongFieldNum, index:0) as? Int32 else {
            return nil
        }
		return value
	}

	public func setSwcLong(_ value: Int32) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.swcLongFieldNum, value: value)
	}

	public func getName() -> String? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.nameFieldNum, index:0) as? String else {
            return nil
        }
		return value
	}

	public func setName(_ value: String) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.nameFieldNum, value: value)
	}

	public func getNormalizedPower() -> UInt16? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.normalizedPowerFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setNormalizedPower(_ value: UInt16) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.normalizedPowerFieldNum, value: value)
	}

	public func getLeftRightBalance() -> LeftRightBalance100? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.leftRightBalanceFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return LeftRightBalance100(rawValue: value) ?? .invalid
	}

	public func setLeftRightBalance(_ value: LeftRightBalance100) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.leftRightBalanceFieldNum, value: value.rawValue)
	}

	public func getSubSport() -> SubSport? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.subSportFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return SubSport(rawValue: value) ?? .invalid
	}

	public func setSubSport(_ value: SubSport) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.subSportFieldNum, value: value.rawValue)
	}

	public func getTotalWork() -> UInt32? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.totalWorkFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setTotalWork(_ value: UInt32) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.totalWorkFieldNum, value: value)
	}

	public func getAvgAltitude() -> Float64? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.avgAltitudeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgAltitude(_ value: Float64) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.avgAltitudeFieldNum, value: value)
	}

	public func getMaxAltitude() -> Float64? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.maxAltitudeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setMaxAltitude(_ value: Float64) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.maxAltitudeFieldNum, value: value)
	}

	public func getGpsAccuracy() -> UInt8? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.gpsAccuracyFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setGpsAccuracy(_ value: UInt8) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.gpsAccuracyFieldNum, value: value)
	}

	public func getAvgGrade() -> Float64? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.avgGradeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgGrade(_ value: Float64) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.avgGradeFieldNum, value: value)
	}

	public func getAvgPosGrade() -> Float64? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.avgPosGradeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgPosGrade(_ value: Float64) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.avgPosGradeFieldNum, value: value)
	}

	public func getAvgNegGrade() -> Float64? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.avgNegGradeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgNegGrade(_ value: Float64) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.avgNegGradeFieldNum, value: value)
	}

	public func getMaxPosGrade() -> Float64? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.maxPosGradeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setMaxPosGrade(_ value: Float64) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.maxPosGradeFieldNum, value: value)
	}

	public func getMaxNegGrade() -> Float64? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.maxNegGradeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setMaxNegGrade(_ value: Float64) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.maxNegGradeFieldNum, value: value)
	}

	public func getAvgTemperature() -> Int8? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.avgTemperatureFieldNum, index:0) as? Int8 else {
            return nil
        }
		return value
	}

	public func setAvgTemperature(_ value: Int8) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.avgTemperatureFieldNum, value: value)
	}

	public func getMaxTemperature() -> Int8? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.maxTemperatureFieldNum, index:0) as? Int8 else {
            return nil
        }
		return value
	}

	public func setMaxTemperature(_ value: Int8) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.maxTemperatureFieldNum, value: value)
	}

	public func getTotalMovingTime() -> Float64? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.totalMovingTimeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTotalMovingTime(_ value: Float64) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.totalMovingTimeFieldNum, value: value)
	}

	public func getAvgPosVerticalSpeed() -> Float64? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.avgPosVerticalSpeedFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgPosVerticalSpeed(_ value: Float64) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.avgPosVerticalSpeedFieldNum, value: value)
	}

	public func getAvgNegVerticalSpeed() -> Float64? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.avgNegVerticalSpeedFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgNegVerticalSpeed(_ value: Float64) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.avgNegVerticalSpeedFieldNum, value: value)
	}

	public func getMaxPosVerticalSpeed() -> Float64? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.maxPosVerticalSpeedFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setMaxPosVerticalSpeed(_ value: Float64) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.maxPosVerticalSpeedFieldNum, value: value)
	}

	public func getMaxNegVerticalSpeed() -> Float64? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.maxNegVerticalSpeedFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setMaxNegVerticalSpeed(_ value: Float64) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.maxNegVerticalSpeedFieldNum, value: value)
	}

	public func getNumTimeInHrZone() -> UInt8 {
		guard let field = getField(fieldNum: SegmentLapMesg.timeInHrZoneFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getTimeInHrZone() -> [Float64?]? {
		guard let field = getField(fieldNum: SegmentLapMesg.timeInHrZoneFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getTimeInHrZone(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.timeInHrZoneFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTimeInHrZone(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.timeInHrZoneFieldNum, value: value, index: index)
	}

	public func getNumTimeInSpeedZone() -> UInt8 {
		guard let field = getField(fieldNum: SegmentLapMesg.timeInSpeedZoneFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getTimeInSpeedZone() -> [Float64?]? {
		guard let field = getField(fieldNum: SegmentLapMesg.timeInSpeedZoneFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getTimeInSpeedZone(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.timeInSpeedZoneFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTimeInSpeedZone(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.timeInSpeedZoneFieldNum, value: value, index: index)
	}

	public func getNumTimeInCadenceZone() -> UInt8 {
		guard let field = getField(fieldNum: SegmentLapMesg.timeInCadenceZoneFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getTimeInCadenceZone() -> [Float64?]? {
		guard let field = getField(fieldNum: SegmentLapMesg.timeInCadenceZoneFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getTimeInCadenceZone(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.timeInCadenceZoneFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTimeInCadenceZone(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.timeInCadenceZoneFieldNum, value: value, index: index)
	}

	public func getNumTimeInPowerZone() -> UInt8 {
		guard let field = getField(fieldNum: SegmentLapMesg.timeInPowerZoneFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getTimeInPowerZone() -> [Float64?]? {
		guard let field = getField(fieldNum: SegmentLapMesg.timeInPowerZoneFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getTimeInPowerZone(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.timeInPowerZoneFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTimeInPowerZone(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.timeInPowerZoneFieldNum, value: value, index: index)
	}

	public func getRepetitionNum() -> UInt16? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.repetitionNumFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setRepetitionNum(_ value: UInt16) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.repetitionNumFieldNum, value: value)
	}

	public func getMinAltitude() -> Float64? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.minAltitudeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setMinAltitude(_ value: Float64) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.minAltitudeFieldNum, value: value)
	}

	public func getMinHeartRate() -> UInt8? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.minHeartRateFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setMinHeartRate(_ value: UInt8) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.minHeartRateFieldNum, value: value)
	}

	public func getActiveTime() -> Float64? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.activeTimeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setActiveTime(_ value: Float64) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.activeTimeFieldNum, value: value)
	}

	public func getWktStepIndex() -> MessageIndex? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.wktStepIndexFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setWktStepIndex(_ value: MessageIndex) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.wktStepIndexFieldNum, value: value)
	}

	public func getSportEvent() -> SportEvent? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.sportEventFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return SportEvent(rawValue: value) ?? .invalid
	}

	public func setSportEvent(_ value: SportEvent) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.sportEventFieldNum, value: value.rawValue)
	}

	public func getAvgLeftTorqueEffectiveness() -> Float64? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.avgLeftTorqueEffectivenessFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgLeftTorqueEffectiveness(_ value: Float64) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.avgLeftTorqueEffectivenessFieldNum, value: value)
	}

	public func getAvgRightTorqueEffectiveness() -> Float64? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.avgRightTorqueEffectivenessFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgRightTorqueEffectiveness(_ value: Float64) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.avgRightTorqueEffectivenessFieldNum, value: value)
	}

	public func getAvgLeftPedalSmoothness() -> Float64? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.avgLeftPedalSmoothnessFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgLeftPedalSmoothness(_ value: Float64) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.avgLeftPedalSmoothnessFieldNum, value: value)
	}

	public func getAvgRightPedalSmoothness() -> Float64? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.avgRightPedalSmoothnessFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgRightPedalSmoothness(_ value: Float64) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.avgRightPedalSmoothnessFieldNum, value: value)
	}

	public func getAvgCombinedPedalSmoothness() -> Float64? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.avgCombinedPedalSmoothnessFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgCombinedPedalSmoothness(_ value: Float64) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.avgCombinedPedalSmoothnessFieldNum, value: value)
	}

	public func getStatus() -> SegmentLapStatus? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.statusFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return SegmentLapStatus(rawValue: value) ?? .invalid
	}

	public func setStatus(_ value: SegmentLapStatus) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.statusFieldNum, value: value.rawValue)
	}

	public func getUuid() -> String? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.uuidFieldNum, index:0) as? String else {
            return nil
        }
		return value
	}

	public func setUuid(_ value: String) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.uuidFieldNum, value: value)
	}

	public func getAvgFractionalCadence() -> Float64? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.avgFractionalCadenceFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgFractionalCadence(_ value: Float64) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.avgFractionalCadenceFieldNum, value: value)
	}

	public func getMaxFractionalCadence() -> Float64? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.maxFractionalCadenceFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setMaxFractionalCadence(_ value: Float64) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.maxFractionalCadenceFieldNum, value: value)
	}

	public func getTotalFractionalCycles() -> Float64? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.totalFractionalCyclesFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTotalFractionalCycles(_ value: Float64) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.totalFractionalCyclesFieldNum, value: value)
	}

	public func getFrontGearShiftCount() -> UInt16? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.frontGearShiftCountFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setFrontGearShiftCount(_ value: UInt16) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.frontGearShiftCountFieldNum, value: value)
	}

	public func getRearGearShiftCount() -> UInt16? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.rearGearShiftCountFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setRearGearShiftCount(_ value: UInt16) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.rearGearShiftCountFieldNum, value: value)
	}

	public func getTimeStanding() -> Float64? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.timeStandingFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTimeStanding(_ value: Float64) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.timeStandingFieldNum, value: value)
	}

	public func getStandCount() -> UInt16? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.standCountFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setStandCount(_ value: UInt16) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.standCountFieldNum, value: value)
	}

	public func getAvgLeftPco() -> Int8? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.avgLeftPcoFieldNum, index:0) as? Int8 else {
            return nil
        }
		return value
	}

	public func setAvgLeftPco(_ value: Int8) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.avgLeftPcoFieldNum, value: value)
	}

	public func getAvgRightPco() -> Int8? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.avgRightPcoFieldNum, index:0) as? Int8 else {
            return nil
        }
		return value
	}

	public func setAvgRightPco(_ value: Int8) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.avgRightPcoFieldNum, value: value)
	}

	public func getNumAvgLeftPowerPhase() -> UInt8 {
		guard let field = getField(fieldNum: SegmentLapMesg.avgLeftPowerPhaseFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getAvgLeftPowerPhase() -> [Float64?]? {
		guard let field = getField(fieldNum: SegmentLapMesg.avgLeftPowerPhaseFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getAvgLeftPowerPhase(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.avgLeftPowerPhaseFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgLeftPowerPhase(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.avgLeftPowerPhaseFieldNum, value: value, index: index)
	}

	public func getNumAvgLeftPowerPhasePeak() -> UInt8 {
		guard let field = getField(fieldNum: SegmentLapMesg.avgLeftPowerPhasePeakFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getAvgLeftPowerPhasePeak() -> [Float64?]? {
		guard let field = getField(fieldNum: SegmentLapMesg.avgLeftPowerPhasePeakFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getAvgLeftPowerPhasePeak(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.avgLeftPowerPhasePeakFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgLeftPowerPhasePeak(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.avgLeftPowerPhasePeakFieldNum, value: value, index: index)
	}

	public func getNumAvgRightPowerPhase() -> UInt8 {
		guard let field = getField(fieldNum: SegmentLapMesg.avgRightPowerPhaseFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getAvgRightPowerPhase() -> [Float64?]? {
		guard let field = getField(fieldNum: SegmentLapMesg.avgRightPowerPhaseFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getAvgRightPowerPhase(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.avgRightPowerPhaseFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgRightPowerPhase(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.avgRightPowerPhaseFieldNum, value: value, index: index)
	}

	public func getNumAvgRightPowerPhasePeak() -> UInt8 {
		guard let field = getField(fieldNum: SegmentLapMesg.avgRightPowerPhasePeakFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getAvgRightPowerPhasePeak() -> [Float64?]? {
		guard let field = getField(fieldNum: SegmentLapMesg.avgRightPowerPhasePeakFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getAvgRightPowerPhasePeak(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.avgRightPowerPhasePeakFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgRightPowerPhasePeak(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.avgRightPowerPhasePeakFieldNum, value: value, index: index)
	}

	public func getNumAvgPowerPosition() -> UInt8 {
		guard let field = getField(fieldNum: SegmentLapMesg.avgPowerPositionFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getAvgPowerPosition() -> [UInt16?]? {
		guard let field = getField(fieldNum: SegmentLapMesg.avgPowerPositionFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt16?]
	}

	public func getAvgPowerPosition(index: Int) -> UInt16? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.avgPowerPositionFieldNum, index: index) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setAvgPowerPosition(index: Int, value: UInt16) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.avgPowerPositionFieldNum, value: value, index: index)
	}

	public func getNumMaxPowerPosition() -> UInt8 {
		guard let field = getField(fieldNum: SegmentLapMesg.maxPowerPositionFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getMaxPowerPosition() -> [UInt16?]? {
		guard let field = getField(fieldNum: SegmentLapMesg.maxPowerPositionFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt16?]
	}

	public func getMaxPowerPosition(index: Int) -> UInt16? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.maxPowerPositionFieldNum, index: index) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setMaxPowerPosition(index: Int, value: UInt16) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.maxPowerPositionFieldNum, value: value, index: index)
	}

	public func getNumAvgCadencePosition() -> UInt8 {
		guard let field = getField(fieldNum: SegmentLapMesg.avgCadencePositionFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getAvgCadencePosition() -> [UInt8?]? {
		guard let field = getField(fieldNum: SegmentLapMesg.avgCadencePositionFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt8?]
	}

	public func getAvgCadencePosition(index: Int) -> UInt8? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.avgCadencePositionFieldNum, index: index) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setAvgCadencePosition(index: Int, value: UInt8) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.avgCadencePositionFieldNum, value: value, index: index)
	}

	public func getNumMaxCadencePosition() -> UInt8 {
		guard let field = getField(fieldNum: SegmentLapMesg.maxCadencePositionFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getMaxCadencePosition() -> [UInt8?]? {
		guard let field = getField(fieldNum: SegmentLapMesg.maxCadencePositionFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt8?]
	}

	public func getMaxCadencePosition(index: Int) -> UInt8? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.maxCadencePositionFieldNum, index: index) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setMaxCadencePosition(index: Int, value: UInt8) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.maxCadencePositionFieldNum, value: value, index: index)
	}

	public func getManufacturer() -> Manufacturer? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.manufacturerFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return Manufacturer(rawValue: value) ?? .invalid
	}

	public func setManufacturer(_ value: Manufacturer) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.manufacturerFieldNum, value: value.rawValue)
	}

	public func getTotalGrit() -> Float32? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.totalGritFieldNum, index:0) as? Float32 else {
            return nil
        }
		return value
	}

	public func setTotalGrit(_ value: Float32) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.totalGritFieldNum, value: value)
	}

	public func getTotalFlow() -> Float32? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.totalFlowFieldNum, index:0) as? Float32 else {
            return nil
        }
		return value
	}

	public func setTotalFlow(_ value: Float32) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.totalFlowFieldNum, value: value)
	}

	public func getAvgGrit() -> Float32? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.avgGritFieldNum, index:0) as? Float32 else {
            return nil
        }
		return value
	}

	public func setAvgGrit(_ value: Float32) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.avgGritFieldNum, value: value)
	}

	public func getAvgFlow() -> Float32? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.avgFlowFieldNum, index:0) as? Float32 else {
            return nil
        }
		return value
	}

	public func setAvgFlow(_ value: Float32) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.avgFlowFieldNum, value: value)
	}

	public func getTotalFractionalAscent() -> Float64? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.totalFractionalAscentFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTotalFractionalAscent(_ value: Float64) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.totalFractionalAscentFieldNum, value: value)
	}

	public func getTotalFractionalDescent() -> Float64? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.totalFractionalDescentFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTotalFractionalDescent(_ value: Float64) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.totalFractionalDescentFieldNum, value: value)
	}

	public func getEnhancedAvgAltitude() -> Float64? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.enhancedAvgAltitudeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setEnhancedAvgAltitude(_ value: Float64) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.enhancedAvgAltitudeFieldNum, value: value)
	}

	public func getEnhancedMaxAltitude() -> Float64? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.enhancedMaxAltitudeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setEnhancedMaxAltitude(_ value: Float64) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.enhancedMaxAltitudeFieldNum, value: value)
	}

	public func getEnhancedMinAltitude() -> Float64? {
		guard let value = getFieldValue(fieldNum: SegmentLapMesg.enhancedMinAltitudeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setEnhancedMinAltitude(_ value: Float64) throws {
		try setFieldValue(fieldNum: SegmentLapMesg.enhancedMinAltitudeFieldNum, value: value)
	}

	public class func createSegmentLapMesg() -> SegmentLapMesg {
        let mesg = SegmentLapMesg(name: "SegmentLap", num: Profile.MesgNum.segmentLap)
		
		mesg.fields[SegmentLapMesg.messageIndexFieldNum] = Field(name: "MessageIndex", num: SegmentLapMesg.messageIndexFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SegmentLapMesg.timestampFieldNum] = Field(name: "Timestamp", num: SegmentLapMesg.timestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
		mesg.fields[SegmentLapMesg.eventFieldNum] = Field(name: "Event", num: SegmentLapMesg.eventFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SegmentLapMesg.eventTypeFieldNum] = Field(name: "EventType", num: SegmentLapMesg.eventTypeFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SegmentLapMesg.startTimeFieldNum] = Field(name: "StartTime", num: SegmentLapMesg.startTimeFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SegmentLapMesg.startPositionLatFieldNum] = Field(name: "StartPositionLat", num: SegmentLapMesg.startPositionLatFieldNum, type: BaseType.SINT32.rawValue, scale: 1, offset: 0, units: "semicircles", accumulated: false)
		mesg.fields[SegmentLapMesg.startPositionLongFieldNum] = Field(name: "StartPositionLong", num: SegmentLapMesg.startPositionLongFieldNum, type: BaseType.SINT32.rawValue, scale: 1, offset: 0, units: "semicircles", accumulated: false)
		mesg.fields[SegmentLapMesg.endPositionLatFieldNum] = Field(name: "EndPositionLat", num: SegmentLapMesg.endPositionLatFieldNum, type: BaseType.SINT32.rawValue, scale: 1, offset: 0, units: "semicircles", accumulated: false)
		mesg.fields[SegmentLapMesg.endPositionLongFieldNum] = Field(name: "EndPositionLong", num: SegmentLapMesg.endPositionLongFieldNum, type: BaseType.SINT32.rawValue, scale: 1, offset: 0, units: "semicircles", accumulated: false)
		mesg.fields[SegmentLapMesg.totalElapsedTimeFieldNum] = Field(name: "TotalElapsedTime", num: SegmentLapMesg.totalElapsedTimeFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "s", accumulated: false)
		mesg.fields[SegmentLapMesg.totalTimerTimeFieldNum] = Field(name: "TotalTimerTime", num: SegmentLapMesg.totalTimerTimeFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "s", accumulated: false)
		mesg.fields[SegmentLapMesg.totalDistanceFieldNum] = Field(name: "TotalDistance", num: SegmentLapMesg.totalDistanceFieldNum, type: BaseType.UINT32.rawValue, scale: 100, offset: 0, units: "m", accumulated: false)
		mesg.fields[SegmentLapMesg.totalCyclesFieldNum] = Field(name: "TotalCycles", num: SegmentLapMesg.totalCyclesFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "cycles", accumulated: false)
        mesg.fields[SegmentLapMesg.totalCyclesFieldNum]?.subFields.append(SubField(name: "TotalStrokes", type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "strokes"))
        mesg.fields[SegmentLapMesg.totalCyclesFieldNum]?.subFields[Int(TotalCyclesSubField.totalStrokes)].addMap(refFieldNum: 23, refFieldValue: 2)
		mesg.fields[SegmentLapMesg.totalCaloriesFieldNum] = Field(name: "TotalCalories", num: SegmentLapMesg.totalCaloriesFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "kcal", accumulated: false)
		mesg.fields[SegmentLapMesg.totalFatCaloriesFieldNum] = Field(name: "TotalFatCalories", num: SegmentLapMesg.totalFatCaloriesFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "kcal", accumulated: false)
		mesg.fields[SegmentLapMesg.avgSpeedFieldNum] = Field(name: "AvgSpeed", num: SegmentLapMesg.avgSpeedFieldNum, type: BaseType.UINT16.rawValue, scale: 1000, offset: 0, units: "m/s", accumulated: false)
		mesg.fields[SegmentLapMesg.maxSpeedFieldNum] = Field(name: "MaxSpeed", num: SegmentLapMesg.maxSpeedFieldNum, type: BaseType.UINT16.rawValue, scale: 1000, offset: 0, units: "m/s", accumulated: false)
		mesg.fields[SegmentLapMesg.avgHeartRateFieldNum] = Field(name: "AvgHeartRate", num: SegmentLapMesg.avgHeartRateFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "bpm", accumulated: false)
		mesg.fields[SegmentLapMesg.maxHeartRateFieldNum] = Field(name: "MaxHeartRate", num: SegmentLapMesg.maxHeartRateFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "bpm", accumulated: false)
		mesg.fields[SegmentLapMesg.avgCadenceFieldNum] = Field(name: "AvgCadence", num: SegmentLapMesg.avgCadenceFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "rpm", accumulated: false)
		mesg.fields[SegmentLapMesg.maxCadenceFieldNum] = Field(name: "MaxCadence", num: SegmentLapMesg.maxCadenceFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "rpm", accumulated: false)
		mesg.fields[SegmentLapMesg.avgPowerFieldNum] = Field(name: "AvgPower", num: SegmentLapMesg.avgPowerFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "watts", accumulated: false)
		mesg.fields[SegmentLapMesg.maxPowerFieldNum] = Field(name: "MaxPower", num: SegmentLapMesg.maxPowerFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "watts", accumulated: false)
		mesg.fields[SegmentLapMesg.totalAscentFieldNum] = Field(name: "TotalAscent", num: SegmentLapMesg.totalAscentFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "m", accumulated: false)
		mesg.fields[SegmentLapMesg.totalDescentFieldNum] = Field(name: "TotalDescent", num: SegmentLapMesg.totalDescentFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "m", accumulated: false)
		mesg.fields[SegmentLapMesg.sportFieldNum] = Field(name: "Sport", num: SegmentLapMesg.sportFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SegmentLapMesg.eventGroupFieldNum] = Field(name: "EventGroup", num: SegmentLapMesg.eventGroupFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SegmentLapMesg.necLatFieldNum] = Field(name: "NecLat", num: SegmentLapMesg.necLatFieldNum, type: BaseType.SINT32.rawValue, scale: 1, offset: 0, units: "semicircles", accumulated: false)
		mesg.fields[SegmentLapMesg.necLongFieldNum] = Field(name: "NecLong", num: SegmentLapMesg.necLongFieldNum, type: BaseType.SINT32.rawValue, scale: 1, offset: 0, units: "semicircles", accumulated: false)
		mesg.fields[SegmentLapMesg.swcLatFieldNum] = Field(name: "SwcLat", num: SegmentLapMesg.swcLatFieldNum, type: BaseType.SINT32.rawValue, scale: 1, offset: 0, units: "semicircles", accumulated: false)
		mesg.fields[SegmentLapMesg.swcLongFieldNum] = Field(name: "SwcLong", num: SegmentLapMesg.swcLongFieldNum, type: BaseType.SINT32.rawValue, scale: 1, offset: 0, units: "semicircles", accumulated: false)
		mesg.fields[SegmentLapMesg.nameFieldNum] = Field(name: "Name", num: SegmentLapMesg.nameFieldNum, type: BaseType.STRING.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SegmentLapMesg.normalizedPowerFieldNum] = Field(name: "NormalizedPower", num: SegmentLapMesg.normalizedPowerFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "watts", accumulated: false)
		mesg.fields[SegmentLapMesg.leftRightBalanceFieldNum] = Field(name: "LeftRightBalance", num: SegmentLapMesg.leftRightBalanceFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SegmentLapMesg.subSportFieldNum] = Field(name: "SubSport", num: SegmentLapMesg.subSportFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SegmentLapMesg.totalWorkFieldNum] = Field(name: "TotalWork", num: SegmentLapMesg.totalWorkFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "J", accumulated: false)
		mesg.fields[SegmentLapMesg.avgAltitudeFieldNum] = Field(name: "AvgAltitude", num: SegmentLapMesg.avgAltitudeFieldNum, type: BaseType.UINT16.rawValue, scale: 5, offset: 500, units: "m", accumulated: false)
		mesg.fields[SegmentLapMesg.avgAltitudeFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: enhancedAvgAltitudeFieldNum, accumulated: false, bits: 16, scale: 5, offset: 500))
		mesg.fields[SegmentLapMesg.maxAltitudeFieldNum] = Field(name: "MaxAltitude", num: SegmentLapMesg.maxAltitudeFieldNum, type: BaseType.UINT16.rawValue, scale: 5, offset: 500, units: "m", accumulated: false)
		mesg.fields[SegmentLapMesg.maxAltitudeFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: enhancedMaxAltitudeFieldNum, accumulated: false, bits: 16, scale: 5, offset: 500))
		mesg.fields[SegmentLapMesg.gpsAccuracyFieldNum] = Field(name: "GpsAccuracy", num: SegmentLapMesg.gpsAccuracyFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "m", accumulated: false)
		mesg.fields[SegmentLapMesg.avgGradeFieldNum] = Field(name: "AvgGrade", num: SegmentLapMesg.avgGradeFieldNum, type: BaseType.SINT16.rawValue, scale: 100, offset: 0, units: "%", accumulated: false)
		mesg.fields[SegmentLapMesg.avgPosGradeFieldNum] = Field(name: "AvgPosGrade", num: SegmentLapMesg.avgPosGradeFieldNum, type: BaseType.SINT16.rawValue, scale: 100, offset: 0, units: "%", accumulated: false)
		mesg.fields[SegmentLapMesg.avgNegGradeFieldNum] = Field(name: "AvgNegGrade", num: SegmentLapMesg.avgNegGradeFieldNum, type: BaseType.SINT16.rawValue, scale: 100, offset: 0, units: "%", accumulated: false)
		mesg.fields[SegmentLapMesg.maxPosGradeFieldNum] = Field(name: "MaxPosGrade", num: SegmentLapMesg.maxPosGradeFieldNum, type: BaseType.SINT16.rawValue, scale: 100, offset: 0, units: "%", accumulated: false)
		mesg.fields[SegmentLapMesg.maxNegGradeFieldNum] = Field(name: "MaxNegGrade", num: SegmentLapMesg.maxNegGradeFieldNum, type: BaseType.SINT16.rawValue, scale: 100, offset: 0, units: "%", accumulated: false)
		mesg.fields[SegmentLapMesg.avgTemperatureFieldNum] = Field(name: "AvgTemperature", num: SegmentLapMesg.avgTemperatureFieldNum, type: BaseType.SINT8.rawValue, scale: 1, offset: 0, units: "C", accumulated: false)
		mesg.fields[SegmentLapMesg.maxTemperatureFieldNum] = Field(name: "MaxTemperature", num: SegmentLapMesg.maxTemperatureFieldNum, type: BaseType.SINT8.rawValue, scale: 1, offset: 0, units: "C", accumulated: false)
		mesg.fields[SegmentLapMesg.totalMovingTimeFieldNum] = Field(name: "TotalMovingTime", num: SegmentLapMesg.totalMovingTimeFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "s", accumulated: false)
		mesg.fields[SegmentLapMesg.avgPosVerticalSpeedFieldNum] = Field(name: "AvgPosVerticalSpeed", num: SegmentLapMesg.avgPosVerticalSpeedFieldNum, type: BaseType.SINT16.rawValue, scale: 1000, offset: 0, units: "m/s", accumulated: false)
		mesg.fields[SegmentLapMesg.avgNegVerticalSpeedFieldNum] = Field(name: "AvgNegVerticalSpeed", num: SegmentLapMesg.avgNegVerticalSpeedFieldNum, type: BaseType.SINT16.rawValue, scale: 1000, offset: 0, units: "m/s", accumulated: false)
		mesg.fields[SegmentLapMesg.maxPosVerticalSpeedFieldNum] = Field(name: "MaxPosVerticalSpeed", num: SegmentLapMesg.maxPosVerticalSpeedFieldNum, type: BaseType.SINT16.rawValue, scale: 1000, offset: 0, units: "m/s", accumulated: false)
		mesg.fields[SegmentLapMesg.maxNegVerticalSpeedFieldNum] = Field(name: "MaxNegVerticalSpeed", num: SegmentLapMesg.maxNegVerticalSpeedFieldNum, type: BaseType.SINT16.rawValue, scale: 1000, offset: 0, units: "m/s", accumulated: false)
		mesg.fields[SegmentLapMesg.timeInHrZoneFieldNum] = Field(name: "TimeInHrZone", num: SegmentLapMesg.timeInHrZoneFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "s", accumulated: false)
		mesg.fields[SegmentLapMesg.timeInSpeedZoneFieldNum] = Field(name: "TimeInSpeedZone", num: SegmentLapMesg.timeInSpeedZoneFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "s", accumulated: false)
		mesg.fields[SegmentLapMesg.timeInCadenceZoneFieldNum] = Field(name: "TimeInCadenceZone", num: SegmentLapMesg.timeInCadenceZoneFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "s", accumulated: false)
		mesg.fields[SegmentLapMesg.timeInPowerZoneFieldNum] = Field(name: "TimeInPowerZone", num: SegmentLapMesg.timeInPowerZoneFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "s", accumulated: false)
		mesg.fields[SegmentLapMesg.repetitionNumFieldNum] = Field(name: "RepetitionNum", num: SegmentLapMesg.repetitionNumFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SegmentLapMesg.minAltitudeFieldNum] = Field(name: "MinAltitude", num: SegmentLapMesg.minAltitudeFieldNum, type: BaseType.UINT16.rawValue, scale: 5, offset: 500, units: "m", accumulated: false)
		mesg.fields[SegmentLapMesg.minAltitudeFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: enhancedMinAltitudeFieldNum, accumulated: false, bits: 16, scale: 5, offset: 500))
		mesg.fields[SegmentLapMesg.minHeartRateFieldNum] = Field(name: "MinHeartRate", num: SegmentLapMesg.minHeartRateFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "bpm", accumulated: false)
		mesg.fields[SegmentLapMesg.activeTimeFieldNum] = Field(name: "ActiveTime", num: SegmentLapMesg.activeTimeFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "s", accumulated: false)
		mesg.fields[SegmentLapMesg.wktStepIndexFieldNum] = Field(name: "WktStepIndex", num: SegmentLapMesg.wktStepIndexFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SegmentLapMesg.sportEventFieldNum] = Field(name: "SportEvent", num: SegmentLapMesg.sportEventFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SegmentLapMesg.avgLeftTorqueEffectivenessFieldNum] = Field(name: "AvgLeftTorqueEffectiveness", num: SegmentLapMesg.avgLeftTorqueEffectivenessFieldNum, type: BaseType.UINT8.rawValue, scale: 2, offset: 0, units: "percent", accumulated: false)
		mesg.fields[SegmentLapMesg.avgRightTorqueEffectivenessFieldNum] = Field(name: "AvgRightTorqueEffectiveness", num: SegmentLapMesg.avgRightTorqueEffectivenessFieldNum, type: BaseType.UINT8.rawValue, scale: 2, offset: 0, units: "percent", accumulated: false)
		mesg.fields[SegmentLapMesg.avgLeftPedalSmoothnessFieldNum] = Field(name: "AvgLeftPedalSmoothness", num: SegmentLapMesg.avgLeftPedalSmoothnessFieldNum, type: BaseType.UINT8.rawValue, scale: 2, offset: 0, units: "percent", accumulated: false)
		mesg.fields[SegmentLapMesg.avgRightPedalSmoothnessFieldNum] = Field(name: "AvgRightPedalSmoothness", num: SegmentLapMesg.avgRightPedalSmoothnessFieldNum, type: BaseType.UINT8.rawValue, scale: 2, offset: 0, units: "percent", accumulated: false)
		mesg.fields[SegmentLapMesg.avgCombinedPedalSmoothnessFieldNum] = Field(name: "AvgCombinedPedalSmoothness", num: SegmentLapMesg.avgCombinedPedalSmoothnessFieldNum, type: BaseType.UINT8.rawValue, scale: 2, offset: 0, units: "percent", accumulated: false)
		mesg.fields[SegmentLapMesg.statusFieldNum] = Field(name: "Status", num: SegmentLapMesg.statusFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SegmentLapMesg.uuidFieldNum] = Field(name: "Uuid", num: SegmentLapMesg.uuidFieldNum, type: BaseType.STRING.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SegmentLapMesg.avgFractionalCadenceFieldNum] = Field(name: "AvgFractionalCadence", num: SegmentLapMesg.avgFractionalCadenceFieldNum, type: BaseType.UINT8.rawValue, scale: 128, offset: 0, units: "rpm", accumulated: false)
		mesg.fields[SegmentLapMesg.maxFractionalCadenceFieldNum] = Field(name: "MaxFractionalCadence", num: SegmentLapMesg.maxFractionalCadenceFieldNum, type: BaseType.UINT8.rawValue, scale: 128, offset: 0, units: "rpm", accumulated: false)
		mesg.fields[SegmentLapMesg.totalFractionalCyclesFieldNum] = Field(name: "TotalFractionalCycles", num: SegmentLapMesg.totalFractionalCyclesFieldNum, type: BaseType.UINT8.rawValue, scale: 128, offset: 0, units: "cycles", accumulated: false)
		mesg.fields[SegmentLapMesg.frontGearShiftCountFieldNum] = Field(name: "FrontGearShiftCount", num: SegmentLapMesg.frontGearShiftCountFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SegmentLapMesg.rearGearShiftCountFieldNum] = Field(name: "RearGearShiftCount", num: SegmentLapMesg.rearGearShiftCountFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SegmentLapMesg.timeStandingFieldNum] = Field(name: "TimeStanding", num: SegmentLapMesg.timeStandingFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "s", accumulated: false)
		mesg.fields[SegmentLapMesg.standCountFieldNum] = Field(name: "StandCount", num: SegmentLapMesg.standCountFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SegmentLapMesg.avgLeftPcoFieldNum] = Field(name: "AvgLeftPco", num: SegmentLapMesg.avgLeftPcoFieldNum, type: BaseType.SINT8.rawValue, scale: 1, offset: 0, units: "mm", accumulated: false)
		mesg.fields[SegmentLapMesg.avgRightPcoFieldNum] = Field(name: "AvgRightPco", num: SegmentLapMesg.avgRightPcoFieldNum, type: BaseType.SINT8.rawValue, scale: 1, offset: 0, units: "mm", accumulated: false)
		mesg.fields[SegmentLapMesg.avgLeftPowerPhaseFieldNum] = Field(name: "AvgLeftPowerPhase", num: SegmentLapMesg.avgLeftPowerPhaseFieldNum, type: BaseType.UINT8.rawValue, scale: 0.7111111, offset: 0, units: "degrees", accumulated: false)
		mesg.fields[SegmentLapMesg.avgLeftPowerPhasePeakFieldNum] = Field(name: "AvgLeftPowerPhasePeak", num: SegmentLapMesg.avgLeftPowerPhasePeakFieldNum, type: BaseType.UINT8.rawValue, scale: 0.7111111, offset: 0, units: "degrees", accumulated: false)
		mesg.fields[SegmentLapMesg.avgRightPowerPhaseFieldNum] = Field(name: "AvgRightPowerPhase", num: SegmentLapMesg.avgRightPowerPhaseFieldNum, type: BaseType.UINT8.rawValue, scale: 0.7111111, offset: 0, units: "degrees", accumulated: false)
		mesg.fields[SegmentLapMesg.avgRightPowerPhasePeakFieldNum] = Field(name: "AvgRightPowerPhasePeak", num: SegmentLapMesg.avgRightPowerPhasePeakFieldNum, type: BaseType.UINT8.rawValue, scale: 0.7111111, offset: 0, units: "degrees", accumulated: false)
		mesg.fields[SegmentLapMesg.avgPowerPositionFieldNum] = Field(name: "AvgPowerPosition", num: SegmentLapMesg.avgPowerPositionFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "watts", accumulated: false)
		mesg.fields[SegmentLapMesg.maxPowerPositionFieldNum] = Field(name: "MaxPowerPosition", num: SegmentLapMesg.maxPowerPositionFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "watts", accumulated: false)
		mesg.fields[SegmentLapMesg.avgCadencePositionFieldNum] = Field(name: "AvgCadencePosition", num: SegmentLapMesg.avgCadencePositionFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "rpm", accumulated: false)
		mesg.fields[SegmentLapMesg.maxCadencePositionFieldNum] = Field(name: "MaxCadencePosition", num: SegmentLapMesg.maxCadencePositionFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "rpm", accumulated: false)
		mesg.fields[SegmentLapMesg.manufacturerFieldNum] = Field(name: "Manufacturer", num: SegmentLapMesg.manufacturerFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SegmentLapMesg.totalGritFieldNum] = Field(name: "TotalGrit", num: SegmentLapMesg.totalGritFieldNum, type: BaseType.FLOAT32.rawValue, scale: 1, offset: 0, units: "kGrit", accumulated: false)
		mesg.fields[SegmentLapMesg.totalFlowFieldNum] = Field(name: "TotalFlow", num: SegmentLapMesg.totalFlowFieldNum, type: BaseType.FLOAT32.rawValue, scale: 1, offset: 0, units: "Flow", accumulated: false)
		mesg.fields[SegmentLapMesg.avgGritFieldNum] = Field(name: "AvgGrit", num: SegmentLapMesg.avgGritFieldNum, type: BaseType.FLOAT32.rawValue, scale: 1, offset: 0, units: "kGrit", accumulated: false)
		mesg.fields[SegmentLapMesg.avgFlowFieldNum] = Field(name: "AvgFlow", num: SegmentLapMesg.avgFlowFieldNum, type: BaseType.FLOAT32.rawValue, scale: 1, offset: 0, units: "Flow", accumulated: false)
		mesg.fields[SegmentLapMesg.totalFractionalAscentFieldNum] = Field(name: "TotalFractionalAscent", num: SegmentLapMesg.totalFractionalAscentFieldNum, type: BaseType.UINT8.rawValue, scale: 100, offset: 0, units: "m", accumulated: false)
		mesg.fields[SegmentLapMesg.totalFractionalDescentFieldNum] = Field(name: "TotalFractionalDescent", num: SegmentLapMesg.totalFractionalDescentFieldNum, type: BaseType.UINT8.rawValue, scale: 100, offset: 0, units: "m", accumulated: false)
		mesg.fields[SegmentLapMesg.enhancedAvgAltitudeFieldNum] = Field(name: "EnhancedAvgAltitude", num: SegmentLapMesg.enhancedAvgAltitudeFieldNum, type: BaseType.UINT32.rawValue, scale: 5, offset: 500, units: "m", accumulated: false)
		mesg.fields[SegmentLapMesg.enhancedMaxAltitudeFieldNum] = Field(name: "EnhancedMaxAltitude", num: SegmentLapMesg.enhancedMaxAltitudeFieldNum, type: BaseType.UINT32.rawValue, scale: 5, offset: 500, units: "m", accumulated: false)
		mesg.fields[SegmentLapMesg.enhancedMinAltitudeFieldNum] = Field(name: "EnhancedMinAltitude", num: SegmentLapMesg.enhancedMinAltitudeFieldNum, type: BaseType.UINT32.rawValue, scale: 5, offset: 500, units: "m", accumulated: false)
        return mesg
    }
}