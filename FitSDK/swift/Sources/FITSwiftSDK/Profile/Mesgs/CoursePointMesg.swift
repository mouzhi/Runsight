/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class CoursePointMesg : Mesg {
    public static let messageIndexFieldNum:UInt8 = 254
    public static let timestampFieldNum:UInt8 = 1
    public static let positionLatFieldNum:UInt8 = 2
    public static let positionLongFieldNum:UInt8 = 3
    public static let distanceFieldNum:UInt8 = 4
    public static let typeFieldNum:UInt8 = 5
    public static let nameFieldNum:UInt8 = 6
    public static let favoriteFieldNum:UInt8 = 8

	public init() {
        super.init(mesg: CoursePointMesg.createCoursePointMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getMessageIndex() -> MessageIndex? {
		guard let value = getFieldValue(fieldNum: CoursePointMesg.messageIndexFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setMessageIndex(_ value: MessageIndex) throws {
		try setFieldValue(fieldNum: CoursePointMesg.messageIndexFieldNum, value: value)
	}

	public func getTimestamp() -> DateTime? {
		guard let value = getFieldValue(fieldNum: CoursePointMesg.timestampFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setTimestamp(_ value: DateTime) throws {
		try setFieldValue(fieldNum: CoursePointMesg.timestampFieldNum, value: value.timestamp)
	}

	public func getPositionLat() -> Int32? {
		guard let value = getFieldValue(fieldNum: CoursePointMesg.positionLatFieldNum, index:0) as? Int32 else {
            return nil
        }
		return value
	}

	public func setPositionLat(_ value: Int32) throws {
		try setFieldValue(fieldNum: CoursePointMesg.positionLatFieldNum, value: value)
	}

	public func getPositionLong() -> Int32? {
		guard let value = getFieldValue(fieldNum: CoursePointMesg.positionLongFieldNum, index:0) as? Int32 else {
            return nil
        }
		return value
	}

	public func setPositionLong(_ value: Int32) throws {
		try setFieldValue(fieldNum: CoursePointMesg.positionLongFieldNum, value: value)
	}

	public func getDistance() -> Float64? {
		guard let value = getFieldValue(fieldNum: CoursePointMesg.distanceFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setDistance(_ value: Float64) throws {
		try setFieldValue(fieldNum: CoursePointMesg.distanceFieldNum, value: value)
	}

	public func getType() -> CoursePoint? {
		guard let value = getFieldValue(fieldNum: CoursePointMesg.typeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return CoursePoint(rawValue: value) ?? .invalid
	}

	public func setType(_ value: CoursePoint) throws {
		try setFieldValue(fieldNum: CoursePointMesg.typeFieldNum, value: value.rawValue)
	}

	public func getName() -> String? {
		guard let value = getFieldValue(fieldNum: CoursePointMesg.nameFieldNum, index:0) as? String else {
            return nil
        }
		return value
	}

	public func setName(_ value: String) throws {
		try setFieldValue(fieldNum: CoursePointMesg.nameFieldNum, value: value)
	}

	public func getFavorite() -> Bool? {
		guard let value = getFieldValue(fieldNum: CoursePointMesg.favoriteFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value == 1 ? true : false
	}

	public func setFavorite(_ value: Bool) throws {
		try setFieldValue(fieldNum: CoursePointMesg.favoriteFieldNum, value: value)
	}

	public class func createCoursePointMesg() -> CoursePointMesg {
        let mesg = CoursePointMesg(name: "CoursePoint", num: Profile.MesgNum.coursePoint)
		
		mesg.fields[CoursePointMesg.messageIndexFieldNum] = Field(name: "MessageIndex", num: CoursePointMesg.messageIndexFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[CoursePointMesg.timestampFieldNum] = Field(name: "Timestamp", num: CoursePointMesg.timestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[CoursePointMesg.positionLatFieldNum] = Field(name: "PositionLat", num: CoursePointMesg.positionLatFieldNum, type: BaseType.SINT32.rawValue, scale: 1, offset: 0, units: "semicircles", accumulated: false)
		mesg.fields[CoursePointMesg.positionLongFieldNum] = Field(name: "PositionLong", num: CoursePointMesg.positionLongFieldNum, type: BaseType.SINT32.rawValue, scale: 1, offset: 0, units: "semicircles", accumulated: false)
		mesg.fields[CoursePointMesg.distanceFieldNum] = Field(name: "Distance", num: CoursePointMesg.distanceFieldNum, type: BaseType.UINT32.rawValue, scale: 100, offset: 0, units: "m", accumulated: false)
		mesg.fields[CoursePointMesg.typeFieldNum] = Field(name: "Type", num: CoursePointMesg.typeFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[CoursePointMesg.nameFieldNum] = Field(name: "Name", num: CoursePointMesg.nameFieldNum, type: BaseType.STRING.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[CoursePointMesg.favoriteFieldNum] = Field(name: "Favorite", num: CoursePointMesg.favoriteFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
        return mesg
    }
}