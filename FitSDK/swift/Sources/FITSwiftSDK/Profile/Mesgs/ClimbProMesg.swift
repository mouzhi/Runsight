/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class ClimbProMesg : Mesg {
    public static let timestampFieldNum:UInt8 = 253
    public static let positionLatFieldNum:UInt8 = 0
    public static let positionLongFieldNum:UInt8 = 1
    public static let climbProEventFieldNum:UInt8 = 2
    public static let climbNumberFieldNum:UInt8 = 3
    public static let climbCategoryFieldNum:UInt8 = 4
    public static let currentDistFieldNum:UInt8 = 5

	public init() {
        super.init(mesg: ClimbProMesg.createClimbProMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getTimestamp() -> DateTime? {
		guard let value = getFieldValue(fieldNum: ClimbProMesg.timestampFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setTimestamp(_ value: DateTime) throws {
		try setFieldValue(fieldNum: ClimbProMesg.timestampFieldNum, value: value.timestamp)
	}

	public func getPositionLat() -> Int32? {
		guard let value = getFieldValue(fieldNum: ClimbProMesg.positionLatFieldNum, index:0) as? Int32 else {
            return nil
        }
		return value
	}

	public func setPositionLat(_ value: Int32) throws {
		try setFieldValue(fieldNum: ClimbProMesg.positionLatFieldNum, value: value)
	}

	public func getPositionLong() -> Int32? {
		guard let value = getFieldValue(fieldNum: ClimbProMesg.positionLongFieldNum, index:0) as? Int32 else {
            return nil
        }
		return value
	}

	public func setPositionLong(_ value: Int32) throws {
		try setFieldValue(fieldNum: ClimbProMesg.positionLongFieldNum, value: value)
	}

	public func getClimbProEvent() -> ClimbProEvent? {
		guard let value = getFieldValue(fieldNum: ClimbProMesg.climbProEventFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return ClimbProEvent(rawValue: value) ?? .invalid
	}

	public func setClimbProEvent(_ value: ClimbProEvent) throws {
		try setFieldValue(fieldNum: ClimbProMesg.climbProEventFieldNum, value: value.rawValue)
	}

	public func getClimbNumber() -> UInt16? {
		guard let value = getFieldValue(fieldNum: ClimbProMesg.climbNumberFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setClimbNumber(_ value: UInt16) throws {
		try setFieldValue(fieldNum: ClimbProMesg.climbNumberFieldNum, value: value)
	}

	public func getClimbCategory() -> UInt8? {
		guard let value = getFieldValue(fieldNum: ClimbProMesg.climbCategoryFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setClimbCategory(_ value: UInt8) throws {
		try setFieldValue(fieldNum: ClimbProMesg.climbCategoryFieldNum, value: value)
	}

	public func getCurrentDist() -> Float32? {
		guard let value = getFieldValue(fieldNum: ClimbProMesg.currentDistFieldNum, index:0) as? Float32 else {
            return nil
        }
		return value
	}

	public func setCurrentDist(_ value: Float32) throws {
		try setFieldValue(fieldNum: ClimbProMesg.currentDistFieldNum, value: value)
	}

	public class func createClimbProMesg() -> ClimbProMesg {
        let mesg = ClimbProMesg(name: "ClimbPro", num: Profile.MesgNum.climbPro)
		
		mesg.fields[ClimbProMesg.timestampFieldNum] = Field(name: "Timestamp", num: ClimbProMesg.timestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
		mesg.fields[ClimbProMesg.positionLatFieldNum] = Field(name: "PositionLat", num: ClimbProMesg.positionLatFieldNum, type: BaseType.SINT32.rawValue, scale: 1, offset: 0, units: "semicircles", accumulated: false)
		mesg.fields[ClimbProMesg.positionLongFieldNum] = Field(name: "PositionLong", num: ClimbProMesg.positionLongFieldNum, type: BaseType.SINT32.rawValue, scale: 1, offset: 0, units: "semicircles", accumulated: false)
		mesg.fields[ClimbProMesg.climbProEventFieldNum] = Field(name: "ClimbProEvent", num: ClimbProMesg.climbProEventFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[ClimbProMesg.climbNumberFieldNum] = Field(name: "ClimbNumber", num: ClimbProMesg.climbNumberFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[ClimbProMesg.climbCategoryFieldNum] = Field(name: "ClimbCategory", num: ClimbProMesg.climbCategoryFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[ClimbProMesg.currentDistFieldNum] = Field(name: "CurrentDist", num: ClimbProMesg.currentDistFieldNum, type: BaseType.FLOAT32.rawValue, scale: 1, offset: 0, units: "m", accumulated: false)
        return mesg
    }
}