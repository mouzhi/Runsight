/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class DeviceSettingsMesg : Mesg {
    public static let activeTimeZoneFieldNum:UInt8 = 0
    public static let utcOffsetFieldNum:UInt8 = 1
    public static let timeOffsetFieldNum:UInt8 = 2
    public static let timeModeFieldNum:UInt8 = 4
    public static let timeZoneOffsetFieldNum:UInt8 = 5
    public static let backlightModeFieldNum:UInt8 = 12
    public static let activityTrackerEnabledFieldNum:UInt8 = 36
    public static let clockTimeFieldNum:UInt8 = 39
    public static let pagesEnabledFieldNum:UInt8 = 40
    public static let moveAlertEnabledFieldNum:UInt8 = 46
    public static let dateModeFieldNum:UInt8 = 47
    public static let displayOrientationFieldNum:UInt8 = 55
    public static let mountingSideFieldNum:UInt8 = 56
    public static let defaultPageFieldNum:UInt8 = 57
    public static let autosyncMinStepsFieldNum:UInt8 = 58
    public static let autosyncMinTimeFieldNum:UInt8 = 59
    public static let lactateThresholdAutodetectEnabledFieldNum:UInt8 = 80
    public static let bleAutoUploadEnabledFieldNum:UInt8 = 86
    public static let autoSyncFrequencyFieldNum:UInt8 = 89
    public static let autoActivityDetectFieldNum:UInt8 = 90
    public static let numberOfScreensFieldNum:UInt8 = 94
    public static let smartNotificationDisplayOrientationFieldNum:UInt8 = 95
    public static let tapInterfaceFieldNum:UInt8 = 134
    public static let tapSensitivityFieldNum:UInt8 = 174

	public init() {
        super.init(mesg: DeviceSettingsMesg.createDeviceSettingsMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getActiveTimeZone() -> UInt8? {
		guard let value = getFieldValue(fieldNum: DeviceSettingsMesg.activeTimeZoneFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setActiveTimeZone(_ value: UInt8) throws {
		try setFieldValue(fieldNum: DeviceSettingsMesg.activeTimeZoneFieldNum, value: value)
	}

	public func getUtcOffset() -> UInt32? {
		guard let value = getFieldValue(fieldNum: DeviceSettingsMesg.utcOffsetFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setUtcOffset(_ value: UInt32) throws {
		try setFieldValue(fieldNum: DeviceSettingsMesg.utcOffsetFieldNum, value: value)
	}

	public func getNumTimeOffset() -> UInt8 {
		guard let field = getField(fieldNum: DeviceSettingsMesg.timeOffsetFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getTimeOffset() -> [UInt32?]? {
		guard let field = getField(fieldNum: DeviceSettingsMesg.timeOffsetFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt32?]
	}

	public func getTimeOffset(index: Int) -> UInt32? {
		guard let value = getFieldValue(fieldNum: DeviceSettingsMesg.timeOffsetFieldNum, index: index) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setTimeOffset(index: Int, value: UInt32) throws {
		try setFieldValue(fieldNum: DeviceSettingsMesg.timeOffsetFieldNum, value: value, index: index)
	}

	public func getNumTimeMode() -> UInt8 {
		guard let field = getField(fieldNum: DeviceSettingsMesg.timeModeFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getTimeMode() -> [TimeMode?]? {
		guard let field = getField(fieldNum: DeviceSettingsMesg.timeModeFieldNum) else {
			return nil
		}

		let rawValues = field.toArray() as [Any?]
		var values = [TimeMode]()
		for rawValue in rawValues {
			values.append(
				TimeMode(rawValue: rawValue as! UInt8)!
			)
		}

		return values
	}

	public func getTimeMode(index: Int) -> TimeMode? {
		guard let value = getFieldValue(fieldNum: DeviceSettingsMesg.timeModeFieldNum, index: index) as? UInt8 else {
            return nil
        }
		return TimeMode(rawValue: value) ?? .invalid
	}

	public func setTimeMode(index: Int, value: TimeMode) throws {
		try setFieldValue(fieldNum: DeviceSettingsMesg.timeModeFieldNum, value: value.rawValue, index: index)
	}

	public func getNumTimeZoneOffset() -> UInt8 {
		guard let field = getField(fieldNum: DeviceSettingsMesg.timeZoneOffsetFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getTimeZoneOffset() -> [Float64?]? {
		guard let field = getField(fieldNum: DeviceSettingsMesg.timeZoneOffsetFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getTimeZoneOffset(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: DeviceSettingsMesg.timeZoneOffsetFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTimeZoneOffset(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: DeviceSettingsMesg.timeZoneOffsetFieldNum, value: value, index: index)
	}

	public func getBacklightMode() -> BacklightMode? {
		guard let value = getFieldValue(fieldNum: DeviceSettingsMesg.backlightModeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return BacklightMode(rawValue: value) ?? .invalid
	}

	public func setBacklightMode(_ value: BacklightMode) throws {
		try setFieldValue(fieldNum: DeviceSettingsMesg.backlightModeFieldNum, value: value.rawValue)
	}

	public func getActivityTrackerEnabled() -> Bool? {
		guard let value = getFieldValue(fieldNum: DeviceSettingsMesg.activityTrackerEnabledFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value == 1 ? true : false
	}

	public func setActivityTrackerEnabled(_ value: Bool) throws {
		try setFieldValue(fieldNum: DeviceSettingsMesg.activityTrackerEnabledFieldNum, value: value)
	}

	public func getClockTime() -> DateTime? {
		guard let value = getFieldValue(fieldNum: DeviceSettingsMesg.clockTimeFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setClockTime(_ value: DateTime) throws {
		try setFieldValue(fieldNum: DeviceSettingsMesg.clockTimeFieldNum, value: value.timestamp)
	}

	public func getNumPagesEnabled() -> UInt8 {
		guard let field = getField(fieldNum: DeviceSettingsMesg.pagesEnabledFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getPagesEnabled() -> [UInt16?]? {
		guard let field = getField(fieldNum: DeviceSettingsMesg.pagesEnabledFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt16?]
	}

	public func getPagesEnabled(index: Int) -> UInt16? {
		guard let value = getFieldValue(fieldNum: DeviceSettingsMesg.pagesEnabledFieldNum, index: index) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setPagesEnabled(index: Int, value: UInt16) throws {
		try setFieldValue(fieldNum: DeviceSettingsMesg.pagesEnabledFieldNum, value: value, index: index)
	}

	public func getMoveAlertEnabled() -> Bool? {
		guard let value = getFieldValue(fieldNum: DeviceSettingsMesg.moveAlertEnabledFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value == 1 ? true : false
	}

	public func setMoveAlertEnabled(_ value: Bool) throws {
		try setFieldValue(fieldNum: DeviceSettingsMesg.moveAlertEnabledFieldNum, value: value)
	}

	public func getDateMode() -> DateMode? {
		guard let value = getFieldValue(fieldNum: DeviceSettingsMesg.dateModeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return DateMode(rawValue: value) ?? .invalid
	}

	public func setDateMode(_ value: DateMode) throws {
		try setFieldValue(fieldNum: DeviceSettingsMesg.dateModeFieldNum, value: value.rawValue)
	}

	public func getDisplayOrientation() -> DisplayOrientation? {
		guard let value = getFieldValue(fieldNum: DeviceSettingsMesg.displayOrientationFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return DisplayOrientation(rawValue: value) ?? .invalid
	}

	public func setDisplayOrientation(_ value: DisplayOrientation) throws {
		try setFieldValue(fieldNum: DeviceSettingsMesg.displayOrientationFieldNum, value: value.rawValue)
	}

	public func getMountingSide() -> Side? {
		guard let value = getFieldValue(fieldNum: DeviceSettingsMesg.mountingSideFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return Side(rawValue: value) ?? .invalid
	}

	public func setMountingSide(_ value: Side) throws {
		try setFieldValue(fieldNum: DeviceSettingsMesg.mountingSideFieldNum, value: value.rawValue)
	}

	public func getNumDefaultPage() -> UInt8 {
		guard let field = getField(fieldNum: DeviceSettingsMesg.defaultPageFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getDefaultPage() -> [UInt16?]? {
		guard let field = getField(fieldNum: DeviceSettingsMesg.defaultPageFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt16?]
	}

	public func getDefaultPage(index: Int) -> UInt16? {
		guard let value = getFieldValue(fieldNum: DeviceSettingsMesg.defaultPageFieldNum, index: index) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setDefaultPage(index: Int, value: UInt16) throws {
		try setFieldValue(fieldNum: DeviceSettingsMesg.defaultPageFieldNum, value: value, index: index)
	}

	public func getAutosyncMinSteps() -> UInt16? {
		guard let value = getFieldValue(fieldNum: DeviceSettingsMesg.autosyncMinStepsFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setAutosyncMinSteps(_ value: UInt16) throws {
		try setFieldValue(fieldNum: DeviceSettingsMesg.autosyncMinStepsFieldNum, value: value)
	}

	public func getAutosyncMinTime() -> UInt16? {
		guard let value = getFieldValue(fieldNum: DeviceSettingsMesg.autosyncMinTimeFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setAutosyncMinTime(_ value: UInt16) throws {
		try setFieldValue(fieldNum: DeviceSettingsMesg.autosyncMinTimeFieldNum, value: value)
	}

	public func getLactateThresholdAutodetectEnabled() -> Bool? {
		guard let value = getFieldValue(fieldNum: DeviceSettingsMesg.lactateThresholdAutodetectEnabledFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value == 1 ? true : false
	}

	public func setLactateThresholdAutodetectEnabled(_ value: Bool) throws {
		try setFieldValue(fieldNum: DeviceSettingsMesg.lactateThresholdAutodetectEnabledFieldNum, value: value)
	}

	public func getBleAutoUploadEnabled() -> Bool? {
		guard let value = getFieldValue(fieldNum: DeviceSettingsMesg.bleAutoUploadEnabledFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value == 1 ? true : false
	}

	public func setBleAutoUploadEnabled(_ value: Bool) throws {
		try setFieldValue(fieldNum: DeviceSettingsMesg.bleAutoUploadEnabledFieldNum, value: value)
	}

	public func getAutoSyncFrequency() -> AutoSyncFrequency? {
		guard let value = getFieldValue(fieldNum: DeviceSettingsMesg.autoSyncFrequencyFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return AutoSyncFrequency(rawValue: value) ?? .invalid
	}

	public func setAutoSyncFrequency(_ value: AutoSyncFrequency) throws {
		try setFieldValue(fieldNum: DeviceSettingsMesg.autoSyncFrequencyFieldNum, value: value.rawValue)
	}

	public func getAutoActivityDetect() -> AutoActivityDetect? {
		guard let value = getFieldValue(fieldNum: DeviceSettingsMesg.autoActivityDetectFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setAutoActivityDetect(_ value: AutoActivityDetect) throws {
		try setFieldValue(fieldNum: DeviceSettingsMesg.autoActivityDetectFieldNum, value: value)
	}

	public func getNumberOfScreens() -> UInt8? {
		guard let value = getFieldValue(fieldNum: DeviceSettingsMesg.numberOfScreensFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setNumberOfScreens(_ value: UInt8) throws {
		try setFieldValue(fieldNum: DeviceSettingsMesg.numberOfScreensFieldNum, value: value)
	}

	public func getSmartNotificationDisplayOrientation() -> DisplayOrientation? {
		guard let value = getFieldValue(fieldNum: DeviceSettingsMesg.smartNotificationDisplayOrientationFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return DisplayOrientation(rawValue: value) ?? .invalid
	}

	public func setSmartNotificationDisplayOrientation(_ value: DisplayOrientation) throws {
		try setFieldValue(fieldNum: DeviceSettingsMesg.smartNotificationDisplayOrientationFieldNum, value: value.rawValue)
	}

	public func getTapInterface() -> Switch? {
		guard let value = getFieldValue(fieldNum: DeviceSettingsMesg.tapInterfaceFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return Switch(rawValue: value) ?? .invalid
	}

	public func setTapInterface(_ value: Switch) throws {
		try setFieldValue(fieldNum: DeviceSettingsMesg.tapInterfaceFieldNum, value: value.rawValue)
	}

	public func getTapSensitivity() -> TapSensitivity? {
		guard let value = getFieldValue(fieldNum: DeviceSettingsMesg.tapSensitivityFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return TapSensitivity(rawValue: value) ?? .invalid
	}

	public func setTapSensitivity(_ value: TapSensitivity) throws {
		try setFieldValue(fieldNum: DeviceSettingsMesg.tapSensitivityFieldNum, value: value.rawValue)
	}

	public class func createDeviceSettingsMesg() -> DeviceSettingsMesg {
        let mesg = DeviceSettingsMesg(name: "DeviceSettings", num: Profile.MesgNum.deviceSettings)
		
		mesg.fields[DeviceSettingsMesg.activeTimeZoneFieldNum] = Field(name: "ActiveTimeZone", num: DeviceSettingsMesg.activeTimeZoneFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DeviceSettingsMesg.utcOffsetFieldNum] = Field(name: "UtcOffset", num: DeviceSettingsMesg.utcOffsetFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DeviceSettingsMesg.timeOffsetFieldNum] = Field(name: "TimeOffset", num: DeviceSettingsMesg.timeOffsetFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
		mesg.fields[DeviceSettingsMesg.timeModeFieldNum] = Field(name: "TimeMode", num: DeviceSettingsMesg.timeModeFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DeviceSettingsMesg.timeZoneOffsetFieldNum] = Field(name: "TimeZoneOffset", num: DeviceSettingsMesg.timeZoneOffsetFieldNum, type: BaseType.SINT8.rawValue, scale: 4, offset: 0, units: "hr", accumulated: false)
		mesg.fields[DeviceSettingsMesg.backlightModeFieldNum] = Field(name: "BacklightMode", num: DeviceSettingsMesg.backlightModeFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DeviceSettingsMesg.activityTrackerEnabledFieldNum] = Field(name: "ActivityTrackerEnabled", num: DeviceSettingsMesg.activityTrackerEnabledFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DeviceSettingsMesg.clockTimeFieldNum] = Field(name: "ClockTime", num: DeviceSettingsMesg.clockTimeFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DeviceSettingsMesg.pagesEnabledFieldNum] = Field(name: "PagesEnabled", num: DeviceSettingsMesg.pagesEnabledFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DeviceSettingsMesg.moveAlertEnabledFieldNum] = Field(name: "MoveAlertEnabled", num: DeviceSettingsMesg.moveAlertEnabledFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DeviceSettingsMesg.dateModeFieldNum] = Field(name: "DateMode", num: DeviceSettingsMesg.dateModeFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DeviceSettingsMesg.displayOrientationFieldNum] = Field(name: "DisplayOrientation", num: DeviceSettingsMesg.displayOrientationFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DeviceSettingsMesg.mountingSideFieldNum] = Field(name: "MountingSide", num: DeviceSettingsMesg.mountingSideFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DeviceSettingsMesg.defaultPageFieldNum] = Field(name: "DefaultPage", num: DeviceSettingsMesg.defaultPageFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DeviceSettingsMesg.autosyncMinStepsFieldNum] = Field(name: "AutosyncMinSteps", num: DeviceSettingsMesg.autosyncMinStepsFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "steps", accumulated: false)
		mesg.fields[DeviceSettingsMesg.autosyncMinTimeFieldNum] = Field(name: "AutosyncMinTime", num: DeviceSettingsMesg.autosyncMinTimeFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "minutes", accumulated: false)
		mesg.fields[DeviceSettingsMesg.lactateThresholdAutodetectEnabledFieldNum] = Field(name: "LactateThresholdAutodetectEnabled", num: DeviceSettingsMesg.lactateThresholdAutodetectEnabledFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DeviceSettingsMesg.bleAutoUploadEnabledFieldNum] = Field(name: "BleAutoUploadEnabled", num: DeviceSettingsMesg.bleAutoUploadEnabledFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DeviceSettingsMesg.autoSyncFrequencyFieldNum] = Field(name: "AutoSyncFrequency", num: DeviceSettingsMesg.autoSyncFrequencyFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DeviceSettingsMesg.autoActivityDetectFieldNum] = Field(name: "AutoActivityDetect", num: DeviceSettingsMesg.autoActivityDetectFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DeviceSettingsMesg.numberOfScreensFieldNum] = Field(name: "NumberOfScreens", num: DeviceSettingsMesg.numberOfScreensFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DeviceSettingsMesg.smartNotificationDisplayOrientationFieldNum] = Field(name: "SmartNotificationDisplayOrientation", num: DeviceSettingsMesg.smartNotificationDisplayOrientationFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DeviceSettingsMesg.tapInterfaceFieldNum] = Field(name: "TapInterface", num: DeviceSettingsMesg.tapInterfaceFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DeviceSettingsMesg.tapSensitivityFieldNum] = Field(name: "TapSensitivity", num: DeviceSettingsMesg.tapSensitivityFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
        return mesg
    }
}