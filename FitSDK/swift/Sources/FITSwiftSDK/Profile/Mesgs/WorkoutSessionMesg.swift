/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class WorkoutSessionMesg : Mesg {
    public static let messageIndexFieldNum:UInt8 = 254
    public static let sportFieldNum:UInt8 = 0
    public static let subSportFieldNum:UInt8 = 1
    public static let numValidStepsFieldNum:UInt8 = 2
    public static let firstStepIndexFieldNum:UInt8 = 3
    public static let poolLengthFieldNum:UInt8 = 4
    public static let poolLengthUnitFieldNum:UInt8 = 5

	public init() {
        super.init(mesg: WorkoutSessionMesg.createWorkoutSessionMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getMessageIndex() -> MessageIndex? {
		guard let value = getFieldValue(fieldNum: WorkoutSessionMesg.messageIndexFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setMessageIndex(_ value: MessageIndex) throws {
		try setFieldValue(fieldNum: WorkoutSessionMesg.messageIndexFieldNum, value: value)
	}

	public func getSport() -> Sport? {
		guard let value = getFieldValue(fieldNum: WorkoutSessionMesg.sportFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return Sport(rawValue: value) ?? .invalid
	}

	public func setSport(_ value: Sport) throws {
		try setFieldValue(fieldNum: WorkoutSessionMesg.sportFieldNum, value: value.rawValue)
	}

	public func getSubSport() -> SubSport? {
		guard let value = getFieldValue(fieldNum: WorkoutSessionMesg.subSportFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return SubSport(rawValue: value) ?? .invalid
	}

	public func setSubSport(_ value: SubSport) throws {
		try setFieldValue(fieldNum: WorkoutSessionMesg.subSportFieldNum, value: value.rawValue)
	}

	public func getNumValidSteps() -> UInt16? {
		guard let value = getFieldValue(fieldNum: WorkoutSessionMesg.numValidStepsFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setNumValidSteps(_ value: UInt16) throws {
		try setFieldValue(fieldNum: WorkoutSessionMesg.numValidStepsFieldNum, value: value)
	}

	public func getFirstStepIndex() -> UInt16? {
		guard let value = getFieldValue(fieldNum: WorkoutSessionMesg.firstStepIndexFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setFirstStepIndex(_ value: UInt16) throws {
		try setFieldValue(fieldNum: WorkoutSessionMesg.firstStepIndexFieldNum, value: value)
	}

	public func getPoolLength() -> Float64? {
		guard let value = getFieldValue(fieldNum: WorkoutSessionMesg.poolLengthFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setPoolLength(_ value: Float64) throws {
		try setFieldValue(fieldNum: WorkoutSessionMesg.poolLengthFieldNum, value: value)
	}

	public func getPoolLengthUnit() -> DisplayMeasure? {
		guard let value = getFieldValue(fieldNum: WorkoutSessionMesg.poolLengthUnitFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return DisplayMeasure(rawValue: value) ?? .invalid
	}

	public func setPoolLengthUnit(_ value: DisplayMeasure) throws {
		try setFieldValue(fieldNum: WorkoutSessionMesg.poolLengthUnitFieldNum, value: value.rawValue)
	}

	public class func createWorkoutSessionMesg() -> WorkoutSessionMesg {
        let mesg = WorkoutSessionMesg(name: "WorkoutSession", num: Profile.MesgNum.workoutSession)
		
		mesg.fields[WorkoutSessionMesg.messageIndexFieldNum] = Field(name: "MessageIndex", num: WorkoutSessionMesg.messageIndexFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[WorkoutSessionMesg.sportFieldNum] = Field(name: "Sport", num: WorkoutSessionMesg.sportFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[WorkoutSessionMesg.subSportFieldNum] = Field(name: "SubSport", num: WorkoutSessionMesg.subSportFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[WorkoutSessionMesg.numValidStepsFieldNum] = Field(name: "NumValidSteps", num: WorkoutSessionMesg.numValidStepsFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[WorkoutSessionMesg.firstStepIndexFieldNum] = Field(name: "FirstStepIndex", num: WorkoutSessionMesg.firstStepIndexFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[WorkoutSessionMesg.poolLengthFieldNum] = Field(name: "PoolLength", num: WorkoutSessionMesg.poolLengthFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "m", accumulated: false)
		mesg.fields[WorkoutSessionMesg.poolLengthUnitFieldNum] = Field(name: "PoolLengthUnit", num: WorkoutSessionMesg.poolLengthUnitFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
        return mesg
    }
}