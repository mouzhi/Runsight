/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class TrainingSettingsMesg : Mesg {
    public static let targetDistanceFieldNum:UInt8 = 31
    public static let targetSpeedFieldNum:UInt8 = 32
    public static let targetTimeFieldNum:UInt8 = 33
    public static let preciseTargetSpeedFieldNum:UInt8 = 153

	public init() {
        super.init(mesg: TrainingSettingsMesg.createTrainingSettingsMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getTargetDistance() -> Float64? {
		guard let value = getFieldValue(fieldNum: TrainingSettingsMesg.targetDistanceFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTargetDistance(_ value: Float64) throws {
		try setFieldValue(fieldNum: TrainingSettingsMesg.targetDistanceFieldNum, value: value)
	}

	public func getTargetSpeed() -> Float64? {
		guard let value = getFieldValue(fieldNum: TrainingSettingsMesg.targetSpeedFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTargetSpeed(_ value: Float64) throws {
		try setFieldValue(fieldNum: TrainingSettingsMesg.targetSpeedFieldNum, value: value)
	}

	public func getTargetTime() -> UInt32? {
		guard let value = getFieldValue(fieldNum: TrainingSettingsMesg.targetTimeFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setTargetTime(_ value: UInt32) throws {
		try setFieldValue(fieldNum: TrainingSettingsMesg.targetTimeFieldNum, value: value)
	}

	public func getPreciseTargetSpeed() -> Float64? {
		guard let value = getFieldValue(fieldNum: TrainingSettingsMesg.preciseTargetSpeedFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setPreciseTargetSpeed(_ value: Float64) throws {
		try setFieldValue(fieldNum: TrainingSettingsMesg.preciseTargetSpeedFieldNum, value: value)
	}

	public class func createTrainingSettingsMesg() -> TrainingSettingsMesg {
        let mesg = TrainingSettingsMesg(name: "TrainingSettings", num: Profile.MesgNum.trainingSettings)
		
		mesg.fields[TrainingSettingsMesg.targetDistanceFieldNum] = Field(name: "TargetDistance", num: TrainingSettingsMesg.targetDistanceFieldNum, type: BaseType.UINT32.rawValue, scale: 100, offset: 0, units: "m", accumulated: false)
		mesg.fields[TrainingSettingsMesg.targetSpeedFieldNum] = Field(name: "TargetSpeed", num: TrainingSettingsMesg.targetSpeedFieldNum, type: BaseType.UINT16.rawValue, scale: 1000, offset: 0, units: "m/s", accumulated: false)
		mesg.fields[TrainingSettingsMesg.targetTimeFieldNum] = Field(name: "TargetTime", num: TrainingSettingsMesg.targetTimeFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
		mesg.fields[TrainingSettingsMesg.preciseTargetSpeedFieldNum] = Field(name: "PreciseTargetSpeed", num: TrainingSettingsMesg.preciseTargetSpeedFieldNum, type: BaseType.UINT32.rawValue, scale: 1000000, offset: 0, units: "m/s", accumulated: false)
        return mesg
    }
}