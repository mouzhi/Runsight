/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class FileIdMesg : Mesg {
    public static let typeFieldNum:UInt8 = 0
    public static let manufacturerFieldNum:UInt8 = 1
    public static let productFieldNum:UInt8 = 2
    public static let serialNumberFieldNum:UInt8 = 3
    public static let timeCreatedFieldNum:UInt8 = 4
    public static let numberFieldNum:UInt8 = 5
    public static let productNameFieldNum:UInt8 = 8

	private struct ProductSubField {
        public static let faveroProduct:UInt16 = 0
        public static let garminProduct:UInt16 = 1
        public static let subfields:UInt16 = 2
        public static let active:UInt16 = FIT.SUBFIELD_INDEX.ACTIVE_SUBFIELD
        public static let mainField:UInt16 = FIT.SUBFIELD_INDEX.MAIN_FIELD
    }

	public init() {
        super.init(mesg: FileIdMesg.createFileIdMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getType() -> File? {
		guard let value = getFieldValue(fieldNum: FileIdMesg.typeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return File(rawValue: value) ?? .invalid
	}

	public func setType(_ value: File) throws {
		try setFieldValue(fieldNum: FileIdMesg.typeFieldNum, value: value.rawValue)
	}

	public func getManufacturer() -> Manufacturer? {
		guard let value = getFieldValue(fieldNum: FileIdMesg.manufacturerFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return Manufacturer(rawValue: value) ?? .invalid
	}

	public func setManufacturer(_ value: Manufacturer) throws {
		try setFieldValue(fieldNum: FileIdMesg.manufacturerFieldNum, value: value.rawValue)
	}

	public func getProduct() -> UInt16? {
		guard let value = getFieldValue(fieldNum: FileIdMesg.productFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setProduct(_ value: UInt16) throws {
		try setFieldValue(fieldNum: FileIdMesg.productFieldNum, value: value)
	}

	public func getFaveroProduct() throws -> FaveroProduct? {
		guard let value = try getFieldValue(fieldNum: FileIdMesg.productFieldNum, index: 0, subFieldIndex: ProductSubField.faveroProduct).map({UInt16(fitValue: $0)}) else {
			return nil
		}
		
		return FaveroProduct(rawValue: value) ?? .invalid
	}

	public func setFaveroProduct(_ value: FaveroProduct) throws {
		try setFieldValue(fieldNum: FileIdMesg.productFieldNum, value: value.rawValue, index: 0, subFieldIndex: ProductSubField.faveroProduct )
	}

	public func getGarminProduct() throws -> GarminProduct? {
		guard let value = try getFieldValue(fieldNum: FileIdMesg.productFieldNum, index: 0, subFieldIndex: ProductSubField.garminProduct).map({UInt16(fitValue: $0)}) else {
			return nil
		}
		
		return GarminProduct(rawValue: value) ?? .invalid
	}

	public func setGarminProduct(_ value: GarminProduct) throws {
		try setFieldValue(fieldNum: FileIdMesg.productFieldNum, value: value.rawValue, index: 0, subFieldIndex: ProductSubField.garminProduct )
	}

	public func getSerialNumber() -> UInt32? {
		guard let value = getFieldValue(fieldNum: FileIdMesg.serialNumberFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setSerialNumber(_ value: UInt32) throws {
		try setFieldValue(fieldNum: FileIdMesg.serialNumberFieldNum, value: value)
	}

	public func getTimeCreated() -> DateTime? {
		guard let value = getFieldValue(fieldNum: FileIdMesg.timeCreatedFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setTimeCreated(_ value: DateTime) throws {
		try setFieldValue(fieldNum: FileIdMesg.timeCreatedFieldNum, value: value.timestamp)
	}

	public func getNumber() -> UInt16? {
		guard let value = getFieldValue(fieldNum: FileIdMesg.numberFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setNumber(_ value: UInt16) throws {
		try setFieldValue(fieldNum: FileIdMesg.numberFieldNum, value: value)
	}

	public func getProductName() -> String? {
		guard let value = getFieldValue(fieldNum: FileIdMesg.productNameFieldNum, index:0) as? String else {
            return nil
        }
		return value
	}

	public func setProductName(_ value: String) throws {
		try setFieldValue(fieldNum: FileIdMesg.productNameFieldNum, value: value)
	}

	public class func createFileIdMesg() -> FileIdMesg {
        let mesg = FileIdMesg(name: "FileId", num: Profile.MesgNum.fileId)
		
		mesg.fields[FileIdMesg.typeFieldNum] = Field(name: "Type", num: FileIdMesg.typeFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[FileIdMesg.manufacturerFieldNum] = Field(name: "Manufacturer", num: FileIdMesg.manufacturerFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[FileIdMesg.productFieldNum] = Field(name: "Product", num: FileIdMesg.productFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
        mesg.fields[FileIdMesg.productFieldNum]?.subFields.append(SubField(name: "FaveroProduct", type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: ""))
        mesg.fields[FileIdMesg.productFieldNum]?.subFields[Int(ProductSubField.faveroProduct)].addMap(refFieldNum: 1, refFieldValue: 263)
        mesg.fields[FileIdMesg.productFieldNum]?.subFields.append(SubField(name: "GarminProduct", type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: ""))
        mesg.fields[FileIdMesg.productFieldNum]?.subFields[Int(ProductSubField.garminProduct)].addMap(refFieldNum: 1, refFieldValue: 1)
        mesg.fields[FileIdMesg.productFieldNum]?.subFields[Int(ProductSubField.garminProduct)].addMap(refFieldNum: 1, refFieldValue: 15)
        mesg.fields[FileIdMesg.productFieldNum]?.subFields[Int(ProductSubField.garminProduct)].addMap(refFieldNum: 1, refFieldValue: 13)
        mesg.fields[FileIdMesg.productFieldNum]?.subFields[Int(ProductSubField.garminProduct)].addMap(refFieldNum: 1, refFieldValue: 89)
		mesg.fields[FileIdMesg.serialNumberFieldNum] = Field(name: "SerialNumber", num: FileIdMesg.serialNumberFieldNum, type: BaseType.UINT32Z.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[FileIdMesg.timeCreatedFieldNum] = Field(name: "TimeCreated", num: FileIdMesg.timeCreatedFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[FileIdMesg.numberFieldNum] = Field(name: "Number", num: FileIdMesg.numberFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[FileIdMesg.productNameFieldNum] = Field(name: "ProductName", num: FileIdMesg.productNameFieldNum, type: BaseType.STRING.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
        return mesg
    }
}