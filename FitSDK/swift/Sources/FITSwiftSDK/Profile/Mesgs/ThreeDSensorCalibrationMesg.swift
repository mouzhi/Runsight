/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class ThreeDSensorCalibrationMesg : Mesg {
    public static let timestampFieldNum:UInt8 = 253
    public static let sensorTypeFieldNum:UInt8 = 0
    public static let calibrationFactorFieldNum:UInt8 = 1
    public static let calibrationDivisorFieldNum:UInt8 = 2
    public static let levelShiftFieldNum:UInt8 = 3
    public static let offsetCalFieldNum:UInt8 = 4
    public static let orientationMatrixFieldNum:UInt8 = 5

	private struct CalibrationFactorSubField {
        public static let accelCalFactor:UInt16 = 0
        public static let gyroCalFactor:UInt16 = 1
        public static let subfields:UInt16 = 2
        public static let active:UInt16 = FIT.SUBFIELD_INDEX.ACTIVE_SUBFIELD
        public static let mainField:UInt16 = FIT.SUBFIELD_INDEX.MAIN_FIELD
    }

	public init() {
        super.init(mesg: ThreeDSensorCalibrationMesg.createThreeDSensorCalibrationMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getTimestamp() -> DateTime? {
		guard let value = getFieldValue(fieldNum: ThreeDSensorCalibrationMesg.timestampFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setTimestamp(_ value: DateTime) throws {
		try setFieldValue(fieldNum: ThreeDSensorCalibrationMesg.timestampFieldNum, value: value.timestamp)
	}

	public func getSensorType() -> SensorType? {
		guard let value = getFieldValue(fieldNum: ThreeDSensorCalibrationMesg.sensorTypeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return SensorType(rawValue: value) ?? .invalid
	}

	public func setSensorType(_ value: SensorType) throws {
		try setFieldValue(fieldNum: ThreeDSensorCalibrationMesg.sensorTypeFieldNum, value: value.rawValue)
	}

	public func getCalibrationFactor() -> UInt32? {
		guard let value = getFieldValue(fieldNum: ThreeDSensorCalibrationMesg.calibrationFactorFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setCalibrationFactor(_ value: UInt32) throws {
		try setFieldValue(fieldNum: ThreeDSensorCalibrationMesg.calibrationFactorFieldNum, value: value)
	}

	public func getAccelCalFactor() throws -> UInt32? {
		guard let value = try getFieldValue(fieldNum: ThreeDSensorCalibrationMesg.calibrationFactorFieldNum, index: 0, subFieldIndex: CalibrationFactorSubField.accelCalFactor).map({UInt32(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setAccelCalFactor(_ value: UInt32) throws {
		try setFieldValue(fieldNum: ThreeDSensorCalibrationMesg.calibrationFactorFieldNum, value: value, index: 0, subFieldIndex: CalibrationFactorSubField.accelCalFactor )
	}

	public func getGyroCalFactor() throws -> UInt32? {
		guard let value = try getFieldValue(fieldNum: ThreeDSensorCalibrationMesg.calibrationFactorFieldNum, index: 0, subFieldIndex: CalibrationFactorSubField.gyroCalFactor).map({UInt32(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setGyroCalFactor(_ value: UInt32) throws {
		try setFieldValue(fieldNum: ThreeDSensorCalibrationMesg.calibrationFactorFieldNum, value: value, index: 0, subFieldIndex: CalibrationFactorSubField.gyroCalFactor )
	}

	public func getCalibrationDivisor() -> UInt32? {
		guard let value = getFieldValue(fieldNum: ThreeDSensorCalibrationMesg.calibrationDivisorFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setCalibrationDivisor(_ value: UInt32) throws {
		try setFieldValue(fieldNum: ThreeDSensorCalibrationMesg.calibrationDivisorFieldNum, value: value)
	}

	public func getLevelShift() -> UInt32? {
		guard let value = getFieldValue(fieldNum: ThreeDSensorCalibrationMesg.levelShiftFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setLevelShift(_ value: UInt32) throws {
		try setFieldValue(fieldNum: ThreeDSensorCalibrationMesg.levelShiftFieldNum, value: value)
	}

	public func getNumOffsetCal() -> UInt8 {
		guard let field = getField(fieldNum: ThreeDSensorCalibrationMesg.offsetCalFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getOffsetCal() -> [Int32?]? {
		guard let field = getField(fieldNum: ThreeDSensorCalibrationMesg.offsetCalFieldNum) else {
			return nil
		}
		return field.toArray() as [Int32?]
	}

	public func getOffsetCal(index: Int) -> Int32? {
		guard let value = getFieldValue(fieldNum: ThreeDSensorCalibrationMesg.offsetCalFieldNum, index: index) as? Int32 else {
            return nil
        }
		return value
	}

	public func setOffsetCal(index: Int, value: Int32) throws {
		try setFieldValue(fieldNum: ThreeDSensorCalibrationMesg.offsetCalFieldNum, value: value, index: index)
	}

	public func getNumOrientationMatrix() -> UInt8 {
		guard let field = getField(fieldNum: ThreeDSensorCalibrationMesg.orientationMatrixFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getOrientationMatrix() -> [Float64?]? {
		guard let field = getField(fieldNum: ThreeDSensorCalibrationMesg.orientationMatrixFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getOrientationMatrix(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: ThreeDSensorCalibrationMesg.orientationMatrixFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setOrientationMatrix(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: ThreeDSensorCalibrationMesg.orientationMatrixFieldNum, value: value, index: index)
	}

	public class func createThreeDSensorCalibrationMesg() -> ThreeDSensorCalibrationMesg {
        let mesg = ThreeDSensorCalibrationMesg(name: "ThreeDSensorCalibration", num: Profile.MesgNum.threeDSensorCalibration)
		
		mesg.fields[ThreeDSensorCalibrationMesg.timestampFieldNum] = Field(name: "Timestamp", num: ThreeDSensorCalibrationMesg.timestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
		mesg.fields[ThreeDSensorCalibrationMesg.sensorTypeFieldNum] = Field(name: "SensorType", num: ThreeDSensorCalibrationMesg.sensorTypeFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[ThreeDSensorCalibrationMesg.calibrationFactorFieldNum] = Field(name: "CalibrationFactor", num: ThreeDSensorCalibrationMesg.calibrationFactorFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
        mesg.fields[ThreeDSensorCalibrationMesg.calibrationFactorFieldNum]?.subFields.append(SubField(name: "AccelCalFactor", type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "g"))
        mesg.fields[ThreeDSensorCalibrationMesg.calibrationFactorFieldNum]?.subFields[Int(CalibrationFactorSubField.accelCalFactor)].addMap(refFieldNum: 0, refFieldValue: 0)
        mesg.fields[ThreeDSensorCalibrationMesg.calibrationFactorFieldNum]?.subFields.append(SubField(name: "GyroCalFactor", type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "deg/s"))
        mesg.fields[ThreeDSensorCalibrationMesg.calibrationFactorFieldNum]?.subFields[Int(CalibrationFactorSubField.gyroCalFactor)].addMap(refFieldNum: 0, refFieldValue: 1)
		mesg.fields[ThreeDSensorCalibrationMesg.calibrationDivisorFieldNum] = Field(name: "CalibrationDivisor", num: ThreeDSensorCalibrationMesg.calibrationDivisorFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "counts", accumulated: false)
		mesg.fields[ThreeDSensorCalibrationMesg.levelShiftFieldNum] = Field(name: "LevelShift", num: ThreeDSensorCalibrationMesg.levelShiftFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[ThreeDSensorCalibrationMesg.offsetCalFieldNum] = Field(name: "OffsetCal", num: ThreeDSensorCalibrationMesg.offsetCalFieldNum, type: BaseType.SINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[ThreeDSensorCalibrationMesg.orientationMatrixFieldNum] = Field(name: "OrientationMatrix", num: ThreeDSensorCalibrationMesg.orientationMatrixFieldNum, type: BaseType.SINT32.rawValue, scale: 65535, offset: 0, units: "", accumulated: false)
        return mesg
    }
}