/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class TotalsMesg : Mesg {
    public static let messageIndexFieldNum:UInt8 = 254
    public static let timestampFieldNum:UInt8 = 253
    public static let timerTimeFieldNum:UInt8 = 0
    public static let distanceFieldNum:UInt8 = 1
    public static let caloriesFieldNum:UInt8 = 2
    public static let sportFieldNum:UInt8 = 3
    public static let elapsedTimeFieldNum:UInt8 = 4
    public static let sessionsFieldNum:UInt8 = 5
    public static let activeTimeFieldNum:UInt8 = 6
    public static let sportIndexFieldNum:UInt8 = 9

	public init() {
        super.init(mesg: TotalsMesg.createTotalsMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getMessageIndex() -> MessageIndex? {
		guard let value = getFieldValue(fieldNum: TotalsMesg.messageIndexFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setMessageIndex(_ value: MessageIndex) throws {
		try setFieldValue(fieldNum: TotalsMesg.messageIndexFieldNum, value: value)
	}

	public func getTimestamp() -> DateTime? {
		guard let value = getFieldValue(fieldNum: TotalsMesg.timestampFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setTimestamp(_ value: DateTime) throws {
		try setFieldValue(fieldNum: TotalsMesg.timestampFieldNum, value: value.timestamp)
	}

	public func getTimerTime() -> UInt32? {
		guard let value = getFieldValue(fieldNum: TotalsMesg.timerTimeFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setTimerTime(_ value: UInt32) throws {
		try setFieldValue(fieldNum: TotalsMesg.timerTimeFieldNum, value: value)
	}

	public func getDistance() -> UInt32? {
		guard let value = getFieldValue(fieldNum: TotalsMesg.distanceFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setDistance(_ value: UInt32) throws {
		try setFieldValue(fieldNum: TotalsMesg.distanceFieldNum, value: value)
	}

	public func getCalories() -> UInt32? {
		guard let value = getFieldValue(fieldNum: TotalsMesg.caloriesFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setCalories(_ value: UInt32) throws {
		try setFieldValue(fieldNum: TotalsMesg.caloriesFieldNum, value: value)
	}

	public func getSport() -> Sport? {
		guard let value = getFieldValue(fieldNum: TotalsMesg.sportFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return Sport(rawValue: value) ?? .invalid
	}

	public func setSport(_ value: Sport) throws {
		try setFieldValue(fieldNum: TotalsMesg.sportFieldNum, value: value.rawValue)
	}

	public func getElapsedTime() -> UInt32? {
		guard let value = getFieldValue(fieldNum: TotalsMesg.elapsedTimeFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setElapsedTime(_ value: UInt32) throws {
		try setFieldValue(fieldNum: TotalsMesg.elapsedTimeFieldNum, value: value)
	}

	public func getSessions() -> UInt16? {
		guard let value = getFieldValue(fieldNum: TotalsMesg.sessionsFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setSessions(_ value: UInt16) throws {
		try setFieldValue(fieldNum: TotalsMesg.sessionsFieldNum, value: value)
	}

	public func getActiveTime() -> UInt32? {
		guard let value = getFieldValue(fieldNum: TotalsMesg.activeTimeFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setActiveTime(_ value: UInt32) throws {
		try setFieldValue(fieldNum: TotalsMesg.activeTimeFieldNum, value: value)
	}

	public func getSportIndex() -> UInt8? {
		guard let value = getFieldValue(fieldNum: TotalsMesg.sportIndexFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setSportIndex(_ value: UInt8) throws {
		try setFieldValue(fieldNum: TotalsMesg.sportIndexFieldNum, value: value)
	}

	public class func createTotalsMesg() -> TotalsMesg {
        let mesg = TotalsMesg(name: "Totals", num: Profile.MesgNum.totals)
		
		mesg.fields[TotalsMesg.messageIndexFieldNum] = Field(name: "MessageIndex", num: TotalsMesg.messageIndexFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[TotalsMesg.timestampFieldNum] = Field(name: "Timestamp", num: TotalsMesg.timestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
		mesg.fields[TotalsMesg.timerTimeFieldNum] = Field(name: "TimerTime", num: TotalsMesg.timerTimeFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
		mesg.fields[TotalsMesg.distanceFieldNum] = Field(name: "Distance", num: TotalsMesg.distanceFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "m", accumulated: false)
		mesg.fields[TotalsMesg.caloriesFieldNum] = Field(name: "Calories", num: TotalsMesg.caloriesFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "kcal", accumulated: false)
		mesg.fields[TotalsMesg.sportFieldNum] = Field(name: "Sport", num: TotalsMesg.sportFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[TotalsMesg.elapsedTimeFieldNum] = Field(name: "ElapsedTime", num: TotalsMesg.elapsedTimeFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
		mesg.fields[TotalsMesg.sessionsFieldNum] = Field(name: "Sessions", num: TotalsMesg.sessionsFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[TotalsMesg.activeTimeFieldNum] = Field(name: "ActiveTime", num: TotalsMesg.activeTimeFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
		mesg.fields[TotalsMesg.sportIndexFieldNum] = Field(name: "SportIndex", num: TotalsMesg.sportIndexFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
        return mesg
    }
}