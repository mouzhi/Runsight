/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class ObdiiDataMesg : Mesg {
    public static let timestampFieldNum:UInt8 = 253
    public static let timestampMsFieldNum:UInt8 = 0
    public static let timeOffsetFieldNum:UInt8 = 1
    public static let pidFieldNum:UInt8 = 2
    public static let rawDataFieldNum:UInt8 = 3
    public static let pidDataSizeFieldNum:UInt8 = 4
    public static let systemTimeFieldNum:UInt8 = 5
    public static let startTimestampFieldNum:UInt8 = 6
    public static let startTimestampMsFieldNum:UInt8 = 7

	public init() {
        super.init(mesg: ObdiiDataMesg.createObdiiDataMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getTimestamp() -> DateTime? {
		guard let value = getFieldValue(fieldNum: ObdiiDataMesg.timestampFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setTimestamp(_ value: DateTime) throws {
		try setFieldValue(fieldNum: ObdiiDataMesg.timestampFieldNum, value: value.timestamp)
	}

	public func getTimestampMs() -> UInt16? {
		guard let value = getFieldValue(fieldNum: ObdiiDataMesg.timestampMsFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setTimestampMs(_ value: UInt16) throws {
		try setFieldValue(fieldNum: ObdiiDataMesg.timestampMsFieldNum, value: value)
	}

	public func getNumTimeOffset() -> UInt8 {
		guard let field = getField(fieldNum: ObdiiDataMesg.timeOffsetFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getTimeOffset() -> [UInt16?]? {
		guard let field = getField(fieldNum: ObdiiDataMesg.timeOffsetFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt16?]
	}

	public func getTimeOffset(index: Int) -> UInt16? {
		guard let value = getFieldValue(fieldNum: ObdiiDataMesg.timeOffsetFieldNum, index: index) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setTimeOffset(index: Int, value: UInt16) throws {
		try setFieldValue(fieldNum: ObdiiDataMesg.timeOffsetFieldNum, value: value, index: index)
	}

	public func getPid() -> UInt8? {
		guard let value = getFieldValue(fieldNum: ObdiiDataMesg.pidFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setPid(_ value: UInt8) throws {
		try setFieldValue(fieldNum: ObdiiDataMesg.pidFieldNum, value: value)
	}

	public func getNumRawData() -> UInt8 {
		guard let field = getField(fieldNum: ObdiiDataMesg.rawDataFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getRawData() -> [UInt8?]? {
		guard let field = getField(fieldNum: ObdiiDataMesg.rawDataFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt8?]
	}

	public func getRawData(index: Int) -> UInt8? {
		guard let value = getFieldValue(fieldNum: ObdiiDataMesg.rawDataFieldNum, index: index) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setRawData(index: Int, value: UInt8) throws {
		try setFieldValue(fieldNum: ObdiiDataMesg.rawDataFieldNum, value: value, index: index)
	}

	public func getNumPidDataSize() -> UInt8 {
		guard let field = getField(fieldNum: ObdiiDataMesg.pidDataSizeFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getPidDataSize() -> [UInt8?]? {
		guard let field = getField(fieldNum: ObdiiDataMesg.pidDataSizeFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt8?]
	}

	public func getPidDataSize(index: Int) -> UInt8? {
		guard let value = getFieldValue(fieldNum: ObdiiDataMesg.pidDataSizeFieldNum, index: index) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setPidDataSize(index: Int, value: UInt8) throws {
		try setFieldValue(fieldNum: ObdiiDataMesg.pidDataSizeFieldNum, value: value, index: index)
	}

	public func getNumSystemTime() -> UInt8 {
		guard let field = getField(fieldNum: ObdiiDataMesg.systemTimeFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getSystemTime() -> [UInt32?]? {
		guard let field = getField(fieldNum: ObdiiDataMesg.systemTimeFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt32?]
	}

	public func getSystemTime(index: Int) -> UInt32? {
		guard let value = getFieldValue(fieldNum: ObdiiDataMesg.systemTimeFieldNum, index: index) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setSystemTime(index: Int, value: UInt32) throws {
		try setFieldValue(fieldNum: ObdiiDataMesg.systemTimeFieldNum, value: value, index: index)
	}

	public func getStartTimestamp() -> DateTime? {
		guard let value = getFieldValue(fieldNum: ObdiiDataMesg.startTimestampFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setStartTimestamp(_ value: DateTime) throws {
		try setFieldValue(fieldNum: ObdiiDataMesg.startTimestampFieldNum, value: value.timestamp)
	}

	public func getStartTimestampMs() -> UInt16? {
		guard let value = getFieldValue(fieldNum: ObdiiDataMesg.startTimestampMsFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setStartTimestampMs(_ value: UInt16) throws {
		try setFieldValue(fieldNum: ObdiiDataMesg.startTimestampMsFieldNum, value: value)
	}

	public class func createObdiiDataMesg() -> ObdiiDataMesg {
        let mesg = ObdiiDataMesg(name: "ObdiiData", num: Profile.MesgNum.obdiiData)
		
		mesg.fields[ObdiiDataMesg.timestampFieldNum] = Field(name: "Timestamp", num: ObdiiDataMesg.timestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
		mesg.fields[ObdiiDataMesg.timestampMsFieldNum] = Field(name: "TimestampMs", num: ObdiiDataMesg.timestampMsFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "ms", accumulated: false)
		mesg.fields[ObdiiDataMesg.timeOffsetFieldNum] = Field(name: "TimeOffset", num: ObdiiDataMesg.timeOffsetFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "ms", accumulated: false)
		mesg.fields[ObdiiDataMesg.pidFieldNum] = Field(name: "Pid", num: ObdiiDataMesg.pidFieldNum, type: BaseType.BYTE.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[ObdiiDataMesg.rawDataFieldNum] = Field(name: "RawData", num: ObdiiDataMesg.rawDataFieldNum, type: BaseType.BYTE.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[ObdiiDataMesg.pidDataSizeFieldNum] = Field(name: "PidDataSize", num: ObdiiDataMesg.pidDataSizeFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[ObdiiDataMesg.systemTimeFieldNum] = Field(name: "SystemTime", num: ObdiiDataMesg.systemTimeFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[ObdiiDataMesg.startTimestampFieldNum] = Field(name: "StartTimestamp", num: ObdiiDataMesg.startTimestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[ObdiiDataMesg.startTimestampMsFieldNum] = Field(name: "StartTimestampMs", num: ObdiiDataMesg.startTimestampMsFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "ms", accumulated: false)
        return mesg
    }
}