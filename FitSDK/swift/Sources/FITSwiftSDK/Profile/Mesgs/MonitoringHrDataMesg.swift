/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class MonitoringHrDataMesg : Mesg {
    public static let timestampFieldNum:UInt8 = 253
    public static let restingHeartRateFieldNum:UInt8 = 0
    public static let currentDayRestingHeartRateFieldNum:UInt8 = 1

	public init() {
        super.init(mesg: MonitoringHrDataMesg.createMonitoringHrDataMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getTimestamp() -> DateTime? {
		guard let value = getFieldValue(fieldNum: MonitoringHrDataMesg.timestampFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setTimestamp(_ value: DateTime) throws {
		try setFieldValue(fieldNum: MonitoringHrDataMesg.timestampFieldNum, value: value.timestamp)
	}

	public func getRestingHeartRate() -> UInt8? {
		guard let value = getFieldValue(fieldNum: MonitoringHrDataMesg.restingHeartRateFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setRestingHeartRate(_ value: UInt8) throws {
		try setFieldValue(fieldNum: MonitoringHrDataMesg.restingHeartRateFieldNum, value: value)
	}

	public func getCurrentDayRestingHeartRate() -> UInt8? {
		guard let value = getFieldValue(fieldNum: MonitoringHrDataMesg.currentDayRestingHeartRateFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setCurrentDayRestingHeartRate(_ value: UInt8) throws {
		try setFieldValue(fieldNum: MonitoringHrDataMesg.currentDayRestingHeartRateFieldNum, value: value)
	}

	public class func createMonitoringHrDataMesg() -> MonitoringHrDataMesg {
        let mesg = MonitoringHrDataMesg(name: "MonitoringHrData", num: Profile.MesgNum.monitoringHrData)
		
		mesg.fields[MonitoringHrDataMesg.timestampFieldNum] = Field(name: "Timestamp", num: MonitoringHrDataMesg.timestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
		mesg.fields[MonitoringHrDataMesg.restingHeartRateFieldNum] = Field(name: "RestingHeartRate", num: MonitoringHrDataMesg.restingHeartRateFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "bpm", accumulated: false)
		mesg.fields[MonitoringHrDataMesg.currentDayRestingHeartRateFieldNum] = Field(name: "CurrentDayRestingHeartRate", num: MonitoringHrDataMesg.currentDayRestingHeartRateFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "bpm", accumulated: false)
        return mesg
    }
}