/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class RawBbiMesg : Mesg {
    public static let timestampFieldNum:UInt8 = 253
    public static let timestampMsFieldNum:UInt8 = 0
    public static let dataFieldNum:UInt8 = 1
    public static let timeFieldNum:UInt8 = 2
    public static let qualityFieldNum:UInt8 = 3
    public static let gapFieldNum:UInt8 = 4

	public init() {
        super.init(mesg: RawBbiMesg.createRawBbiMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getTimestamp() -> DateTime? {
		guard let value = getFieldValue(fieldNum: RawBbiMesg.timestampFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setTimestamp(_ value: DateTime) throws {
		try setFieldValue(fieldNum: RawBbiMesg.timestampFieldNum, value: value.timestamp)
	}

	public func getTimestampMs() -> UInt16? {
		guard let value = getFieldValue(fieldNum: RawBbiMesg.timestampMsFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setTimestampMs(_ value: UInt16) throws {
		try setFieldValue(fieldNum: RawBbiMesg.timestampMsFieldNum, value: value)
	}

	public func getNumData() -> UInt8 {
		guard let field = getField(fieldNum: RawBbiMesg.dataFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getData() -> [UInt16?]? {
		guard let field = getField(fieldNum: RawBbiMesg.dataFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt16?]
	}

	public func getData(index: Int) -> UInt16? {
		guard let value = getFieldValue(fieldNum: RawBbiMesg.dataFieldNum, index: index) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setData(index: Int, value: UInt16) throws {
		try setFieldValue(fieldNum: RawBbiMesg.dataFieldNum, value: value, index: index)
	}

	public func getNumTime() -> UInt8 {
		guard let field = getField(fieldNum: RawBbiMesg.timeFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getTime() -> [UInt16?]? {
		guard let field = getField(fieldNum: RawBbiMesg.timeFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt16?]
	}

	public func getTime(index: Int) -> UInt16? {
		guard let value = getFieldValue(fieldNum: RawBbiMesg.timeFieldNum, index: index) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setTime(index: Int, value: UInt16) throws {
		try setFieldValue(fieldNum: RawBbiMesg.timeFieldNum, value: value, index: index)
	}

	public func getNumQuality() -> UInt8 {
		guard let field = getField(fieldNum: RawBbiMesg.qualityFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getQuality() -> [UInt8?]? {
		guard let field = getField(fieldNum: RawBbiMesg.qualityFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt8?]
	}

	public func getQuality(index: Int) -> UInt8? {
		guard let value = getFieldValue(fieldNum: RawBbiMesg.qualityFieldNum, index: index) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setQuality(index: Int, value: UInt8) throws {
		try setFieldValue(fieldNum: RawBbiMesg.qualityFieldNum, value: value, index: index)
	}

	public func getNumGap() -> UInt8 {
		guard let field = getField(fieldNum: RawBbiMesg.gapFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getGap() -> [UInt8?]? {
		guard let field = getField(fieldNum: RawBbiMesg.gapFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt8?]
	}

	public func getGap(index: Int) -> UInt8? {
		guard let value = getFieldValue(fieldNum: RawBbiMesg.gapFieldNum, index: index) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setGap(index: Int, value: UInt8) throws {
		try setFieldValue(fieldNum: RawBbiMesg.gapFieldNum, value: value, index: index)
	}

	public class func createRawBbiMesg() -> RawBbiMesg {
        let mesg = RawBbiMesg(name: "RawBbi", num: Profile.MesgNum.rawBbi)
		
		mesg.fields[RawBbiMesg.timestampFieldNum] = Field(name: "Timestamp", num: RawBbiMesg.timestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[RawBbiMesg.timestampMsFieldNum] = Field(name: "TimestampMs", num: RawBbiMesg.timestampMsFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "ms", accumulated: false)
		mesg.fields[RawBbiMesg.dataFieldNum] = Field(name: "Data", num: RawBbiMesg.dataFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[RawBbiMesg.dataFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: timeFieldNum, accumulated: false, bits: 14, scale: 1, offset: 0))
		mesg.fields[RawBbiMesg.dataFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: qualityFieldNum, accumulated: false, bits: 1, scale: 1, offset: 0))
		mesg.fields[RawBbiMesg.dataFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: gapFieldNum, accumulated: false, bits: 1, scale: 1, offset: 0))
		mesg.fields[RawBbiMesg.dataFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: timeFieldNum, accumulated: false, bits: 14, scale: 1, offset: 0))
		mesg.fields[RawBbiMesg.dataFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: qualityFieldNum, accumulated: false, bits: 1, scale: 1, offset: 0))
		mesg.fields[RawBbiMesg.dataFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: gapFieldNum, accumulated: false, bits: 1, scale: 1, offset: 0))
		mesg.fields[RawBbiMesg.dataFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: timeFieldNum, accumulated: false, bits: 14, scale: 1, offset: 0))
		mesg.fields[RawBbiMesg.dataFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: qualityFieldNum, accumulated: false, bits: 1, scale: 1, offset: 0))
		mesg.fields[RawBbiMesg.dataFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: gapFieldNum, accumulated: false, bits: 1, scale: 1, offset: 0))
		mesg.fields[RawBbiMesg.dataFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: timeFieldNum, accumulated: false, bits: 14, scale: 1, offset: 0))
		mesg.fields[RawBbiMesg.dataFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: qualityFieldNum, accumulated: false, bits: 1, scale: 1, offset: 0))
		mesg.fields[RawBbiMesg.dataFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: gapFieldNum, accumulated: false, bits: 1, scale: 1, offset: 0))
		mesg.fields[RawBbiMesg.dataFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: timeFieldNum, accumulated: false, bits: 14, scale: 1, offset: 0))
		mesg.fields[RawBbiMesg.dataFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: qualityFieldNum, accumulated: false, bits: 1, scale: 1, offset: 0))
		mesg.fields[RawBbiMesg.dataFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: gapFieldNum, accumulated: false, bits: 1, scale: 1, offset: 0))
		mesg.fields[RawBbiMesg.dataFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: timeFieldNum, accumulated: false, bits: 14, scale: 1, offset: 0))
		mesg.fields[RawBbiMesg.dataFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: qualityFieldNum, accumulated: false, bits: 1, scale: 1, offset: 0))
		mesg.fields[RawBbiMesg.dataFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: gapFieldNum, accumulated: false, bits: 1, scale: 1, offset: 0))
		mesg.fields[RawBbiMesg.dataFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: timeFieldNum, accumulated: false, bits: 14, scale: 1, offset: 0))
		mesg.fields[RawBbiMesg.dataFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: qualityFieldNum, accumulated: false, bits: 1, scale: 1, offset: 0))
		mesg.fields[RawBbiMesg.dataFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: gapFieldNum, accumulated: false, bits: 1, scale: 1, offset: 0))
		mesg.fields[RawBbiMesg.dataFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: timeFieldNum, accumulated: false, bits: 14, scale: 1, offset: 0))
		mesg.fields[RawBbiMesg.dataFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: qualityFieldNum, accumulated: false, bits: 1, scale: 1, offset: 0))
		mesg.fields[RawBbiMesg.dataFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: gapFieldNum, accumulated: false, bits: 1, scale: 1, offset: 0))
		mesg.fields[RawBbiMesg.dataFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: timeFieldNum, accumulated: false, bits: 14, scale: 1, offset: 0))
		mesg.fields[RawBbiMesg.dataFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: qualityFieldNum, accumulated: false, bits: 1, scale: 1, offset: 0))
		mesg.fields[RawBbiMesg.dataFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: gapFieldNum, accumulated: false, bits: 1, scale: 1, offset: 0))
		mesg.fields[RawBbiMesg.dataFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: timeFieldNum, accumulated: false, bits: 14, scale: 1, offset: 0))
		mesg.fields[RawBbiMesg.dataFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: qualityFieldNum, accumulated: false, bits: 1, scale: 1, offset: 0))
		mesg.fields[RawBbiMesg.dataFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: gapFieldNum, accumulated: false, bits: 1, scale: 1, offset: 0))
		mesg.fields[RawBbiMesg.dataFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: timeFieldNum, accumulated: false, bits: 14, scale: 1, offset: 0))
		mesg.fields[RawBbiMesg.dataFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: qualityFieldNum, accumulated: false, bits: 1, scale: 1, offset: 0))
		mesg.fields[RawBbiMesg.dataFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: gapFieldNum, accumulated: false, bits: 1, scale: 1, offset: 0))
		mesg.fields[RawBbiMesg.dataFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: timeFieldNum, accumulated: false, bits: 14, scale: 1, offset: 0))
		mesg.fields[RawBbiMesg.dataFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: qualityFieldNum, accumulated: false, bits: 1, scale: 1, offset: 0))
		mesg.fields[RawBbiMesg.dataFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: gapFieldNum, accumulated: false, bits: 1, scale: 1, offset: 0))
		mesg.fields[RawBbiMesg.dataFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: timeFieldNum, accumulated: false, bits: 14, scale: 1, offset: 0))
		mesg.fields[RawBbiMesg.dataFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: qualityFieldNum, accumulated: false, bits: 1, scale: 1, offset: 0))
		mesg.fields[RawBbiMesg.dataFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: gapFieldNum, accumulated: false, bits: 1, scale: 1, offset: 0))
		mesg.fields[RawBbiMesg.dataFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: timeFieldNum, accumulated: false, bits: 14, scale: 1, offset: 0))
		mesg.fields[RawBbiMesg.dataFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: qualityFieldNum, accumulated: false, bits: 1, scale: 1, offset: 0))
		mesg.fields[RawBbiMesg.dataFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: gapFieldNum, accumulated: false, bits: 1, scale: 1, offset: 0))
		mesg.fields[RawBbiMesg.dataFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: timeFieldNum, accumulated: false, bits: 14, scale: 1, offset: 0))
		mesg.fields[RawBbiMesg.dataFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: qualityFieldNum, accumulated: false, bits: 1, scale: 1, offset: 0))
		mesg.fields[RawBbiMesg.dataFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: gapFieldNum, accumulated: false, bits: 1, scale: 1, offset: 0))
		mesg.fields[RawBbiMesg.timeFieldNum] = Field(name: "Time", num: RawBbiMesg.timeFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "ms", accumulated: false)
		mesg.fields[RawBbiMesg.qualityFieldNum] = Field(name: "Quality", num: RawBbiMesg.qualityFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[RawBbiMesg.gapFieldNum] = Field(name: "Gap", num: RawBbiMesg.gapFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
        return mesg
    }
}