/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class ConnectivityMesg : Mesg {
    public static let bluetoothEnabledFieldNum:UInt8 = 0
    public static let bluetoothLeEnabledFieldNum:UInt8 = 1
    public static let antEnabledFieldNum:UInt8 = 2
    public static let nameFieldNum:UInt8 = 3
    public static let liveTrackingEnabledFieldNum:UInt8 = 4
    public static let weatherConditionsEnabledFieldNum:UInt8 = 5
    public static let weatherAlertsEnabledFieldNum:UInt8 = 6
    public static let autoActivityUploadEnabledFieldNum:UInt8 = 7
    public static let courseDownloadEnabledFieldNum:UInt8 = 8
    public static let workoutDownloadEnabledFieldNum:UInt8 = 9
    public static let gpsEphemerisDownloadEnabledFieldNum:UInt8 = 10
    public static let incidentDetectionEnabledFieldNum:UInt8 = 11
    public static let grouptrackEnabledFieldNum:UInt8 = 12

	public init() {
        super.init(mesg: ConnectivityMesg.createConnectivityMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getBluetoothEnabled() -> Bool? {
		guard let value = getFieldValue(fieldNum: ConnectivityMesg.bluetoothEnabledFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value == 1 ? true : false
	}

	public func setBluetoothEnabled(_ value: Bool) throws {
		try setFieldValue(fieldNum: ConnectivityMesg.bluetoothEnabledFieldNum, value: value)
	}

	public func getBluetoothLeEnabled() -> Bool? {
		guard let value = getFieldValue(fieldNum: ConnectivityMesg.bluetoothLeEnabledFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value == 1 ? true : false
	}

	public func setBluetoothLeEnabled(_ value: Bool) throws {
		try setFieldValue(fieldNum: ConnectivityMesg.bluetoothLeEnabledFieldNum, value: value)
	}

	public func getAntEnabled() -> Bool? {
		guard let value = getFieldValue(fieldNum: ConnectivityMesg.antEnabledFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value == 1 ? true : false
	}

	public func setAntEnabled(_ value: Bool) throws {
		try setFieldValue(fieldNum: ConnectivityMesg.antEnabledFieldNum, value: value)
	}

	public func getName() -> String? {
		guard let value = getFieldValue(fieldNum: ConnectivityMesg.nameFieldNum, index:0) as? String else {
            return nil
        }
		return value
	}

	public func setName(_ value: String) throws {
		try setFieldValue(fieldNum: ConnectivityMesg.nameFieldNum, value: value)
	}

	public func getLiveTrackingEnabled() -> Bool? {
		guard let value = getFieldValue(fieldNum: ConnectivityMesg.liveTrackingEnabledFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value == 1 ? true : false
	}

	public func setLiveTrackingEnabled(_ value: Bool) throws {
		try setFieldValue(fieldNum: ConnectivityMesg.liveTrackingEnabledFieldNum, value: value)
	}

	public func getWeatherConditionsEnabled() -> Bool? {
		guard let value = getFieldValue(fieldNum: ConnectivityMesg.weatherConditionsEnabledFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value == 1 ? true : false
	}

	public func setWeatherConditionsEnabled(_ value: Bool) throws {
		try setFieldValue(fieldNum: ConnectivityMesg.weatherConditionsEnabledFieldNum, value: value)
	}

	public func getWeatherAlertsEnabled() -> Bool? {
		guard let value = getFieldValue(fieldNum: ConnectivityMesg.weatherAlertsEnabledFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value == 1 ? true : false
	}

	public func setWeatherAlertsEnabled(_ value: Bool) throws {
		try setFieldValue(fieldNum: ConnectivityMesg.weatherAlertsEnabledFieldNum, value: value)
	}

	public func getAutoActivityUploadEnabled() -> Bool? {
		guard let value = getFieldValue(fieldNum: ConnectivityMesg.autoActivityUploadEnabledFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value == 1 ? true : false
	}

	public func setAutoActivityUploadEnabled(_ value: Bool) throws {
		try setFieldValue(fieldNum: ConnectivityMesg.autoActivityUploadEnabledFieldNum, value: value)
	}

	public func getCourseDownloadEnabled() -> Bool? {
		guard let value = getFieldValue(fieldNum: ConnectivityMesg.courseDownloadEnabledFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value == 1 ? true : false
	}

	public func setCourseDownloadEnabled(_ value: Bool) throws {
		try setFieldValue(fieldNum: ConnectivityMesg.courseDownloadEnabledFieldNum, value: value)
	}

	public func getWorkoutDownloadEnabled() -> Bool? {
		guard let value = getFieldValue(fieldNum: ConnectivityMesg.workoutDownloadEnabledFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value == 1 ? true : false
	}

	public func setWorkoutDownloadEnabled(_ value: Bool) throws {
		try setFieldValue(fieldNum: ConnectivityMesg.workoutDownloadEnabledFieldNum, value: value)
	}

	public func getGpsEphemerisDownloadEnabled() -> Bool? {
		guard let value = getFieldValue(fieldNum: ConnectivityMesg.gpsEphemerisDownloadEnabledFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value == 1 ? true : false
	}

	public func setGpsEphemerisDownloadEnabled(_ value: Bool) throws {
		try setFieldValue(fieldNum: ConnectivityMesg.gpsEphemerisDownloadEnabledFieldNum, value: value)
	}

	public func getIncidentDetectionEnabled() -> Bool? {
		guard let value = getFieldValue(fieldNum: ConnectivityMesg.incidentDetectionEnabledFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value == 1 ? true : false
	}

	public func setIncidentDetectionEnabled(_ value: Bool) throws {
		try setFieldValue(fieldNum: ConnectivityMesg.incidentDetectionEnabledFieldNum, value: value)
	}

	public func getGrouptrackEnabled() -> Bool? {
		guard let value = getFieldValue(fieldNum: ConnectivityMesg.grouptrackEnabledFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value == 1 ? true : false
	}

	public func setGrouptrackEnabled(_ value: Bool) throws {
		try setFieldValue(fieldNum: ConnectivityMesg.grouptrackEnabledFieldNum, value: value)
	}

	public class func createConnectivityMesg() -> ConnectivityMesg {
        let mesg = ConnectivityMesg(name: "Connectivity", num: Profile.MesgNum.connectivity)
		
		mesg.fields[ConnectivityMesg.bluetoothEnabledFieldNum] = Field(name: "BluetoothEnabled", num: ConnectivityMesg.bluetoothEnabledFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[ConnectivityMesg.bluetoothLeEnabledFieldNum] = Field(name: "BluetoothLeEnabled", num: ConnectivityMesg.bluetoothLeEnabledFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[ConnectivityMesg.antEnabledFieldNum] = Field(name: "AntEnabled", num: ConnectivityMesg.antEnabledFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[ConnectivityMesg.nameFieldNum] = Field(name: "Name", num: ConnectivityMesg.nameFieldNum, type: BaseType.STRING.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[ConnectivityMesg.liveTrackingEnabledFieldNum] = Field(name: "LiveTrackingEnabled", num: ConnectivityMesg.liveTrackingEnabledFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[ConnectivityMesg.weatherConditionsEnabledFieldNum] = Field(name: "WeatherConditionsEnabled", num: ConnectivityMesg.weatherConditionsEnabledFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[ConnectivityMesg.weatherAlertsEnabledFieldNum] = Field(name: "WeatherAlertsEnabled", num: ConnectivityMesg.weatherAlertsEnabledFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[ConnectivityMesg.autoActivityUploadEnabledFieldNum] = Field(name: "AutoActivityUploadEnabled", num: ConnectivityMesg.autoActivityUploadEnabledFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[ConnectivityMesg.courseDownloadEnabledFieldNum] = Field(name: "CourseDownloadEnabled", num: ConnectivityMesg.courseDownloadEnabledFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[ConnectivityMesg.workoutDownloadEnabledFieldNum] = Field(name: "WorkoutDownloadEnabled", num: ConnectivityMesg.workoutDownloadEnabledFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[ConnectivityMesg.gpsEphemerisDownloadEnabledFieldNum] = Field(name: "GpsEphemerisDownloadEnabled", num: ConnectivityMesg.gpsEphemerisDownloadEnabledFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[ConnectivityMesg.incidentDetectionEnabledFieldNum] = Field(name: "IncidentDetectionEnabled", num: ConnectivityMesg.incidentDetectionEnabledFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[ConnectivityMesg.grouptrackEnabledFieldNum] = Field(name: "GrouptrackEnabled", num: ConnectivityMesg.grouptrackEnabledFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
        return mesg
    }
}