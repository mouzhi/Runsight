/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class MetZoneMesg : Mesg {
    public static let messageIndexFieldNum:UInt8 = 254
    public static let highBpmFieldNum:UInt8 = 1
    public static let caloriesFieldNum:UInt8 = 2
    public static let fatCaloriesFieldNum:UInt8 = 3

	public init() {
        super.init(mesg: MetZoneMesg.createMetZoneMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getMessageIndex() -> MessageIndex? {
		guard let value = getFieldValue(fieldNum: MetZoneMesg.messageIndexFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setMessageIndex(_ value: MessageIndex) throws {
		try setFieldValue(fieldNum: MetZoneMesg.messageIndexFieldNum, value: value)
	}

	public func getHighBpm() -> UInt8? {
		guard let value = getFieldValue(fieldNum: MetZoneMesg.highBpmFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setHighBpm(_ value: UInt8) throws {
		try setFieldValue(fieldNum: MetZoneMesg.highBpmFieldNum, value: value)
	}

	public func getCalories() -> Float64? {
		guard let value = getFieldValue(fieldNum: MetZoneMesg.caloriesFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setCalories(_ value: Float64) throws {
		try setFieldValue(fieldNum: MetZoneMesg.caloriesFieldNum, value: value)
	}

	public func getFatCalories() -> Float64? {
		guard let value = getFieldValue(fieldNum: MetZoneMesg.fatCaloriesFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setFatCalories(_ value: Float64) throws {
		try setFieldValue(fieldNum: MetZoneMesg.fatCaloriesFieldNum, value: value)
	}

	public class func createMetZoneMesg() -> MetZoneMesg {
        let mesg = MetZoneMesg(name: "MetZone", num: Profile.MesgNum.metZone)
		
		mesg.fields[MetZoneMesg.messageIndexFieldNum] = Field(name: "MessageIndex", num: MetZoneMesg.messageIndexFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[MetZoneMesg.highBpmFieldNum] = Field(name: "HighBpm", num: MetZoneMesg.highBpmFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[MetZoneMesg.caloriesFieldNum] = Field(name: "Calories", num: MetZoneMesg.caloriesFieldNum, type: BaseType.UINT16.rawValue, scale: 10, offset: 0, units: "kcal / min", accumulated: false)
		mesg.fields[MetZoneMesg.fatCaloriesFieldNum] = Field(name: "FatCalories", num: MetZoneMesg.fatCaloriesFieldNum, type: BaseType.UINT8.rawValue, scale: 10, offset: 0, units: "kcal / min", accumulated: false)
        return mesg
    }
}