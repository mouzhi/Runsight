/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class ExerciseTitleMesg : Mesg {
    public static let messageIndexFieldNum:UInt8 = 254
    public static let exerciseCategoryFieldNum:UInt8 = 0
    public static let exerciseNameFieldNum:UInt8 = 1
    public static let wktStepNameFieldNum:UInt8 = 2

	public init() {
        super.init(mesg: ExerciseTitleMesg.createExerciseTitleMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getMessageIndex() -> MessageIndex? {
		guard let value = getFieldValue(fieldNum: ExerciseTitleMesg.messageIndexFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setMessageIndex(_ value: MessageIndex) throws {
		try setFieldValue(fieldNum: ExerciseTitleMesg.messageIndexFieldNum, value: value)
	}

	public func getExerciseCategory() -> ExerciseCategory? {
		guard let value = getFieldValue(fieldNum: ExerciseTitleMesg.exerciseCategoryFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return ExerciseCategory(rawValue: value) ?? .invalid
	}

	public func setExerciseCategory(_ value: ExerciseCategory) throws {
		try setFieldValue(fieldNum: ExerciseTitleMesg.exerciseCategoryFieldNum, value: value.rawValue)
	}

	public func getExerciseName() -> UInt16? {
		guard let value = getFieldValue(fieldNum: ExerciseTitleMesg.exerciseNameFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setExerciseName(_ value: UInt16) throws {
		try setFieldValue(fieldNum: ExerciseTitleMesg.exerciseNameFieldNum, value: value)
	}

	public func getNumWktStepName() -> UInt8 {
		guard let field = getField(fieldNum: ExerciseTitleMesg.wktStepNameFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getWktStepName() -> [String?]? {
		guard let field = getField(fieldNum: ExerciseTitleMesg.wktStepNameFieldNum) else {
			return nil
		}
		return field.toArray() as [String?]
	}

	public func getWktStepName(index: Int) -> String? {
		guard let value = getFieldValue(fieldNum: ExerciseTitleMesg.wktStepNameFieldNum, index: index) as? String else {
            return nil
        }
		return value
	}

	public func setWktStepName(index: Int, value: String) throws {
		try setFieldValue(fieldNum: ExerciseTitleMesg.wktStepNameFieldNum, value: value, index: index)
	}

	public class func createExerciseTitleMesg() -> ExerciseTitleMesg {
        let mesg = ExerciseTitleMesg(name: "ExerciseTitle", num: Profile.MesgNum.exerciseTitle)
		
		mesg.fields[ExerciseTitleMesg.messageIndexFieldNum] = Field(name: "MessageIndex", num: ExerciseTitleMesg.messageIndexFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[ExerciseTitleMesg.exerciseCategoryFieldNum] = Field(name: "ExerciseCategory", num: ExerciseTitleMesg.exerciseCategoryFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[ExerciseTitleMesg.exerciseNameFieldNum] = Field(name: "ExerciseName", num: ExerciseTitleMesg.exerciseNameFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[ExerciseTitleMesg.wktStepNameFieldNum] = Field(name: "WktStepName", num: ExerciseTitleMesg.wktStepNameFieldNum, type: BaseType.STRING.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
        return mesg
    }
}