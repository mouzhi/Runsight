/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class ChronoShotDataMesg : Mesg {
    public static let timestampFieldNum:UInt8 = 253
    public static let shotSpeedFieldNum:UInt8 = 0
    public static let shotNumFieldNum:UInt8 = 1

	public init() {
        super.init(mesg: ChronoShotDataMesg.createChronoShotDataMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getTimestamp() -> DateTime? {
		guard let value = getFieldValue(fieldNum: ChronoShotDataMesg.timestampFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setTimestamp(_ value: DateTime) throws {
		try setFieldValue(fieldNum: ChronoShotDataMesg.timestampFieldNum, value: value.timestamp)
	}

	public func getShotSpeed() -> Float64? {
		guard let value = getFieldValue(fieldNum: ChronoShotDataMesg.shotSpeedFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setShotSpeed(_ value: Float64) throws {
		try setFieldValue(fieldNum: ChronoShotDataMesg.shotSpeedFieldNum, value: value)
	}

	public func getShotNum() -> UInt16? {
		guard let value = getFieldValue(fieldNum: ChronoShotDataMesg.shotNumFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setShotNum(_ value: UInt16) throws {
		try setFieldValue(fieldNum: ChronoShotDataMesg.shotNumFieldNum, value: value)
	}

	public class func createChronoShotDataMesg() -> ChronoShotDataMesg {
        let mesg = ChronoShotDataMesg(name: "ChronoShotData", num: Profile.MesgNum.chronoShotData)
		
		mesg.fields[ChronoShotDataMesg.timestampFieldNum] = Field(name: "Timestamp", num: ChronoShotDataMesg.timestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[ChronoShotDataMesg.shotSpeedFieldNum] = Field(name: "ShotSpeed", num: ChronoShotDataMesg.shotSpeedFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "m/s", accumulated: false)
		mesg.fields[ChronoShotDataMesg.shotNumFieldNum] = Field(name: "ShotNum", num: ChronoShotDataMesg.shotNumFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
        return mesg
    }
}