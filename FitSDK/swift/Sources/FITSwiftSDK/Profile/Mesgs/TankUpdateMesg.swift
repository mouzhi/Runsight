/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class TankUpdateMesg : Mesg {
    public static let timestampFieldNum:UInt8 = 253
    public static let sensorFieldNum:UInt8 = 0
    public static let pressureFieldNum:UInt8 = 1

	public init() {
        super.init(mesg: TankUpdateMesg.createTankUpdateMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getTimestamp() -> DateTime? {
		guard let value = getFieldValue(fieldNum: TankUpdateMesg.timestampFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setTimestamp(_ value: DateTime) throws {
		try setFieldValue(fieldNum: TankUpdateMesg.timestampFieldNum, value: value.timestamp)
	}

	public func getSensor() -> AntChannelId? {
		guard let value = getFieldValue(fieldNum: TankUpdateMesg.sensorFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setSensor(_ value: AntChannelId) throws {
		try setFieldValue(fieldNum: TankUpdateMesg.sensorFieldNum, value: value)
	}

	public func getPressure() -> Float64? {
		guard let value = getFieldValue(fieldNum: TankUpdateMesg.pressureFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setPressure(_ value: Float64) throws {
		try setFieldValue(fieldNum: TankUpdateMesg.pressureFieldNum, value: value)
	}

	public class func createTankUpdateMesg() -> TankUpdateMesg {
        let mesg = TankUpdateMesg(name: "TankUpdate", num: Profile.MesgNum.tankUpdate)
		
		mesg.fields[TankUpdateMesg.timestampFieldNum] = Field(name: "Timestamp", num: TankUpdateMesg.timestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
		mesg.fields[TankUpdateMesg.sensorFieldNum] = Field(name: "Sensor", num: TankUpdateMesg.sensorFieldNum, type: BaseType.UINT32Z.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[TankUpdateMesg.pressureFieldNum] = Field(name: "Pressure", num: TankUpdateMesg.pressureFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "bar", accumulated: false)
        return mesg
    }
}