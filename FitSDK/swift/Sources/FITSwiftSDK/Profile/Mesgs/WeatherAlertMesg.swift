/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class WeatherAlertMesg : Mesg {
    public static let timestampFieldNum:UInt8 = 253
    public static let reportIdFieldNum:UInt8 = 0
    public static let issueTimeFieldNum:UInt8 = 1
    public static let expireTimeFieldNum:UInt8 = 2
    public static let severityFieldNum:UInt8 = 3
    public static let typeFieldNum:UInt8 = 4

	public init() {
        super.init(mesg: WeatherAlertMesg.createWeatherAlertMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getTimestamp() -> DateTime? {
		guard let value = getFieldValue(fieldNum: WeatherAlertMesg.timestampFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setTimestamp(_ value: DateTime) throws {
		try setFieldValue(fieldNum: WeatherAlertMesg.timestampFieldNum, value: value.timestamp)
	}

	public func getReportId() -> String? {
		guard let value = getFieldValue(fieldNum: WeatherAlertMesg.reportIdFieldNum, index:0) as? String else {
            return nil
        }
		return value
	}

	public func setReportId(_ value: String) throws {
		try setFieldValue(fieldNum: WeatherAlertMesg.reportIdFieldNum, value: value)
	}

	public func getIssueTime() -> DateTime? {
		guard let value = getFieldValue(fieldNum: WeatherAlertMesg.issueTimeFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setIssueTime(_ value: DateTime) throws {
		try setFieldValue(fieldNum: WeatherAlertMesg.issueTimeFieldNum, value: value.timestamp)
	}

	public func getExpireTime() -> DateTime? {
		guard let value = getFieldValue(fieldNum: WeatherAlertMesg.expireTimeFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setExpireTime(_ value: DateTime) throws {
		try setFieldValue(fieldNum: WeatherAlertMesg.expireTimeFieldNum, value: value.timestamp)
	}

	public func getSeverity() -> WeatherSeverity? {
		guard let value = getFieldValue(fieldNum: WeatherAlertMesg.severityFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return WeatherSeverity(rawValue: value) ?? .invalid
	}

	public func setSeverity(_ value: WeatherSeverity) throws {
		try setFieldValue(fieldNum: WeatherAlertMesg.severityFieldNum, value: value.rawValue)
	}

	public func getType() -> WeatherSevereType? {
		guard let value = getFieldValue(fieldNum: WeatherAlertMesg.typeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return WeatherSevereType(rawValue: value) ?? .invalid
	}

	public func setType(_ value: WeatherSevereType) throws {
		try setFieldValue(fieldNum: WeatherAlertMesg.typeFieldNum, value: value.rawValue)
	}

	public class func createWeatherAlertMesg() -> WeatherAlertMesg {
        let mesg = WeatherAlertMesg(name: "WeatherAlert", num: Profile.MesgNum.weatherAlert)
		
		mesg.fields[WeatherAlertMesg.timestampFieldNum] = Field(name: "Timestamp", num: WeatherAlertMesg.timestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[WeatherAlertMesg.reportIdFieldNum] = Field(name: "ReportId", num: WeatherAlertMesg.reportIdFieldNum, type: BaseType.STRING.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[WeatherAlertMesg.issueTimeFieldNum] = Field(name: "IssueTime", num: WeatherAlertMesg.issueTimeFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[WeatherAlertMesg.expireTimeFieldNum] = Field(name: "ExpireTime", num: WeatherAlertMesg.expireTimeFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[WeatherAlertMesg.severityFieldNum] = Field(name: "Severity", num: WeatherAlertMesg.severityFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[WeatherAlertMesg.typeFieldNum] = Field(name: "Type", num: WeatherAlertMesg.typeFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
        return mesg
    }
}