/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class GpsMetadataMesg : Mesg {
    public static let timestampFieldNum:UInt8 = 253
    public static let timestampMsFieldNum:UInt8 = 0
    public static let positionLatFieldNum:UInt8 = 1
    public static let positionLongFieldNum:UInt8 = 2
    public static let enhancedAltitudeFieldNum:UInt8 = 3
    public static let enhancedSpeedFieldNum:UInt8 = 4
    public static let headingFieldNum:UInt8 = 5
    public static let utcTimestampFieldNum:UInt8 = 6
    public static let velocityFieldNum:UInt8 = 7

	public init() {
        super.init(mesg: GpsMetadataMesg.createGpsMetadataMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getTimestamp() -> DateTime? {
		guard let value = getFieldValue(fieldNum: GpsMetadataMesg.timestampFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setTimestamp(_ value: DateTime) throws {
		try setFieldValue(fieldNum: GpsMetadataMesg.timestampFieldNum, value: value.timestamp)
	}

	public func getTimestampMs() -> UInt16? {
		guard let value = getFieldValue(fieldNum: GpsMetadataMesg.timestampMsFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setTimestampMs(_ value: UInt16) throws {
		try setFieldValue(fieldNum: GpsMetadataMesg.timestampMsFieldNum, value: value)
	}

	public func getPositionLat() -> Int32? {
		guard let value = getFieldValue(fieldNum: GpsMetadataMesg.positionLatFieldNum, index:0) as? Int32 else {
            return nil
        }
		return value
	}

	public func setPositionLat(_ value: Int32) throws {
		try setFieldValue(fieldNum: GpsMetadataMesg.positionLatFieldNum, value: value)
	}

	public func getPositionLong() -> Int32? {
		guard let value = getFieldValue(fieldNum: GpsMetadataMesg.positionLongFieldNum, index:0) as? Int32 else {
            return nil
        }
		return value
	}

	public func setPositionLong(_ value: Int32) throws {
		try setFieldValue(fieldNum: GpsMetadataMesg.positionLongFieldNum, value: value)
	}

	public func getEnhancedAltitude() -> Float64? {
		guard let value = getFieldValue(fieldNum: GpsMetadataMesg.enhancedAltitudeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setEnhancedAltitude(_ value: Float64) throws {
		try setFieldValue(fieldNum: GpsMetadataMesg.enhancedAltitudeFieldNum, value: value)
	}

	public func getEnhancedSpeed() -> Float64? {
		guard let value = getFieldValue(fieldNum: GpsMetadataMesg.enhancedSpeedFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setEnhancedSpeed(_ value: Float64) throws {
		try setFieldValue(fieldNum: GpsMetadataMesg.enhancedSpeedFieldNum, value: value)
	}

	public func getHeading() -> Float64? {
		guard let value = getFieldValue(fieldNum: GpsMetadataMesg.headingFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setHeading(_ value: Float64) throws {
		try setFieldValue(fieldNum: GpsMetadataMesg.headingFieldNum, value: value)
	}

	public func getUtcTimestamp() -> DateTime? {
		guard let value = getFieldValue(fieldNum: GpsMetadataMesg.utcTimestampFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setUtcTimestamp(_ value: DateTime) throws {
		try setFieldValue(fieldNum: GpsMetadataMesg.utcTimestampFieldNum, value: value.timestamp)
	}

	public func getNumVelocity() -> UInt8 {
		guard let field = getField(fieldNum: GpsMetadataMesg.velocityFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getVelocity() -> [Float64?]? {
		guard let field = getField(fieldNum: GpsMetadataMesg.velocityFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getVelocity(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: GpsMetadataMesg.velocityFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setVelocity(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: GpsMetadataMesg.velocityFieldNum, value: value, index: index)
	}

	public class func createGpsMetadataMesg() -> GpsMetadataMesg {
        let mesg = GpsMetadataMesg(name: "GpsMetadata", num: Profile.MesgNum.gpsMetadata)
		
		mesg.fields[GpsMetadataMesg.timestampFieldNum] = Field(name: "Timestamp", num: GpsMetadataMesg.timestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
		mesg.fields[GpsMetadataMesg.timestampMsFieldNum] = Field(name: "TimestampMs", num: GpsMetadataMesg.timestampMsFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "ms", accumulated: false)
		mesg.fields[GpsMetadataMesg.positionLatFieldNum] = Field(name: "PositionLat", num: GpsMetadataMesg.positionLatFieldNum, type: BaseType.SINT32.rawValue, scale: 1, offset: 0, units: "semicircles", accumulated: false)
		mesg.fields[GpsMetadataMesg.positionLongFieldNum] = Field(name: "PositionLong", num: GpsMetadataMesg.positionLongFieldNum, type: BaseType.SINT32.rawValue, scale: 1, offset: 0, units: "semicircles", accumulated: false)
		mesg.fields[GpsMetadataMesg.enhancedAltitudeFieldNum] = Field(name: "EnhancedAltitude", num: GpsMetadataMesg.enhancedAltitudeFieldNum, type: BaseType.UINT32.rawValue, scale: 5, offset: 500, units: "m", accumulated: false)
		mesg.fields[GpsMetadataMesg.enhancedSpeedFieldNum] = Field(name: "EnhancedSpeed", num: GpsMetadataMesg.enhancedSpeedFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "m/s", accumulated: false)
		mesg.fields[GpsMetadataMesg.headingFieldNum] = Field(name: "Heading", num: GpsMetadataMesg.headingFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "degrees", accumulated: false)
		mesg.fields[GpsMetadataMesg.utcTimestampFieldNum] = Field(name: "UtcTimestamp", num: GpsMetadataMesg.utcTimestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
		mesg.fields[GpsMetadataMesg.velocityFieldNum] = Field(name: "Velocity", num: GpsMetadataMesg.velocityFieldNum, type: BaseType.SINT16.rawValue, scale: 100, offset: 0, units: "m/s", accumulated: false)
        return mesg
    }
}