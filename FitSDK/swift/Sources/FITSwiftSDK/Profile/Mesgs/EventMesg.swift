/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class EventMesg : Mesg {
    public static let timestampFieldNum:UInt8 = 253
    public static let eventFieldNum:UInt8 = 0
    public static let eventTypeFieldNum:UInt8 = 1
    public static let data16FieldNum:UInt8 = 2
    public static let dataFieldNum:UInt8 = 3
    public static let eventGroupFieldNum:UInt8 = 4
    public static let scoreFieldNum:UInt8 = 7
    public static let opponentScoreFieldNum:UInt8 = 8
    public static let frontGearNumFieldNum:UInt8 = 9
    public static let frontGearFieldNum:UInt8 = 10
    public static let rearGearNumFieldNum:UInt8 = 11
    public static let rearGearFieldNum:UInt8 = 12
    public static let deviceIndexFieldNum:UInt8 = 13
    public static let activityTypeFieldNum:UInt8 = 14
    public static let startTimestampFieldNum:UInt8 = 15
    public static let radarThreatLevelMaxFieldNum:UInt8 = 21
    public static let radarThreatCountFieldNum:UInt8 = 22
    public static let radarThreatAvgApproachSpeedFieldNum:UInt8 = 23
    public static let radarThreatMaxApproachSpeedFieldNum:UInt8 = 24

	private struct DataSubField {
        public static let timerTrigger:UInt16 = 0
        public static let coursePointIndex:UInt16 = 1
        public static let batteryLevel:UInt16 = 2
        public static let virtualPartnerSpeed:UInt16 = 3
        public static let hrHighAlert:UInt16 = 4
        public static let hrLowAlert:UInt16 = 5
        public static let speedHighAlert:UInt16 = 6
        public static let speedLowAlert:UInt16 = 7
        public static let cadHighAlert:UInt16 = 8
        public static let cadLowAlert:UInt16 = 9
        public static let powerHighAlert:UInt16 = 10
        public static let powerLowAlert:UInt16 = 11
        public static let timeDurationAlert:UInt16 = 12
        public static let distanceDurationAlert:UInt16 = 13
        public static let calorieDurationAlert:UInt16 = 14
        public static let fitnessEquipmentState:UInt16 = 15
        public static let sportPoint:UInt16 = 16
        public static let gearChangeData:UInt16 = 17
        public static let riderPosition:UInt16 = 18
        public static let commTimeout:UInt16 = 19
        public static let diveAlert:UInt16 = 20
        public static let autoActivityDetectDuration:UInt16 = 21
        public static let radarThreatAlert:UInt16 = 22
        public static let subfields:UInt16 = 23
        public static let active:UInt16 = FIT.SUBFIELD_INDEX.ACTIVE_SUBFIELD
        public static let mainField:UInt16 = FIT.SUBFIELD_INDEX.MAIN_FIELD
    }

	private struct StartTimestampSubField {
        public static let autoActivityDetectStartTimestamp:UInt16 = 0
        public static let subfields:UInt16 = 1
        public static let active:UInt16 = FIT.SUBFIELD_INDEX.ACTIVE_SUBFIELD
        public static let mainField:UInt16 = FIT.SUBFIELD_INDEX.MAIN_FIELD
    }

	public init() {
        super.init(mesg: EventMesg.createEventMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getTimestamp() -> DateTime? {
		guard let value = getFieldValue(fieldNum: EventMesg.timestampFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setTimestamp(_ value: DateTime) throws {
		try setFieldValue(fieldNum: EventMesg.timestampFieldNum, value: value.timestamp)
	}

	public func getEvent() -> Event? {
		guard let value = getFieldValue(fieldNum: EventMesg.eventFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return Event(rawValue: value) ?? .invalid
	}

	public func setEvent(_ value: Event) throws {
		try setFieldValue(fieldNum: EventMesg.eventFieldNum, value: value.rawValue)
	}

	public func getEventType() -> EventType? {
		guard let value = getFieldValue(fieldNum: EventMesg.eventTypeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return EventType(rawValue: value) ?? .invalid
	}

	public func setEventType(_ value: EventType) throws {
		try setFieldValue(fieldNum: EventMesg.eventTypeFieldNum, value: value.rawValue)
	}

	public func getData16() -> UInt16? {
		guard let value = getFieldValue(fieldNum: EventMesg.data16FieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setData16(_ value: UInt16) throws {
		try setFieldValue(fieldNum: EventMesg.data16FieldNum, value: value)
	}

	public func getData() -> UInt32? {
		guard let value = getFieldValue(fieldNum: EventMesg.dataFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setData(_ value: UInt32) throws {
		try setFieldValue(fieldNum: EventMesg.dataFieldNum, value: value)
	}

	public func getTimerTrigger() throws -> TimerTrigger? {
		guard let value = try getFieldValue(fieldNum: EventMesg.dataFieldNum, index: 0, subFieldIndex: DataSubField.timerTrigger).map({UInt8(fitValue: $0)}) else {
			return nil
		}
		
		return TimerTrigger(rawValue: value) ?? .invalid
	}

	public func setTimerTrigger(_ value: TimerTrigger) throws {
		try setFieldValue(fieldNum: EventMesg.dataFieldNum, value: value.rawValue, index: 0, subFieldIndex: DataSubField.timerTrigger )
	}

	public func getCoursePointIndex() throws -> MessageIndex? {
		guard let value = try getFieldValue(fieldNum: EventMesg.dataFieldNum, index: 0, subFieldIndex: DataSubField.coursePointIndex).map({UInt16(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setCoursePointIndex(_ value: MessageIndex) throws {
		try setFieldValue(fieldNum: EventMesg.dataFieldNum, value: value, index: 0, subFieldIndex: DataSubField.coursePointIndex )
	}

	public func getBatteryLevel() throws -> Float64? {
		guard let value = try getFieldValue(fieldNum: EventMesg.dataFieldNum, index: 0, subFieldIndex: DataSubField.batteryLevel).map({Float64(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setBatteryLevel(_ value: Float64) throws {
		try setFieldValue(fieldNum: EventMesg.dataFieldNum, value: value, index: 0, subFieldIndex: DataSubField.batteryLevel )
	}

	public func getVirtualPartnerSpeed() throws -> Float64? {
		guard let value = try getFieldValue(fieldNum: EventMesg.dataFieldNum, index: 0, subFieldIndex: DataSubField.virtualPartnerSpeed).map({Float64(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setVirtualPartnerSpeed(_ value: Float64) throws {
		try setFieldValue(fieldNum: EventMesg.dataFieldNum, value: value, index: 0, subFieldIndex: DataSubField.virtualPartnerSpeed )
	}

	public func getHrHighAlert() throws -> UInt8? {
		guard let value = try getFieldValue(fieldNum: EventMesg.dataFieldNum, index: 0, subFieldIndex: DataSubField.hrHighAlert).map({UInt8(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setHrHighAlert(_ value: UInt8) throws {
		try setFieldValue(fieldNum: EventMesg.dataFieldNum, value: value, index: 0, subFieldIndex: DataSubField.hrHighAlert )
	}

	public func getHrLowAlert() throws -> UInt8? {
		guard let value = try getFieldValue(fieldNum: EventMesg.dataFieldNum, index: 0, subFieldIndex: DataSubField.hrLowAlert).map({UInt8(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setHrLowAlert(_ value: UInt8) throws {
		try setFieldValue(fieldNum: EventMesg.dataFieldNum, value: value, index: 0, subFieldIndex: DataSubField.hrLowAlert )
	}

	public func getSpeedHighAlert() throws -> Float64? {
		guard let value = try getFieldValue(fieldNum: EventMesg.dataFieldNum, index: 0, subFieldIndex: DataSubField.speedHighAlert).map({Float64(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setSpeedHighAlert(_ value: Float64) throws {
		try setFieldValue(fieldNum: EventMesg.dataFieldNum, value: value, index: 0, subFieldIndex: DataSubField.speedHighAlert )
	}

	public func getSpeedLowAlert() throws -> Float64? {
		guard let value = try getFieldValue(fieldNum: EventMesg.dataFieldNum, index: 0, subFieldIndex: DataSubField.speedLowAlert).map({Float64(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setSpeedLowAlert(_ value: Float64) throws {
		try setFieldValue(fieldNum: EventMesg.dataFieldNum, value: value, index: 0, subFieldIndex: DataSubField.speedLowAlert )
	}

	public func getCadHighAlert() throws -> UInt16? {
		guard let value = try getFieldValue(fieldNum: EventMesg.dataFieldNum, index: 0, subFieldIndex: DataSubField.cadHighAlert).map({UInt16(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setCadHighAlert(_ value: UInt16) throws {
		try setFieldValue(fieldNum: EventMesg.dataFieldNum, value: value, index: 0, subFieldIndex: DataSubField.cadHighAlert )
	}

	public func getCadLowAlert() throws -> UInt16? {
		guard let value = try getFieldValue(fieldNum: EventMesg.dataFieldNum, index: 0, subFieldIndex: DataSubField.cadLowAlert).map({UInt16(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setCadLowAlert(_ value: UInt16) throws {
		try setFieldValue(fieldNum: EventMesg.dataFieldNum, value: value, index: 0, subFieldIndex: DataSubField.cadLowAlert )
	}

	public func getPowerHighAlert() throws -> UInt16? {
		guard let value = try getFieldValue(fieldNum: EventMesg.dataFieldNum, index: 0, subFieldIndex: DataSubField.powerHighAlert).map({UInt16(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setPowerHighAlert(_ value: UInt16) throws {
		try setFieldValue(fieldNum: EventMesg.dataFieldNum, value: value, index: 0, subFieldIndex: DataSubField.powerHighAlert )
	}

	public func getPowerLowAlert() throws -> UInt16? {
		guard let value = try getFieldValue(fieldNum: EventMesg.dataFieldNum, index: 0, subFieldIndex: DataSubField.powerLowAlert).map({UInt16(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setPowerLowAlert(_ value: UInt16) throws {
		try setFieldValue(fieldNum: EventMesg.dataFieldNum, value: value, index: 0, subFieldIndex: DataSubField.powerLowAlert )
	}

	public func getTimeDurationAlert() throws -> Float64? {
		guard let value = try getFieldValue(fieldNum: EventMesg.dataFieldNum, index: 0, subFieldIndex: DataSubField.timeDurationAlert).map({Float64(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setTimeDurationAlert(_ value: Float64) throws {
		try setFieldValue(fieldNum: EventMesg.dataFieldNum, value: value, index: 0, subFieldIndex: DataSubField.timeDurationAlert )
	}

	public func getDistanceDurationAlert() throws -> Float64? {
		guard let value = try getFieldValue(fieldNum: EventMesg.dataFieldNum, index: 0, subFieldIndex: DataSubField.distanceDurationAlert).map({Float64(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setDistanceDurationAlert(_ value: Float64) throws {
		try setFieldValue(fieldNum: EventMesg.dataFieldNum, value: value, index: 0, subFieldIndex: DataSubField.distanceDurationAlert )
	}

	public func getCalorieDurationAlert() throws -> UInt32? {
		guard let value = try getFieldValue(fieldNum: EventMesg.dataFieldNum, index: 0, subFieldIndex: DataSubField.calorieDurationAlert).map({UInt32(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setCalorieDurationAlert(_ value: UInt32) throws {
		try setFieldValue(fieldNum: EventMesg.dataFieldNum, value: value, index: 0, subFieldIndex: DataSubField.calorieDurationAlert )
	}

	public func getFitnessEquipmentState() throws -> FitnessEquipmentState? {
		guard let value = try getFieldValue(fieldNum: EventMesg.dataFieldNum, index: 0, subFieldIndex: DataSubField.fitnessEquipmentState).map({UInt8(fitValue: $0)}) else {
			return nil
		}
		
		return FitnessEquipmentState(rawValue: value) ?? .invalid
	}

	public func setFitnessEquipmentState(_ value: FitnessEquipmentState) throws {
		try setFieldValue(fieldNum: EventMesg.dataFieldNum, value: value.rawValue, index: 0, subFieldIndex: DataSubField.fitnessEquipmentState )
	}

	public func getSportPoint() throws -> UInt32? {
		guard let value = try getFieldValue(fieldNum: EventMesg.dataFieldNum, index: 0, subFieldIndex: DataSubField.sportPoint).map({UInt32(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setSportPoint(_ value: UInt32) throws {
		try setFieldValue(fieldNum: EventMesg.dataFieldNum, value: value, index: 0, subFieldIndex: DataSubField.sportPoint )
	}

	public func getGearChangeData() throws -> UInt32? {
		guard let value = try getFieldValue(fieldNum: EventMesg.dataFieldNum, index: 0, subFieldIndex: DataSubField.gearChangeData).map({UInt32(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setGearChangeData(_ value: UInt32) throws {
		try setFieldValue(fieldNum: EventMesg.dataFieldNum, value: value, index: 0, subFieldIndex: DataSubField.gearChangeData )
	}

	public func getRiderPosition() throws -> RiderPositionType? {
		guard let value = try getFieldValue(fieldNum: EventMesg.dataFieldNum, index: 0, subFieldIndex: DataSubField.riderPosition).map({UInt8(fitValue: $0)}) else {
			return nil
		}
		
		return RiderPositionType(rawValue: value) ?? .invalid
	}

	public func setRiderPosition(_ value: RiderPositionType) throws {
		try setFieldValue(fieldNum: EventMesg.dataFieldNum, value: value.rawValue, index: 0, subFieldIndex: DataSubField.riderPosition )
	}

	public func getCommTimeout() throws -> CommTimeoutType? {
		guard let value = try getFieldValue(fieldNum: EventMesg.dataFieldNum, index: 0, subFieldIndex: DataSubField.commTimeout).map({UInt16(fitValue: $0)}) else {
			return nil
		}
		
		return CommTimeoutType(rawValue: value) ?? .invalid
	}

	public func setCommTimeout(_ value: CommTimeoutType) throws {
		try setFieldValue(fieldNum: EventMesg.dataFieldNum, value: value.rawValue, index: 0, subFieldIndex: DataSubField.commTimeout )
	}

	public func getDiveAlert() throws -> DiveAlert? {
		guard let value = try getFieldValue(fieldNum: EventMesg.dataFieldNum, index: 0, subFieldIndex: DataSubField.diveAlert).map({UInt8(fitValue: $0)}) else {
			return nil
		}
		
		return DiveAlert(rawValue: value) ?? .invalid
	}

	public func setDiveAlert(_ value: DiveAlert) throws {
		try setFieldValue(fieldNum: EventMesg.dataFieldNum, value: value.rawValue, index: 0, subFieldIndex: DataSubField.diveAlert )
	}

	public func getAutoActivityDetectDuration() throws -> UInt16? {
		guard let value = try getFieldValue(fieldNum: EventMesg.dataFieldNum, index: 0, subFieldIndex: DataSubField.autoActivityDetectDuration).map({UInt16(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setAutoActivityDetectDuration(_ value: UInt16) throws {
		try setFieldValue(fieldNum: EventMesg.dataFieldNum, value: value, index: 0, subFieldIndex: DataSubField.autoActivityDetectDuration )
	}

	public func getRadarThreatAlert() throws -> UInt32? {
		guard let value = try getFieldValue(fieldNum: EventMesg.dataFieldNum, index: 0, subFieldIndex: DataSubField.radarThreatAlert).map({UInt32(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setRadarThreatAlert(_ value: UInt32) throws {
		try setFieldValue(fieldNum: EventMesg.dataFieldNum, value: value, index: 0, subFieldIndex: DataSubField.radarThreatAlert )
	}

	public func getEventGroup() -> UInt8? {
		guard let value = getFieldValue(fieldNum: EventMesg.eventGroupFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setEventGroup(_ value: UInt8) throws {
		try setFieldValue(fieldNum: EventMesg.eventGroupFieldNum, value: value)
	}

	public func getScore() -> UInt16? {
		guard let value = getFieldValue(fieldNum: EventMesg.scoreFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setScore(_ value: UInt16) throws {
		try setFieldValue(fieldNum: EventMesg.scoreFieldNum, value: value)
	}

	public func getOpponentScore() -> UInt16? {
		guard let value = getFieldValue(fieldNum: EventMesg.opponentScoreFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setOpponentScore(_ value: UInt16) throws {
		try setFieldValue(fieldNum: EventMesg.opponentScoreFieldNum, value: value)
	}

	public func getFrontGearNum() -> UInt8? {
		guard let value = getFieldValue(fieldNum: EventMesg.frontGearNumFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setFrontGearNum(_ value: UInt8) throws {
		try setFieldValue(fieldNum: EventMesg.frontGearNumFieldNum, value: value)
	}

	public func getFrontGear() -> UInt8? {
		guard let value = getFieldValue(fieldNum: EventMesg.frontGearFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setFrontGear(_ value: UInt8) throws {
		try setFieldValue(fieldNum: EventMesg.frontGearFieldNum, value: value)
	}

	public func getRearGearNum() -> UInt8? {
		guard let value = getFieldValue(fieldNum: EventMesg.rearGearNumFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setRearGearNum(_ value: UInt8) throws {
		try setFieldValue(fieldNum: EventMesg.rearGearNumFieldNum, value: value)
	}

	public func getRearGear() -> UInt8? {
		guard let value = getFieldValue(fieldNum: EventMesg.rearGearFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setRearGear(_ value: UInt8) throws {
		try setFieldValue(fieldNum: EventMesg.rearGearFieldNum, value: value)
	}

	public func getDeviceIndex() -> DeviceIndex? {
		guard let value = getFieldValue(fieldNum: EventMesg.deviceIndexFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setDeviceIndex(_ value: DeviceIndex) throws {
		try setFieldValue(fieldNum: EventMesg.deviceIndexFieldNum, value: value)
	}

	public func getActivityType() -> ActivityType? {
		guard let value = getFieldValue(fieldNum: EventMesg.activityTypeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return ActivityType(rawValue: value) ?? .invalid
	}

	public func setActivityType(_ value: ActivityType) throws {
		try setFieldValue(fieldNum: EventMesg.activityTypeFieldNum, value: value.rawValue)
	}

	public func getStartTimestamp() -> DateTime? {
		guard let value = getFieldValue(fieldNum: EventMesg.startTimestampFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setStartTimestamp(_ value: DateTime) throws {
		try setFieldValue(fieldNum: EventMesg.startTimestampFieldNum, value: value.timestamp)
	}

	public func getAutoActivityDetectStartTimestamp() throws -> DateTime? {
		guard let value = try getFieldValue(fieldNum: EventMesg.startTimestampFieldNum, index: 0, subFieldIndex: StartTimestampSubField.autoActivityDetectStartTimestamp).map({UInt32(fitValue: $0)}) else {
			return nil
		}
		
		return DateTime(timestamp: value)
	}

	public func setAutoActivityDetectStartTimestamp(_ value: DateTime) throws {
		try setFieldValue(fieldNum: EventMesg.startTimestampFieldNum, value: value.timestamp, index: 0, subFieldIndex: StartTimestampSubField.autoActivityDetectStartTimestamp )
	}

	public func getRadarThreatLevelMax() -> RadarThreatLevelType? {
		guard let value = getFieldValue(fieldNum: EventMesg.radarThreatLevelMaxFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return RadarThreatLevelType(rawValue: value) ?? .invalid
	}

	public func setRadarThreatLevelMax(_ value: RadarThreatLevelType) throws {
		try setFieldValue(fieldNum: EventMesg.radarThreatLevelMaxFieldNum, value: value.rawValue)
	}

	public func getRadarThreatCount() -> UInt8? {
		guard let value = getFieldValue(fieldNum: EventMesg.radarThreatCountFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setRadarThreatCount(_ value: UInt8) throws {
		try setFieldValue(fieldNum: EventMesg.radarThreatCountFieldNum, value: value)
	}

	public func getRadarThreatAvgApproachSpeed() -> Float64? {
		guard let value = getFieldValue(fieldNum: EventMesg.radarThreatAvgApproachSpeedFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setRadarThreatAvgApproachSpeed(_ value: Float64) throws {
		try setFieldValue(fieldNum: EventMesg.radarThreatAvgApproachSpeedFieldNum, value: value)
	}

	public func getRadarThreatMaxApproachSpeed() -> Float64? {
		guard let value = getFieldValue(fieldNum: EventMesg.radarThreatMaxApproachSpeedFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setRadarThreatMaxApproachSpeed(_ value: Float64) throws {
		try setFieldValue(fieldNum: EventMesg.radarThreatMaxApproachSpeedFieldNum, value: value)
	}

	public class func createEventMesg() -> EventMesg {
        let mesg = EventMesg(name: "Event", num: Profile.MesgNum.event)
		
		mesg.fields[EventMesg.timestampFieldNum] = Field(name: "Timestamp", num: EventMesg.timestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
		mesg.fields[EventMesg.eventFieldNum] = Field(name: "Event", num: EventMesg.eventFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[EventMesg.eventTypeFieldNum] = Field(name: "EventType", num: EventMesg.eventTypeFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[EventMesg.data16FieldNum] = Field(name: "Data16", num: EventMesg.data16FieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[EventMesg.data16FieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: dataFieldNum, accumulated: false, bits: 16, scale: 1, offset: 0))
		mesg.fields[EventMesg.dataFieldNum] = Field(name: "Data", num: EventMesg.dataFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
        mesg.fields[EventMesg.dataFieldNum]?.subFields.append(SubField(name: "TimerTrigger", type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: ""))
        mesg.fields[EventMesg.dataFieldNum]?.subFields[Int(DataSubField.timerTrigger)].addMap(refFieldNum: 0, refFieldValue: 0)
        mesg.fields[EventMesg.dataFieldNum]?.subFields.append(SubField(name: "CoursePointIndex", type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: ""))
        mesg.fields[EventMesg.dataFieldNum]?.subFields[Int(DataSubField.coursePointIndex)].addMap(refFieldNum: 0, refFieldValue: 10)
        mesg.fields[EventMesg.dataFieldNum]?.subFields.append(SubField(name: "BatteryLevel", type: BaseType.UINT16.rawValue, scale: 1000, offset: 0, units: "V"))
        mesg.fields[EventMesg.dataFieldNum]?.subFields[Int(DataSubField.batteryLevel)].addMap(refFieldNum: 0, refFieldValue: 11)
        mesg.fields[EventMesg.dataFieldNum]?.subFields.append(SubField(name: "VirtualPartnerSpeed", type: BaseType.UINT16.rawValue, scale: 1000, offset: 0, units: "m/s"))
        mesg.fields[EventMesg.dataFieldNum]?.subFields[Int(DataSubField.virtualPartnerSpeed)].addMap(refFieldNum: 0, refFieldValue: 12)
        mesg.fields[EventMesg.dataFieldNum]?.subFields.append(SubField(name: "HrHighAlert", type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "bpm"))
        mesg.fields[EventMesg.dataFieldNum]?.subFields[Int(DataSubField.hrHighAlert)].addMap(refFieldNum: 0, refFieldValue: 13)
        mesg.fields[EventMesg.dataFieldNum]?.subFields.append(SubField(name: "HrLowAlert", type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "bpm"))
        mesg.fields[EventMesg.dataFieldNum]?.subFields[Int(DataSubField.hrLowAlert)].addMap(refFieldNum: 0, refFieldValue: 14)
        mesg.fields[EventMesg.dataFieldNum]?.subFields.append(SubField(name: "SpeedHighAlert", type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "m/s"))
        mesg.fields[EventMesg.dataFieldNum]?.subFields[Int(DataSubField.speedHighAlert)].addMap(refFieldNum: 0, refFieldValue: 15)
        mesg.fields[EventMesg.dataFieldNum]?.subFields.append(SubField(name: "SpeedLowAlert", type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "m/s"))
        mesg.fields[EventMesg.dataFieldNum]?.subFields[Int(DataSubField.speedLowAlert)].addMap(refFieldNum: 0, refFieldValue: 16)
        mesg.fields[EventMesg.dataFieldNum]?.subFields.append(SubField(name: "CadHighAlert", type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "rpm"))
        mesg.fields[EventMesg.dataFieldNum]?.subFields[Int(DataSubField.cadHighAlert)].addMap(refFieldNum: 0, refFieldValue: 17)
        mesg.fields[EventMesg.dataFieldNum]?.subFields.append(SubField(name: "CadLowAlert", type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "rpm"))
        mesg.fields[EventMesg.dataFieldNum]?.subFields[Int(DataSubField.cadLowAlert)].addMap(refFieldNum: 0, refFieldValue: 18)
        mesg.fields[EventMesg.dataFieldNum]?.subFields.append(SubField(name: "PowerHighAlert", type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "watts"))
        mesg.fields[EventMesg.dataFieldNum]?.subFields[Int(DataSubField.powerHighAlert)].addMap(refFieldNum: 0, refFieldValue: 19)
        mesg.fields[EventMesg.dataFieldNum]?.subFields.append(SubField(name: "PowerLowAlert", type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "watts"))
        mesg.fields[EventMesg.dataFieldNum]?.subFields[Int(DataSubField.powerLowAlert)].addMap(refFieldNum: 0, refFieldValue: 20)
        mesg.fields[EventMesg.dataFieldNum]?.subFields.append(SubField(name: "TimeDurationAlert", type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "s"))
        mesg.fields[EventMesg.dataFieldNum]?.subFields[Int(DataSubField.timeDurationAlert)].addMap(refFieldNum: 0, refFieldValue: 23)
        mesg.fields[EventMesg.dataFieldNum]?.subFields.append(SubField(name: "DistanceDurationAlert", type: BaseType.UINT32.rawValue, scale: 100, offset: 0, units: "m"))
        mesg.fields[EventMesg.dataFieldNum]?.subFields[Int(DataSubField.distanceDurationAlert)].addMap(refFieldNum: 0, refFieldValue: 24)
        mesg.fields[EventMesg.dataFieldNum]?.subFields.append(SubField(name: "CalorieDurationAlert", type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "calories"))
        mesg.fields[EventMesg.dataFieldNum]?.subFields[Int(DataSubField.calorieDurationAlert)].addMap(refFieldNum: 0, refFieldValue: 25)
        mesg.fields[EventMesg.dataFieldNum]?.subFields.append(SubField(name: "FitnessEquipmentState", type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: ""))
        mesg.fields[EventMesg.dataFieldNum]?.subFields[Int(DataSubField.fitnessEquipmentState)].addMap(refFieldNum: 0, refFieldValue: 27)
        mesg.fields[EventMesg.dataFieldNum]?.subFields.append(SubField(name: "SportPoint", type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: ""))
        mesg.fields[EventMesg.dataFieldNum]?.subFields[Int(DataSubField.sportPoint)].addMap(refFieldNum: 0, refFieldValue: 33)
		mesg.fields[EventMesg.dataFieldNum]?.subFields[Int(DataSubField.sportPoint)].addComponent(newComponent: FieldComponent(fieldNum: scoreFieldNum, accumulated: false, bits: 16, scale: 1, offset: 0))
		mesg.fields[EventMesg.dataFieldNum]?.subFields[Int(DataSubField.sportPoint)].addComponent(newComponent: FieldComponent(fieldNum: opponentScoreFieldNum, accumulated: false, bits: 16, scale: 1, offset: 0))
        mesg.fields[EventMesg.dataFieldNum]?.subFields.append(SubField(name: "GearChangeData", type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: ""))
        mesg.fields[EventMesg.dataFieldNum]?.subFields[Int(DataSubField.gearChangeData)].addMap(refFieldNum: 0, refFieldValue: 42)
        mesg.fields[EventMesg.dataFieldNum]?.subFields[Int(DataSubField.gearChangeData)].addMap(refFieldNum: 0, refFieldValue: 43)
		mesg.fields[EventMesg.dataFieldNum]?.subFields[Int(DataSubField.gearChangeData)].addComponent(newComponent: FieldComponent(fieldNum: rearGearNumFieldNum, accumulated: false, bits: 8, scale: 1, offset: 0))
		mesg.fields[EventMesg.dataFieldNum]?.subFields[Int(DataSubField.gearChangeData)].addComponent(newComponent: FieldComponent(fieldNum: rearGearFieldNum, accumulated: false, bits: 8, scale: 1, offset: 0))
		mesg.fields[EventMesg.dataFieldNum]?.subFields[Int(DataSubField.gearChangeData)].addComponent(newComponent: FieldComponent(fieldNum: frontGearNumFieldNum, accumulated: false, bits: 8, scale: 1, offset: 0))
		mesg.fields[EventMesg.dataFieldNum]?.subFields[Int(DataSubField.gearChangeData)].addComponent(newComponent: FieldComponent(fieldNum: frontGearFieldNum, accumulated: false, bits: 8, scale: 1, offset: 0))
        mesg.fields[EventMesg.dataFieldNum]?.subFields.append(SubField(name: "RiderPosition", type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: ""))
        mesg.fields[EventMesg.dataFieldNum]?.subFields[Int(DataSubField.riderPosition)].addMap(refFieldNum: 0, refFieldValue: 44)
        mesg.fields[EventMesg.dataFieldNum]?.subFields.append(SubField(name: "CommTimeout", type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: ""))
        mesg.fields[EventMesg.dataFieldNum]?.subFields[Int(DataSubField.commTimeout)].addMap(refFieldNum: 0, refFieldValue: 47)
        mesg.fields[EventMesg.dataFieldNum]?.subFields.append(SubField(name: "DiveAlert", type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: ""))
        mesg.fields[EventMesg.dataFieldNum]?.subFields[Int(DataSubField.diveAlert)].addMap(refFieldNum: 0, refFieldValue: 56)
        mesg.fields[EventMesg.dataFieldNum]?.subFields.append(SubField(name: "AutoActivityDetectDuration", type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "min"))
        mesg.fields[EventMesg.dataFieldNum]?.subFields[Int(DataSubField.autoActivityDetectDuration)].addMap(refFieldNum: 0, refFieldValue: 54)
        mesg.fields[EventMesg.dataFieldNum]?.subFields.append(SubField(name: "RadarThreatAlert", type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: ""))
        mesg.fields[EventMesg.dataFieldNum]?.subFields[Int(DataSubField.radarThreatAlert)].addMap(refFieldNum: 0, refFieldValue: 75)
		mesg.fields[EventMesg.dataFieldNum]?.subFields[Int(DataSubField.radarThreatAlert)].addComponent(newComponent: FieldComponent(fieldNum: radarThreatLevelMaxFieldNum, accumulated: false, bits: 8, scale: 1, offset: 0))
		mesg.fields[EventMesg.dataFieldNum]?.subFields[Int(DataSubField.radarThreatAlert)].addComponent(newComponent: FieldComponent(fieldNum: radarThreatCountFieldNum, accumulated: false, bits: 8, scale: 1, offset: 0))
		mesg.fields[EventMesg.dataFieldNum]?.subFields[Int(DataSubField.radarThreatAlert)].addComponent(newComponent: FieldComponent(fieldNum: radarThreatAvgApproachSpeedFieldNum, accumulated: false, bits: 8, scale: 10, offset: 0))
		mesg.fields[EventMesg.dataFieldNum]?.subFields[Int(DataSubField.radarThreatAlert)].addComponent(newComponent: FieldComponent(fieldNum: radarThreatMaxApproachSpeedFieldNum, accumulated: false, bits: 8, scale: 10, offset: 0))
		mesg.fields[EventMesg.eventGroupFieldNum] = Field(name: "EventGroup", num: EventMesg.eventGroupFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[EventMesg.scoreFieldNum] = Field(name: "Score", num: EventMesg.scoreFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[EventMesg.opponentScoreFieldNum] = Field(name: "OpponentScore", num: EventMesg.opponentScoreFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[EventMesg.frontGearNumFieldNum] = Field(name: "FrontGearNum", num: EventMesg.frontGearNumFieldNum, type: BaseType.UINT8Z.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[EventMesg.frontGearFieldNum] = Field(name: "FrontGear", num: EventMesg.frontGearFieldNum, type: BaseType.UINT8Z.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[EventMesg.rearGearNumFieldNum] = Field(name: "RearGearNum", num: EventMesg.rearGearNumFieldNum, type: BaseType.UINT8Z.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[EventMesg.rearGearFieldNum] = Field(name: "RearGear", num: EventMesg.rearGearFieldNum, type: BaseType.UINT8Z.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[EventMesg.deviceIndexFieldNum] = Field(name: "DeviceIndex", num: EventMesg.deviceIndexFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[EventMesg.activityTypeFieldNum] = Field(name: "ActivityType", num: EventMesg.activityTypeFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[EventMesg.startTimestampFieldNum] = Field(name: "StartTimestamp", num: EventMesg.startTimestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
        mesg.fields[EventMesg.startTimestampFieldNum]?.subFields.append(SubField(name: "AutoActivityDetectStartTimestamp", type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "s"))
        mesg.fields[EventMesg.startTimestampFieldNum]?.subFields[Int(StartTimestampSubField.autoActivityDetectStartTimestamp)].addMap(refFieldNum: 0, refFieldValue: 54)
		mesg.fields[EventMesg.radarThreatLevelMaxFieldNum] = Field(name: "RadarThreatLevelMax", num: EventMesg.radarThreatLevelMaxFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[EventMesg.radarThreatCountFieldNum] = Field(name: "RadarThreatCount", num: EventMesg.radarThreatCountFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[EventMesg.radarThreatAvgApproachSpeedFieldNum] = Field(name: "RadarThreatAvgApproachSpeed", num: EventMesg.radarThreatAvgApproachSpeedFieldNum, type: BaseType.UINT8.rawValue, scale: 10, offset: 0, units: "m/s", accumulated: false)
		mesg.fields[EventMesg.radarThreatMaxApproachSpeedFieldNum] = Field(name: "RadarThreatMaxApproachSpeed", num: EventMesg.radarThreatMaxApproachSpeedFieldNum, type: BaseType.UINT8.rawValue, scale: 10, offset: 0, units: "m/s", accumulated: false)
        return mesg
    }
}