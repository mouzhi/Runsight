/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class ExdDataFieldConfigurationMesg : Mesg {
    public static let screenIndexFieldNum:UInt8 = 0
    public static let conceptFieldFieldNum:UInt8 = 1
    public static let fieldIdFieldNum:UInt8 = 2
    public static let conceptCountFieldNum:UInt8 = 3
    public static let displayTypeFieldNum:UInt8 = 4
    public static let titleFieldNum:UInt8 = 5

	public init() {
        super.init(mesg: ExdDataFieldConfigurationMesg.createExdDataFieldConfigurationMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getScreenIndex() -> UInt8? {
		guard let value = getFieldValue(fieldNum: ExdDataFieldConfigurationMesg.screenIndexFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setScreenIndex(_ value: UInt8) throws {
		try setFieldValue(fieldNum: ExdDataFieldConfigurationMesg.screenIndexFieldNum, value: value)
	}

	public func getConceptField() -> UInt8? {
		guard let value = getFieldValue(fieldNum: ExdDataFieldConfigurationMesg.conceptFieldFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setConceptField(_ value: UInt8) throws {
		try setFieldValue(fieldNum: ExdDataFieldConfigurationMesg.conceptFieldFieldNum, value: value)
	}

	public func getFieldId() -> UInt8? {
		guard let value = getFieldValue(fieldNum: ExdDataFieldConfigurationMesg.fieldIdFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setFieldId(_ value: UInt8) throws {
		try setFieldValue(fieldNum: ExdDataFieldConfigurationMesg.fieldIdFieldNum, value: value)
	}

	public func getConceptCount() -> UInt8? {
		guard let value = getFieldValue(fieldNum: ExdDataFieldConfigurationMesg.conceptCountFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setConceptCount(_ value: UInt8) throws {
		try setFieldValue(fieldNum: ExdDataFieldConfigurationMesg.conceptCountFieldNum, value: value)
	}

	public func getDisplayType() -> ExdDisplayType? {
		guard let value = getFieldValue(fieldNum: ExdDataFieldConfigurationMesg.displayTypeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return ExdDisplayType(rawValue: value) ?? .invalid
	}

	public func setDisplayType(_ value: ExdDisplayType) throws {
		try setFieldValue(fieldNum: ExdDataFieldConfigurationMesg.displayTypeFieldNum, value: value.rawValue)
	}

	public func getNumTitle() -> UInt8 {
		guard let field = getField(fieldNum: ExdDataFieldConfigurationMesg.titleFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getTitle() -> [String?]? {
		guard let field = getField(fieldNum: ExdDataFieldConfigurationMesg.titleFieldNum) else {
			return nil
		}
		return field.toArray() as [String?]
	}

	public func getTitle(index: Int) -> String? {
		guard let value = getFieldValue(fieldNum: ExdDataFieldConfigurationMesg.titleFieldNum, index: index) as? String else {
            return nil
        }
		return value
	}

	public func setTitle(index: Int, value: String) throws {
		try setFieldValue(fieldNum: ExdDataFieldConfigurationMesg.titleFieldNum, value: value, index: index)
	}

	public class func createExdDataFieldConfigurationMesg() -> ExdDataFieldConfigurationMesg {
        let mesg = ExdDataFieldConfigurationMesg(name: "ExdDataFieldConfiguration", num: Profile.MesgNum.exdDataFieldConfiguration)
		
		mesg.fields[ExdDataFieldConfigurationMesg.screenIndexFieldNum] = Field(name: "ScreenIndex", num: ExdDataFieldConfigurationMesg.screenIndexFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[ExdDataFieldConfigurationMesg.conceptFieldFieldNum] = Field(name: "ConceptField", num: ExdDataFieldConfigurationMesg.conceptFieldFieldNum, type: BaseType.BYTE.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[ExdDataFieldConfigurationMesg.conceptFieldFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: fieldIdFieldNum, accumulated: false, bits: 4, scale: 1, offset: 0))
		mesg.fields[ExdDataFieldConfigurationMesg.conceptFieldFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: conceptCountFieldNum, accumulated: false, bits: 4, scale: 1, offset: 0))
		mesg.fields[ExdDataFieldConfigurationMesg.fieldIdFieldNum] = Field(name: "FieldId", num: ExdDataFieldConfigurationMesg.fieldIdFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[ExdDataFieldConfigurationMesg.conceptCountFieldNum] = Field(name: "ConceptCount", num: ExdDataFieldConfigurationMesg.conceptCountFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[ExdDataFieldConfigurationMesg.displayTypeFieldNum] = Field(name: "DisplayType", num: ExdDataFieldConfigurationMesg.displayTypeFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[ExdDataFieldConfigurationMesg.titleFieldNum] = Field(name: "Title", num: ExdDataFieldConfigurationMesg.titleFieldNum, type: BaseType.STRING.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
        return mesg
    }
}