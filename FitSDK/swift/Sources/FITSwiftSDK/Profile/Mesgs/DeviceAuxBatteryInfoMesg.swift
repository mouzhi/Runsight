/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class DeviceAuxBatteryInfoMesg : Mesg {
    public static let timestampFieldNum:UInt8 = 253
    public static let deviceIndexFieldNum:UInt8 = 0
    public static let batteryVoltageFieldNum:UInt8 = 1
    public static let batteryStatusFieldNum:UInt8 = 2
    public static let batteryIdentifierFieldNum:UInt8 = 3

	public init() {
        super.init(mesg: DeviceAuxBatteryInfoMesg.createDeviceAuxBatteryInfoMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getTimestamp() -> DateTime? {
		guard let value = getFieldValue(fieldNum: DeviceAuxBatteryInfoMesg.timestampFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setTimestamp(_ value: DateTime) throws {
		try setFieldValue(fieldNum: DeviceAuxBatteryInfoMesg.timestampFieldNum, value: value.timestamp)
	}

	public func getDeviceIndex() -> DeviceIndex? {
		guard let value = getFieldValue(fieldNum: DeviceAuxBatteryInfoMesg.deviceIndexFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setDeviceIndex(_ value: DeviceIndex) throws {
		try setFieldValue(fieldNum: DeviceAuxBatteryInfoMesg.deviceIndexFieldNum, value: value)
	}

	public func getBatteryVoltage() -> Float64? {
		guard let value = getFieldValue(fieldNum: DeviceAuxBatteryInfoMesg.batteryVoltageFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setBatteryVoltage(_ value: Float64) throws {
		try setFieldValue(fieldNum: DeviceAuxBatteryInfoMesg.batteryVoltageFieldNum, value: value)
	}

	public func getBatteryStatus() -> BatteryStatus? {
		guard let value = getFieldValue(fieldNum: DeviceAuxBatteryInfoMesg.batteryStatusFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return BatteryStatus(rawValue: value) ?? .invalid
	}

	public func setBatteryStatus(_ value: BatteryStatus) throws {
		try setFieldValue(fieldNum: DeviceAuxBatteryInfoMesg.batteryStatusFieldNum, value: value.rawValue)
	}

	public func getBatteryIdentifier() -> UInt8? {
		guard let value = getFieldValue(fieldNum: DeviceAuxBatteryInfoMesg.batteryIdentifierFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setBatteryIdentifier(_ value: UInt8) throws {
		try setFieldValue(fieldNum: DeviceAuxBatteryInfoMesg.batteryIdentifierFieldNum, value: value)
	}

	public class func createDeviceAuxBatteryInfoMesg() -> DeviceAuxBatteryInfoMesg {
        let mesg = DeviceAuxBatteryInfoMesg(name: "DeviceAuxBatteryInfo", num: Profile.MesgNum.deviceAuxBatteryInfo)
		
		mesg.fields[DeviceAuxBatteryInfoMesg.timestampFieldNum] = Field(name: "Timestamp", num: DeviceAuxBatteryInfoMesg.timestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DeviceAuxBatteryInfoMesg.deviceIndexFieldNum] = Field(name: "DeviceIndex", num: DeviceAuxBatteryInfoMesg.deviceIndexFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DeviceAuxBatteryInfoMesg.batteryVoltageFieldNum] = Field(name: "BatteryVoltage", num: DeviceAuxBatteryInfoMesg.batteryVoltageFieldNum, type: BaseType.UINT16.rawValue, scale: 256, offset: 0, units: "V", accumulated: false)
		mesg.fields[DeviceAuxBatteryInfoMesg.batteryStatusFieldNum] = Field(name: "BatteryStatus", num: DeviceAuxBatteryInfoMesg.batteryStatusFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DeviceAuxBatteryInfoMesg.batteryIdentifierFieldNum] = Field(name: "BatteryIdentifier", num: DeviceAuxBatteryInfoMesg.batteryIdentifierFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
        return mesg
    }
}