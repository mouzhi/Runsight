/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class DiveGasMesg : Mesg {
    public static let messageIndexFieldNum:UInt8 = 254
    public static let heliumContentFieldNum:UInt8 = 0
    public static let oxygenContentFieldNum:UInt8 = 1
    public static let statusFieldNum:UInt8 = 2
    public static let modeFieldNum:UInt8 = 3

	public init() {
        super.init(mesg: DiveGasMesg.createDiveGasMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getMessageIndex() -> MessageIndex? {
		guard let value = getFieldValue(fieldNum: DiveGasMesg.messageIndexFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setMessageIndex(_ value: MessageIndex) throws {
		try setFieldValue(fieldNum: DiveGasMesg.messageIndexFieldNum, value: value)
	}

	public func getHeliumContent() -> UInt8? {
		guard let value = getFieldValue(fieldNum: DiveGasMesg.heliumContentFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setHeliumContent(_ value: UInt8) throws {
		try setFieldValue(fieldNum: DiveGasMesg.heliumContentFieldNum, value: value)
	}

	public func getOxygenContent() -> UInt8? {
		guard let value = getFieldValue(fieldNum: DiveGasMesg.oxygenContentFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setOxygenContent(_ value: UInt8) throws {
		try setFieldValue(fieldNum: DiveGasMesg.oxygenContentFieldNum, value: value)
	}

	public func getStatus() -> DiveGasStatus? {
		guard let value = getFieldValue(fieldNum: DiveGasMesg.statusFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return DiveGasStatus(rawValue: value) ?? .invalid
	}

	public func setStatus(_ value: DiveGasStatus) throws {
		try setFieldValue(fieldNum: DiveGasMesg.statusFieldNum, value: value.rawValue)
	}

	public func getMode() -> DiveGasMode? {
		guard let value = getFieldValue(fieldNum: DiveGasMesg.modeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return DiveGasMode(rawValue: value) ?? .invalid
	}

	public func setMode(_ value: DiveGasMode) throws {
		try setFieldValue(fieldNum: DiveGasMesg.modeFieldNum, value: value.rawValue)
	}

	public class func createDiveGasMesg() -> DiveGasMesg {
        let mesg = DiveGasMesg(name: "DiveGas", num: Profile.MesgNum.diveGas)
		
		mesg.fields[DiveGasMesg.messageIndexFieldNum] = Field(name: "MessageIndex", num: DiveGasMesg.messageIndexFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DiveGasMesg.heliumContentFieldNum] = Field(name: "HeliumContent", num: DiveGasMesg.heliumContentFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "percent", accumulated: false)
		mesg.fields[DiveGasMesg.oxygenContentFieldNum] = Field(name: "OxygenContent", num: DiveGasMesg.oxygenContentFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "percent", accumulated: false)
		mesg.fields[DiveGasMesg.statusFieldNum] = Field(name: "Status", num: DiveGasMesg.statusFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DiveGasMesg.modeFieldNum] = Field(name: "Mode", num: DiveGasMesg.modeFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
        return mesg
    }
}