/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class HrMesg : Mesg {
    public static let timestampFieldNum:UInt8 = 253
    public static let fractionalTimestampFieldNum:UInt8 = 0
    public static let time256FieldNum:UInt8 = 1
    public static let filteredBpmFieldNum:UInt8 = 6
    public static let eventTimestampFieldNum:UInt8 = 9
    public static let eventTimestamp12FieldNum:UInt8 = 10

	public init() {
        super.init(mesg: HrMesg.createHrMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getTimestamp() -> DateTime? {
		guard let value = getFieldValue(fieldNum: HrMesg.timestampFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setTimestamp(_ value: DateTime) throws {
		try setFieldValue(fieldNum: HrMesg.timestampFieldNum, value: value.timestamp)
	}

	public func getFractionalTimestamp() -> Float64? {
		guard let value = getFieldValue(fieldNum: HrMesg.fractionalTimestampFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setFractionalTimestamp(_ value: Float64) throws {
		try setFieldValue(fieldNum: HrMesg.fractionalTimestampFieldNum, value: value)
	}

	public func getTime256() -> Float64? {
		guard let value = getFieldValue(fieldNum: HrMesg.time256FieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTime256(_ value: Float64) throws {
		try setFieldValue(fieldNum: HrMesg.time256FieldNum, value: value)
	}

	public func getNumFilteredBpm() -> UInt8 {
		guard let field = getField(fieldNum: HrMesg.filteredBpmFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getFilteredBpm() -> [UInt8?]? {
		guard let field = getField(fieldNum: HrMesg.filteredBpmFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt8?]
	}

	public func getFilteredBpm(index: Int) -> UInt8? {
		guard let value = getFieldValue(fieldNum: HrMesg.filteredBpmFieldNum, index: index) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setFilteredBpm(index: Int, value: UInt8) throws {
		try setFieldValue(fieldNum: HrMesg.filteredBpmFieldNum, value: value, index: index)
	}

	public func getNumEventTimestamp() -> UInt8 {
		guard let field = getField(fieldNum: HrMesg.eventTimestampFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getEventTimestamp() -> [Float64?]? {
		guard let field = getField(fieldNum: HrMesg.eventTimestampFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getEventTimestamp(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: HrMesg.eventTimestampFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setEventTimestamp(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: HrMesg.eventTimestampFieldNum, value: value, index: index)
	}

	public func getNumEventTimestamp12() -> UInt8 {
		guard let field = getField(fieldNum: HrMesg.eventTimestamp12FieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getEventTimestamp12() -> [UInt8?]? {
		guard let field = getField(fieldNum: HrMesg.eventTimestamp12FieldNum) else {
			return nil
		}
		return field.toArray() as [UInt8?]
	}

	public func getEventTimestamp12(index: Int) -> UInt8? {
		guard let value = getFieldValue(fieldNum: HrMesg.eventTimestamp12FieldNum, index: index) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setEventTimestamp12(index: Int, value: UInt8) throws {
		try setFieldValue(fieldNum: HrMesg.eventTimestamp12FieldNum, value: value, index: index)
	}

	public class func createHrMesg() -> HrMesg {
        let mesg = HrMesg(name: "Hr", num: Profile.MesgNum.hr)
		
		mesg.fields[HrMesg.timestampFieldNum] = Field(name: "Timestamp", num: HrMesg.timestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[HrMesg.fractionalTimestampFieldNum] = Field(name: "FractionalTimestamp", num: HrMesg.fractionalTimestampFieldNum, type: BaseType.UINT16.rawValue, scale: 32768, offset: 0, units: "s", accumulated: false)
		mesg.fields[HrMesg.time256FieldNum] = Field(name: "Time256", num: HrMesg.time256FieldNum, type: BaseType.UINT8.rawValue, scale: 256, offset: 0, units: "s", accumulated: false)
		mesg.fields[HrMesg.time256FieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: fractionalTimestampFieldNum, accumulated: false, bits: 8, scale: 256, offset: 0))
		mesg.fields[HrMesg.filteredBpmFieldNum] = Field(name: "FilteredBpm", num: HrMesg.filteredBpmFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "bpm", accumulated: false)
		mesg.fields[HrMesg.eventTimestampFieldNum] = Field(name: "EventTimestamp", num: HrMesg.eventTimestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1024, offset: 0, units: "s", accumulated: true)
		mesg.fields[HrMesg.eventTimestamp12FieldNum] = Field(name: "EventTimestamp12", num: HrMesg.eventTimestamp12FieldNum, type: BaseType.BYTE.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[HrMesg.eventTimestamp12FieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: eventTimestampFieldNum, accumulated: true, bits: 12, scale: 1024, offset: 0))
		mesg.fields[HrMesg.eventTimestamp12FieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: eventTimestampFieldNum, accumulated: true, bits: 12, scale: 1024, offset: 0))
		mesg.fields[HrMesg.eventTimestamp12FieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: eventTimestampFieldNum, accumulated: true, bits: 12, scale: 1024, offset: 0))
		mesg.fields[HrMesg.eventTimestamp12FieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: eventTimestampFieldNum, accumulated: true, bits: 12, scale: 1024, offset: 0))
		mesg.fields[HrMesg.eventTimestamp12FieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: eventTimestampFieldNum, accumulated: true, bits: 12, scale: 1024, offset: 0))
		mesg.fields[HrMesg.eventTimestamp12FieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: eventTimestampFieldNum, accumulated: true, bits: 12, scale: 1024, offset: 0))
		mesg.fields[HrMesg.eventTimestamp12FieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: eventTimestampFieldNum, accumulated: true, bits: 12, scale: 1024, offset: 0))
		mesg.fields[HrMesg.eventTimestamp12FieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: eventTimestampFieldNum, accumulated: true, bits: 12, scale: 1024, offset: 0))
		mesg.fields[HrMesg.eventTimestamp12FieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: eventTimestampFieldNum, accumulated: true, bits: 12, scale: 1024, offset: 0))
		mesg.fields[HrMesg.eventTimestamp12FieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: eventTimestampFieldNum, accumulated: true, bits: 12, scale: 1024, offset: 0))
        return mesg
    }
}