/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class MagnetometerDataMesg : Mesg {
    public static let timestampFieldNum:UInt8 = 253
    public static let timestampMsFieldNum:UInt8 = 0
    public static let sampleTimeOffsetFieldNum:UInt8 = 1
    public static let magXFieldNum:UInt8 = 2
    public static let magYFieldNum:UInt8 = 3
    public static let magZFieldNum:UInt8 = 4
    public static let calibratedMagXFieldNum:UInt8 = 5
    public static let calibratedMagYFieldNum:UInt8 = 6
    public static let calibratedMagZFieldNum:UInt8 = 7

	public init() {
        super.init(mesg: MagnetometerDataMesg.createMagnetometerDataMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getTimestamp() -> DateTime? {
		guard let value = getFieldValue(fieldNum: MagnetometerDataMesg.timestampFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setTimestamp(_ value: DateTime) throws {
		try setFieldValue(fieldNum: MagnetometerDataMesg.timestampFieldNum, value: value.timestamp)
	}

	public func getTimestampMs() -> UInt16? {
		guard let value = getFieldValue(fieldNum: MagnetometerDataMesg.timestampMsFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setTimestampMs(_ value: UInt16) throws {
		try setFieldValue(fieldNum: MagnetometerDataMesg.timestampMsFieldNum, value: value)
	}

	public func getNumSampleTimeOffset() -> UInt8 {
		guard let field = getField(fieldNum: MagnetometerDataMesg.sampleTimeOffsetFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getSampleTimeOffset() -> [UInt16?]? {
		guard let field = getField(fieldNum: MagnetometerDataMesg.sampleTimeOffsetFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt16?]
	}

	public func getSampleTimeOffset(index: Int) -> UInt16? {
		guard let value = getFieldValue(fieldNum: MagnetometerDataMesg.sampleTimeOffsetFieldNum, index: index) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setSampleTimeOffset(index: Int, value: UInt16) throws {
		try setFieldValue(fieldNum: MagnetometerDataMesg.sampleTimeOffsetFieldNum, value: value, index: index)
	}

	public func getNumMagX() -> UInt8 {
		guard let field = getField(fieldNum: MagnetometerDataMesg.magXFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getMagX() -> [UInt16?]? {
		guard let field = getField(fieldNum: MagnetometerDataMesg.magXFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt16?]
	}

	public func getMagX(index: Int) -> UInt16? {
		guard let value = getFieldValue(fieldNum: MagnetometerDataMesg.magXFieldNum, index: index) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setMagX(index: Int, value: UInt16) throws {
		try setFieldValue(fieldNum: MagnetometerDataMesg.magXFieldNum, value: value, index: index)
	}

	public func getNumMagY() -> UInt8 {
		guard let field = getField(fieldNum: MagnetometerDataMesg.magYFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getMagY() -> [UInt16?]? {
		guard let field = getField(fieldNum: MagnetometerDataMesg.magYFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt16?]
	}

	public func getMagY(index: Int) -> UInt16? {
		guard let value = getFieldValue(fieldNum: MagnetometerDataMesg.magYFieldNum, index: index) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setMagY(index: Int, value: UInt16) throws {
		try setFieldValue(fieldNum: MagnetometerDataMesg.magYFieldNum, value: value, index: index)
	}

	public func getNumMagZ() -> UInt8 {
		guard let field = getField(fieldNum: MagnetometerDataMesg.magZFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getMagZ() -> [UInt16?]? {
		guard let field = getField(fieldNum: MagnetometerDataMesg.magZFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt16?]
	}

	public func getMagZ(index: Int) -> UInt16? {
		guard let value = getFieldValue(fieldNum: MagnetometerDataMesg.magZFieldNum, index: index) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setMagZ(index: Int, value: UInt16) throws {
		try setFieldValue(fieldNum: MagnetometerDataMesg.magZFieldNum, value: value, index: index)
	}

	public func getNumCalibratedMagX() -> UInt8 {
		guard let field = getField(fieldNum: MagnetometerDataMesg.calibratedMagXFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getCalibratedMagX() -> [Float32?]? {
		guard let field = getField(fieldNum: MagnetometerDataMesg.calibratedMagXFieldNum) else {
			return nil
		}
		return field.toArray() as [Float32?]
	}

	public func getCalibratedMagX(index: Int) -> Float32? {
		guard let value = getFieldValue(fieldNum: MagnetometerDataMesg.calibratedMagXFieldNum, index: index) as? Float32 else {
            return nil
        }
		return value
	}

	public func setCalibratedMagX(index: Int, value: Float32) throws {
		try setFieldValue(fieldNum: MagnetometerDataMesg.calibratedMagXFieldNum, value: value, index: index)
	}

	public func getNumCalibratedMagY() -> UInt8 {
		guard let field = getField(fieldNum: MagnetometerDataMesg.calibratedMagYFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getCalibratedMagY() -> [Float32?]? {
		guard let field = getField(fieldNum: MagnetometerDataMesg.calibratedMagYFieldNum) else {
			return nil
		}
		return field.toArray() as [Float32?]
	}

	public func getCalibratedMagY(index: Int) -> Float32? {
		guard let value = getFieldValue(fieldNum: MagnetometerDataMesg.calibratedMagYFieldNum, index: index) as? Float32 else {
            return nil
        }
		return value
	}

	public func setCalibratedMagY(index: Int, value: Float32) throws {
		try setFieldValue(fieldNum: MagnetometerDataMesg.calibratedMagYFieldNum, value: value, index: index)
	}

	public func getNumCalibratedMagZ() -> UInt8 {
		guard let field = getField(fieldNum: MagnetometerDataMesg.calibratedMagZFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getCalibratedMagZ() -> [Float32?]? {
		guard let field = getField(fieldNum: MagnetometerDataMesg.calibratedMagZFieldNum) else {
			return nil
		}
		return field.toArray() as [Float32?]
	}

	public func getCalibratedMagZ(index: Int) -> Float32? {
		guard let value = getFieldValue(fieldNum: MagnetometerDataMesg.calibratedMagZFieldNum, index: index) as? Float32 else {
            return nil
        }
		return value
	}

	public func setCalibratedMagZ(index: Int, value: Float32) throws {
		try setFieldValue(fieldNum: MagnetometerDataMesg.calibratedMagZFieldNum, value: value, index: index)
	}

	public class func createMagnetometerDataMesg() -> MagnetometerDataMesg {
        let mesg = MagnetometerDataMesg(name: "MagnetometerData", num: Profile.MesgNum.magnetometerData)
		
		mesg.fields[MagnetometerDataMesg.timestampFieldNum] = Field(name: "Timestamp", num: MagnetometerDataMesg.timestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
		mesg.fields[MagnetometerDataMesg.timestampMsFieldNum] = Field(name: "TimestampMs", num: MagnetometerDataMesg.timestampMsFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "ms", accumulated: false)
		mesg.fields[MagnetometerDataMesg.sampleTimeOffsetFieldNum] = Field(name: "SampleTimeOffset", num: MagnetometerDataMesg.sampleTimeOffsetFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "ms", accumulated: false)
		mesg.fields[MagnetometerDataMesg.magXFieldNum] = Field(name: "MagX", num: MagnetometerDataMesg.magXFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "counts", accumulated: false)
		mesg.fields[MagnetometerDataMesg.magYFieldNum] = Field(name: "MagY", num: MagnetometerDataMesg.magYFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "counts", accumulated: false)
		mesg.fields[MagnetometerDataMesg.magZFieldNum] = Field(name: "MagZ", num: MagnetometerDataMesg.magZFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "counts", accumulated: false)
		mesg.fields[MagnetometerDataMesg.calibratedMagXFieldNum] = Field(name: "CalibratedMagX", num: MagnetometerDataMesg.calibratedMagXFieldNum, type: BaseType.FLOAT32.rawValue, scale: 1, offset: 0, units: "G", accumulated: false)
		mesg.fields[MagnetometerDataMesg.calibratedMagYFieldNum] = Field(name: "CalibratedMagY", num: MagnetometerDataMesg.calibratedMagYFieldNum, type: BaseType.FLOAT32.rawValue, scale: 1, offset: 0, units: "G", accumulated: false)
		mesg.fields[MagnetometerDataMesg.calibratedMagZFieldNum] = Field(name: "CalibratedMagZ", num: MagnetometerDataMesg.calibratedMagZFieldNum, type: BaseType.FLOAT32.rawValue, scale: 1, offset: 0, units: "G", accumulated: false)
        return mesg
    }
}