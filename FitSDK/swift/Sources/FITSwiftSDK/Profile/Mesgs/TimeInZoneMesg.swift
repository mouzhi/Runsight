/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class TimeInZoneMesg : Mesg {
    public static let timestampFieldNum:UInt8 = 253
    public static let referenceMesgFieldNum:UInt8 = 0
    public static let referenceIndexFieldNum:UInt8 = 1
    public static let timeInHrZoneFieldNum:UInt8 = 2
    public static let timeInSpeedZoneFieldNum:UInt8 = 3
    public static let timeInCadenceZoneFieldNum:UInt8 = 4
    public static let timeInPowerZoneFieldNum:UInt8 = 5
    public static let hrZoneHighBoundaryFieldNum:UInt8 = 6
    public static let speedZoneHighBoundaryFieldNum:UInt8 = 7
    public static let cadenceZoneHighBondaryFieldNum:UInt8 = 8
    public static let powerZoneHighBoundaryFieldNum:UInt8 = 9
    public static let hrCalcTypeFieldNum:UInt8 = 10
    public static let maxHeartRateFieldNum:UInt8 = 11
    public static let restingHeartRateFieldNum:UInt8 = 12
    public static let thresholdHeartRateFieldNum:UInt8 = 13
    public static let pwrCalcTypeFieldNum:UInt8 = 14
    public static let functionalThresholdPowerFieldNum:UInt8 = 15

	public init() {
        super.init(mesg: TimeInZoneMesg.createTimeInZoneMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getTimestamp() -> DateTime? {
		guard let value = getFieldValue(fieldNum: TimeInZoneMesg.timestampFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setTimestamp(_ value: DateTime) throws {
		try setFieldValue(fieldNum: TimeInZoneMesg.timestampFieldNum, value: value.timestamp)
	}

	public func getReferenceMesg() -> MesgNum? {
		guard let value = getFieldValue(fieldNum: TimeInZoneMesg.referenceMesgFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return MesgNum(rawValue: value) ?? .invalid
	}

	public func setReferenceMesg(_ value: MesgNum) throws {
		try setFieldValue(fieldNum: TimeInZoneMesg.referenceMesgFieldNum, value: value.rawValue)
	}

	public func getReferenceIndex() -> MessageIndex? {
		guard let value = getFieldValue(fieldNum: TimeInZoneMesg.referenceIndexFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setReferenceIndex(_ value: MessageIndex) throws {
		try setFieldValue(fieldNum: TimeInZoneMesg.referenceIndexFieldNum, value: value)
	}

	public func getNumTimeInHrZone() -> UInt8 {
		guard let field = getField(fieldNum: TimeInZoneMesg.timeInHrZoneFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getTimeInHrZone() -> [Float64?]? {
		guard let field = getField(fieldNum: TimeInZoneMesg.timeInHrZoneFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getTimeInHrZone(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: TimeInZoneMesg.timeInHrZoneFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTimeInHrZone(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: TimeInZoneMesg.timeInHrZoneFieldNum, value: value, index: index)
	}

	public func getNumTimeInSpeedZone() -> UInt8 {
		guard let field = getField(fieldNum: TimeInZoneMesg.timeInSpeedZoneFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getTimeInSpeedZone() -> [Float64?]? {
		guard let field = getField(fieldNum: TimeInZoneMesg.timeInSpeedZoneFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getTimeInSpeedZone(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: TimeInZoneMesg.timeInSpeedZoneFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTimeInSpeedZone(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: TimeInZoneMesg.timeInSpeedZoneFieldNum, value: value, index: index)
	}

	public func getNumTimeInCadenceZone() -> UInt8 {
		guard let field = getField(fieldNum: TimeInZoneMesg.timeInCadenceZoneFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getTimeInCadenceZone() -> [Float64?]? {
		guard let field = getField(fieldNum: TimeInZoneMesg.timeInCadenceZoneFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getTimeInCadenceZone(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: TimeInZoneMesg.timeInCadenceZoneFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTimeInCadenceZone(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: TimeInZoneMesg.timeInCadenceZoneFieldNum, value: value, index: index)
	}

	public func getNumTimeInPowerZone() -> UInt8 {
		guard let field = getField(fieldNum: TimeInZoneMesg.timeInPowerZoneFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getTimeInPowerZone() -> [Float64?]? {
		guard let field = getField(fieldNum: TimeInZoneMesg.timeInPowerZoneFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getTimeInPowerZone(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: TimeInZoneMesg.timeInPowerZoneFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTimeInPowerZone(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: TimeInZoneMesg.timeInPowerZoneFieldNum, value: value, index: index)
	}

	public func getNumHrZoneHighBoundary() -> UInt8 {
		guard let field = getField(fieldNum: TimeInZoneMesg.hrZoneHighBoundaryFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getHrZoneHighBoundary() -> [UInt8?]? {
		guard let field = getField(fieldNum: TimeInZoneMesg.hrZoneHighBoundaryFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt8?]
	}

	public func getHrZoneHighBoundary(index: Int) -> UInt8? {
		guard let value = getFieldValue(fieldNum: TimeInZoneMesg.hrZoneHighBoundaryFieldNum, index: index) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setHrZoneHighBoundary(index: Int, value: UInt8) throws {
		try setFieldValue(fieldNum: TimeInZoneMesg.hrZoneHighBoundaryFieldNum, value: value, index: index)
	}

	public func getNumSpeedZoneHighBoundary() -> UInt8 {
		guard let field = getField(fieldNum: TimeInZoneMesg.speedZoneHighBoundaryFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getSpeedZoneHighBoundary() -> [Float64?]? {
		guard let field = getField(fieldNum: TimeInZoneMesg.speedZoneHighBoundaryFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getSpeedZoneHighBoundary(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: TimeInZoneMesg.speedZoneHighBoundaryFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setSpeedZoneHighBoundary(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: TimeInZoneMesg.speedZoneHighBoundaryFieldNum, value: value, index: index)
	}

	public func getNumCadenceZoneHighBondary() -> UInt8 {
		guard let field = getField(fieldNum: TimeInZoneMesg.cadenceZoneHighBondaryFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getCadenceZoneHighBondary() -> [UInt8?]? {
		guard let field = getField(fieldNum: TimeInZoneMesg.cadenceZoneHighBondaryFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt8?]
	}

	public func getCadenceZoneHighBondary(index: Int) -> UInt8? {
		guard let value = getFieldValue(fieldNum: TimeInZoneMesg.cadenceZoneHighBondaryFieldNum, index: index) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setCadenceZoneHighBondary(index: Int, value: UInt8) throws {
		try setFieldValue(fieldNum: TimeInZoneMesg.cadenceZoneHighBondaryFieldNum, value: value, index: index)
	}

	public func getNumPowerZoneHighBoundary() -> UInt8 {
		guard let field = getField(fieldNum: TimeInZoneMesg.powerZoneHighBoundaryFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getPowerZoneHighBoundary() -> [UInt16?]? {
		guard let field = getField(fieldNum: TimeInZoneMesg.powerZoneHighBoundaryFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt16?]
	}

	public func getPowerZoneHighBoundary(index: Int) -> UInt16? {
		guard let value = getFieldValue(fieldNum: TimeInZoneMesg.powerZoneHighBoundaryFieldNum, index: index) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setPowerZoneHighBoundary(index: Int, value: UInt16) throws {
		try setFieldValue(fieldNum: TimeInZoneMesg.powerZoneHighBoundaryFieldNum, value: value, index: index)
	}

	public func getHrCalcType() -> HrZoneCalc? {
		guard let value = getFieldValue(fieldNum: TimeInZoneMesg.hrCalcTypeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return HrZoneCalc(rawValue: value) ?? .invalid
	}

	public func setHrCalcType(_ value: HrZoneCalc) throws {
		try setFieldValue(fieldNum: TimeInZoneMesg.hrCalcTypeFieldNum, value: value.rawValue)
	}

	public func getMaxHeartRate() -> UInt8? {
		guard let value = getFieldValue(fieldNum: TimeInZoneMesg.maxHeartRateFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setMaxHeartRate(_ value: UInt8) throws {
		try setFieldValue(fieldNum: TimeInZoneMesg.maxHeartRateFieldNum, value: value)
	}

	public func getRestingHeartRate() -> UInt8? {
		guard let value = getFieldValue(fieldNum: TimeInZoneMesg.restingHeartRateFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setRestingHeartRate(_ value: UInt8) throws {
		try setFieldValue(fieldNum: TimeInZoneMesg.restingHeartRateFieldNum, value: value)
	}

	public func getThresholdHeartRate() -> UInt8? {
		guard let value = getFieldValue(fieldNum: TimeInZoneMesg.thresholdHeartRateFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setThresholdHeartRate(_ value: UInt8) throws {
		try setFieldValue(fieldNum: TimeInZoneMesg.thresholdHeartRateFieldNum, value: value)
	}

	public func getPwrCalcType() -> PwrZoneCalc? {
		guard let value = getFieldValue(fieldNum: TimeInZoneMesg.pwrCalcTypeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return PwrZoneCalc(rawValue: value) ?? .invalid
	}

	public func setPwrCalcType(_ value: PwrZoneCalc) throws {
		try setFieldValue(fieldNum: TimeInZoneMesg.pwrCalcTypeFieldNum, value: value.rawValue)
	}

	public func getFunctionalThresholdPower() -> UInt16? {
		guard let value = getFieldValue(fieldNum: TimeInZoneMesg.functionalThresholdPowerFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setFunctionalThresholdPower(_ value: UInt16) throws {
		try setFieldValue(fieldNum: TimeInZoneMesg.functionalThresholdPowerFieldNum, value: value)
	}

	public class func createTimeInZoneMesg() -> TimeInZoneMesg {
        let mesg = TimeInZoneMesg(name: "TimeInZone", num: Profile.MesgNum.timeInZone)
		
		mesg.fields[TimeInZoneMesg.timestampFieldNum] = Field(name: "Timestamp", num: TimeInZoneMesg.timestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
		mesg.fields[TimeInZoneMesg.referenceMesgFieldNum] = Field(name: "ReferenceMesg", num: TimeInZoneMesg.referenceMesgFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[TimeInZoneMesg.referenceIndexFieldNum] = Field(name: "ReferenceIndex", num: TimeInZoneMesg.referenceIndexFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[TimeInZoneMesg.timeInHrZoneFieldNum] = Field(name: "TimeInHrZone", num: TimeInZoneMesg.timeInHrZoneFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "s", accumulated: false)
		mesg.fields[TimeInZoneMesg.timeInSpeedZoneFieldNum] = Field(name: "TimeInSpeedZone", num: TimeInZoneMesg.timeInSpeedZoneFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "s", accumulated: false)
		mesg.fields[TimeInZoneMesg.timeInCadenceZoneFieldNum] = Field(name: "TimeInCadenceZone", num: TimeInZoneMesg.timeInCadenceZoneFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "s", accumulated: false)
		mesg.fields[TimeInZoneMesg.timeInPowerZoneFieldNum] = Field(name: "TimeInPowerZone", num: TimeInZoneMesg.timeInPowerZoneFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "s", accumulated: false)
		mesg.fields[TimeInZoneMesg.hrZoneHighBoundaryFieldNum] = Field(name: "HrZoneHighBoundary", num: TimeInZoneMesg.hrZoneHighBoundaryFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "bpm", accumulated: false)
		mesg.fields[TimeInZoneMesg.speedZoneHighBoundaryFieldNum] = Field(name: "SpeedZoneHighBoundary", num: TimeInZoneMesg.speedZoneHighBoundaryFieldNum, type: BaseType.UINT16.rawValue, scale: 1000, offset: 0, units: "m/s", accumulated: false)
		mesg.fields[TimeInZoneMesg.cadenceZoneHighBondaryFieldNum] = Field(name: "CadenceZoneHighBondary", num: TimeInZoneMesg.cadenceZoneHighBondaryFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "rpm", accumulated: false)
		mesg.fields[TimeInZoneMesg.powerZoneHighBoundaryFieldNum] = Field(name: "PowerZoneHighBoundary", num: TimeInZoneMesg.powerZoneHighBoundaryFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "watts", accumulated: false)
		mesg.fields[TimeInZoneMesg.hrCalcTypeFieldNum] = Field(name: "HrCalcType", num: TimeInZoneMesg.hrCalcTypeFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[TimeInZoneMesg.maxHeartRateFieldNum] = Field(name: "MaxHeartRate", num: TimeInZoneMesg.maxHeartRateFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[TimeInZoneMesg.restingHeartRateFieldNum] = Field(name: "RestingHeartRate", num: TimeInZoneMesg.restingHeartRateFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[TimeInZoneMesg.thresholdHeartRateFieldNum] = Field(name: "ThresholdHeartRate", num: TimeInZoneMesg.thresholdHeartRateFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[TimeInZoneMesg.pwrCalcTypeFieldNum] = Field(name: "PwrCalcType", num: TimeInZoneMesg.pwrCalcTypeFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[TimeInZoneMesg.functionalThresholdPowerFieldNum] = Field(name: "FunctionalThresholdPower", num: TimeInZoneMesg.functionalThresholdPowerFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
        return mesg
    }
}