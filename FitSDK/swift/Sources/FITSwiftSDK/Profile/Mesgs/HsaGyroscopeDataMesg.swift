/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class HsaGyroscopeDataMesg : Mesg {
    public static let timestampFieldNum:UInt8 = 253
    public static let timestampMsFieldNum:UInt8 = 0
    public static let samplingIntervalFieldNum:UInt8 = 1
    public static let gyroXFieldNum:UInt8 = 2
    public static let gyroYFieldNum:UInt8 = 3
    public static let gyroZFieldNum:UInt8 = 4
    public static let timestamp32kFieldNum:UInt8 = 5

	public init() {
        super.init(mesg: HsaGyroscopeDataMesg.createHsaGyroscopeDataMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getTimestamp() -> DateTime? {
		guard let value = getFieldValue(fieldNum: HsaGyroscopeDataMesg.timestampFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setTimestamp(_ value: DateTime) throws {
		try setFieldValue(fieldNum: HsaGyroscopeDataMesg.timestampFieldNum, value: value.timestamp)
	}

	public func getTimestampMs() -> UInt16? {
		guard let value = getFieldValue(fieldNum: HsaGyroscopeDataMesg.timestampMsFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setTimestampMs(_ value: UInt16) throws {
		try setFieldValue(fieldNum: HsaGyroscopeDataMesg.timestampMsFieldNum, value: value)
	}

	public func getSamplingInterval() -> UInt16? {
		guard let value = getFieldValue(fieldNum: HsaGyroscopeDataMesg.samplingIntervalFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setSamplingInterval(_ value: UInt16) throws {
		try setFieldValue(fieldNum: HsaGyroscopeDataMesg.samplingIntervalFieldNum, value: value)
	}

	public func getNumGyroX() -> UInt8 {
		guard let field = getField(fieldNum: HsaGyroscopeDataMesg.gyroXFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getGyroX() -> [Float64?]? {
		guard let field = getField(fieldNum: HsaGyroscopeDataMesg.gyroXFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getGyroX(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: HsaGyroscopeDataMesg.gyroXFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setGyroX(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: HsaGyroscopeDataMesg.gyroXFieldNum, value: value, index: index)
	}

	public func getNumGyroY() -> UInt8 {
		guard let field = getField(fieldNum: HsaGyroscopeDataMesg.gyroYFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getGyroY() -> [Float64?]? {
		guard let field = getField(fieldNum: HsaGyroscopeDataMesg.gyroYFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getGyroY(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: HsaGyroscopeDataMesg.gyroYFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setGyroY(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: HsaGyroscopeDataMesg.gyroYFieldNum, value: value, index: index)
	}

	public func getNumGyroZ() -> UInt8 {
		guard let field = getField(fieldNum: HsaGyroscopeDataMesg.gyroZFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getGyroZ() -> [Float64?]? {
		guard let field = getField(fieldNum: HsaGyroscopeDataMesg.gyroZFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getGyroZ(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: HsaGyroscopeDataMesg.gyroZFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setGyroZ(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: HsaGyroscopeDataMesg.gyroZFieldNum, value: value, index: index)
	}

	public func getTimestamp32k() -> UInt32? {
		guard let value = getFieldValue(fieldNum: HsaGyroscopeDataMesg.timestamp32kFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setTimestamp32k(_ value: UInt32) throws {
		try setFieldValue(fieldNum: HsaGyroscopeDataMesg.timestamp32kFieldNum, value: value)
	}

	public class func createHsaGyroscopeDataMesg() -> HsaGyroscopeDataMesg {
        let mesg = HsaGyroscopeDataMesg(name: "HsaGyroscopeData", num: Profile.MesgNum.hsaGyroscopeData)
		
		mesg.fields[HsaGyroscopeDataMesg.timestampFieldNum] = Field(name: "Timestamp", num: HsaGyroscopeDataMesg.timestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
		mesg.fields[HsaGyroscopeDataMesg.timestampMsFieldNum] = Field(name: "TimestampMs", num: HsaGyroscopeDataMesg.timestampMsFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "ms", accumulated: false)
		mesg.fields[HsaGyroscopeDataMesg.samplingIntervalFieldNum] = Field(name: "SamplingInterval", num: HsaGyroscopeDataMesg.samplingIntervalFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "1/32768 s", accumulated: false)
		mesg.fields[HsaGyroscopeDataMesg.gyroXFieldNum] = Field(name: "GyroX", num: HsaGyroscopeDataMesg.gyroXFieldNum, type: BaseType.SINT16.rawValue, scale: 28.57143, offset: 0, units: "deg/s", accumulated: false)
		mesg.fields[HsaGyroscopeDataMesg.gyroYFieldNum] = Field(name: "GyroY", num: HsaGyroscopeDataMesg.gyroYFieldNum, type: BaseType.SINT16.rawValue, scale: 28.57143, offset: 0, units: "deg/s", accumulated: false)
		mesg.fields[HsaGyroscopeDataMesg.gyroZFieldNum] = Field(name: "GyroZ", num: HsaGyroscopeDataMesg.gyroZFieldNum, type: BaseType.SINT16.rawValue, scale: 28.57143, offset: 0, units: "deg/s", accumulated: false)
		mesg.fields[HsaGyroscopeDataMesg.timestamp32kFieldNum] = Field(name: "Timestamp32k", num: HsaGyroscopeDataMesg.timestamp32kFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "1/32768 s", accumulated: false)
        return mesg
    }
}