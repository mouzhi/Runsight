/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class AviationAttitudeMesg : Mesg {
    public static let timestampFieldNum:UInt8 = 253
    public static let timestampMsFieldNum:UInt8 = 0
    public static let systemTimeFieldNum:UInt8 = 1
    public static let pitchFieldNum:UInt8 = 2
    public static let rollFieldNum:UInt8 = 3
    public static let accelLateralFieldNum:UInt8 = 4
    public static let accelNormalFieldNum:UInt8 = 5
    public static let turnRateFieldNum:UInt8 = 6
    public static let stageFieldNum:UInt8 = 7
    public static let attitudeStageCompleteFieldNum:UInt8 = 8
    public static let trackFieldNum:UInt8 = 9
    public static let validityFieldNum:UInt8 = 10

	public init() {
        super.init(mesg: AviationAttitudeMesg.createAviationAttitudeMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getTimestamp() -> DateTime? {
		guard let value = getFieldValue(fieldNum: AviationAttitudeMesg.timestampFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setTimestamp(_ value: DateTime) throws {
		try setFieldValue(fieldNum: AviationAttitudeMesg.timestampFieldNum, value: value.timestamp)
	}

	public func getTimestampMs() -> UInt16? {
		guard let value = getFieldValue(fieldNum: AviationAttitudeMesg.timestampMsFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setTimestampMs(_ value: UInt16) throws {
		try setFieldValue(fieldNum: AviationAttitudeMesg.timestampMsFieldNum, value: value)
	}

	public func getNumSystemTime() -> UInt8 {
		guard let field = getField(fieldNum: AviationAttitudeMesg.systemTimeFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getSystemTime() -> [UInt32?]? {
		guard let field = getField(fieldNum: AviationAttitudeMesg.systemTimeFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt32?]
	}

	public func getSystemTime(index: Int) -> UInt32? {
		guard let value = getFieldValue(fieldNum: AviationAttitudeMesg.systemTimeFieldNum, index: index) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setSystemTime(index: Int, value: UInt32) throws {
		try setFieldValue(fieldNum: AviationAttitudeMesg.systemTimeFieldNum, value: value, index: index)
	}

	public func getNumPitch() -> UInt8 {
		guard let field = getField(fieldNum: AviationAttitudeMesg.pitchFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getPitch() -> [Float64?]? {
		guard let field = getField(fieldNum: AviationAttitudeMesg.pitchFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getPitch(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: AviationAttitudeMesg.pitchFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setPitch(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: AviationAttitudeMesg.pitchFieldNum, value: value, index: index)
	}

	public func getNumRoll() -> UInt8 {
		guard let field = getField(fieldNum: AviationAttitudeMesg.rollFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getRoll() -> [Float64?]? {
		guard let field = getField(fieldNum: AviationAttitudeMesg.rollFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getRoll(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: AviationAttitudeMesg.rollFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setRoll(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: AviationAttitudeMesg.rollFieldNum, value: value, index: index)
	}

	public func getNumAccelLateral() -> UInt8 {
		guard let field = getField(fieldNum: AviationAttitudeMesg.accelLateralFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getAccelLateral() -> [Float64?]? {
		guard let field = getField(fieldNum: AviationAttitudeMesg.accelLateralFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getAccelLateral(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: AviationAttitudeMesg.accelLateralFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAccelLateral(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: AviationAttitudeMesg.accelLateralFieldNum, value: value, index: index)
	}

	public func getNumAccelNormal() -> UInt8 {
		guard let field = getField(fieldNum: AviationAttitudeMesg.accelNormalFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getAccelNormal() -> [Float64?]? {
		guard let field = getField(fieldNum: AviationAttitudeMesg.accelNormalFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getAccelNormal(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: AviationAttitudeMesg.accelNormalFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAccelNormal(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: AviationAttitudeMesg.accelNormalFieldNum, value: value, index: index)
	}

	public func getNumTurnRate() -> UInt8 {
		guard let field = getField(fieldNum: AviationAttitudeMesg.turnRateFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getTurnRate() -> [Float64?]? {
		guard let field = getField(fieldNum: AviationAttitudeMesg.turnRateFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getTurnRate(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: AviationAttitudeMesg.turnRateFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTurnRate(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: AviationAttitudeMesg.turnRateFieldNum, value: value, index: index)
	}

	public func getNumStage() -> UInt8 {
		guard let field = getField(fieldNum: AviationAttitudeMesg.stageFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getStage() -> [AttitudeStage?]? {
		guard let field = getField(fieldNum: AviationAttitudeMesg.stageFieldNum) else {
			return nil
		}

		let rawValues = field.toArray() as [Any?]
		var values = [AttitudeStage]()
		for rawValue in rawValues {
			values.append(
				AttitudeStage(rawValue: rawValue as! UInt8)!
			)
		}

		return values
	}

	public func getStage(index: Int) -> AttitudeStage? {
		guard let value = getFieldValue(fieldNum: AviationAttitudeMesg.stageFieldNum, index: index) as? UInt8 else {
            return nil
        }
		return AttitudeStage(rawValue: value) ?? .invalid
	}

	public func setStage(index: Int, value: AttitudeStage) throws {
		try setFieldValue(fieldNum: AviationAttitudeMesg.stageFieldNum, value: value.rawValue, index: index)
	}

	public func getNumAttitudeStageComplete() -> UInt8 {
		guard let field = getField(fieldNum: AviationAttitudeMesg.attitudeStageCompleteFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getAttitudeStageComplete() -> [UInt8?]? {
		guard let field = getField(fieldNum: AviationAttitudeMesg.attitudeStageCompleteFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt8?]
	}

	public func getAttitudeStageComplete(index: Int) -> UInt8? {
		guard let value = getFieldValue(fieldNum: AviationAttitudeMesg.attitudeStageCompleteFieldNum, index: index) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setAttitudeStageComplete(index: Int, value: UInt8) throws {
		try setFieldValue(fieldNum: AviationAttitudeMesg.attitudeStageCompleteFieldNum, value: value, index: index)
	}

	public func getNumTrack() -> UInt8 {
		guard let field = getField(fieldNum: AviationAttitudeMesg.trackFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getTrack() -> [Float64?]? {
		guard let field = getField(fieldNum: AviationAttitudeMesg.trackFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getTrack(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: AviationAttitudeMesg.trackFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTrack(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: AviationAttitudeMesg.trackFieldNum, value: value, index: index)
	}

	public func getNumValidity() -> UInt8 {
		guard let field = getField(fieldNum: AviationAttitudeMesg.validityFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getValidity() -> [AttitudeValidity?]? {
		guard let field = getField(fieldNum: AviationAttitudeMesg.validityFieldNum) else {
			return nil
		}
		return field.toArray() as [AttitudeValidity?]
	}

	public func getValidity(index: Int) -> AttitudeValidity? {
		guard let value = getFieldValue(fieldNum: AviationAttitudeMesg.validityFieldNum, index: index) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setValidity(index: Int, value: AttitudeValidity) throws {
		try setFieldValue(fieldNum: AviationAttitudeMesg.validityFieldNum, value: value, index: index)
	}

	public class func createAviationAttitudeMesg() -> AviationAttitudeMesg {
        let mesg = AviationAttitudeMesg(name: "AviationAttitude", num: Profile.MesgNum.aviationAttitude)
		
		mesg.fields[AviationAttitudeMesg.timestampFieldNum] = Field(name: "Timestamp", num: AviationAttitudeMesg.timestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
		mesg.fields[AviationAttitudeMesg.timestampMsFieldNum] = Field(name: "TimestampMs", num: AviationAttitudeMesg.timestampMsFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "ms", accumulated: false)
		mesg.fields[AviationAttitudeMesg.systemTimeFieldNum] = Field(name: "SystemTime", num: AviationAttitudeMesg.systemTimeFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "ms", accumulated: false)
		mesg.fields[AviationAttitudeMesg.pitchFieldNum] = Field(name: "Pitch", num: AviationAttitudeMesg.pitchFieldNum, type: BaseType.SINT16.rawValue, scale: 10430.38, offset: 0, units: "radians", accumulated: false)
		mesg.fields[AviationAttitudeMesg.rollFieldNum] = Field(name: "Roll", num: AviationAttitudeMesg.rollFieldNum, type: BaseType.SINT16.rawValue, scale: 10430.38, offset: 0, units: "radians", accumulated: false)
		mesg.fields[AviationAttitudeMesg.accelLateralFieldNum] = Field(name: "AccelLateral", num: AviationAttitudeMesg.accelLateralFieldNum, type: BaseType.SINT16.rawValue, scale: 100, offset: 0, units: "m/s^2", accumulated: false)
		mesg.fields[AviationAttitudeMesg.accelNormalFieldNum] = Field(name: "AccelNormal", num: AviationAttitudeMesg.accelNormalFieldNum, type: BaseType.SINT16.rawValue, scale: 100, offset: 0, units: "m/s^2", accumulated: false)
		mesg.fields[AviationAttitudeMesg.turnRateFieldNum] = Field(name: "TurnRate", num: AviationAttitudeMesg.turnRateFieldNum, type: BaseType.SINT16.rawValue, scale: 1024, offset: 0, units: "radians/second", accumulated: false)
		mesg.fields[AviationAttitudeMesg.stageFieldNum] = Field(name: "Stage", num: AviationAttitudeMesg.stageFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[AviationAttitudeMesg.attitudeStageCompleteFieldNum] = Field(name: "AttitudeStageComplete", num: AviationAttitudeMesg.attitudeStageCompleteFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "%", accumulated: false)
		mesg.fields[AviationAttitudeMesg.trackFieldNum] = Field(name: "Track", num: AviationAttitudeMesg.trackFieldNum, type: BaseType.UINT16.rawValue, scale: 10430.38, offset: 0, units: "radians", accumulated: false)
		mesg.fields[AviationAttitudeMesg.validityFieldNum] = Field(name: "Validity", num: AviationAttitudeMesg.validityFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
        return mesg
    }
}