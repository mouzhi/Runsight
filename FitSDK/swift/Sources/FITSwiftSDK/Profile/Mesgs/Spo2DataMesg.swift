/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class Spo2DataMesg : Mesg {
    public static let timestampFieldNum:UInt8 = 253
    public static let readingSpo2FieldNum:UInt8 = 0
    public static let readingConfidenceFieldNum:UInt8 = 1
    public static let modeFieldNum:UInt8 = 2

	public init() {
        super.init(mesg: Spo2DataMesg.createSpo2DataMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getTimestamp() -> DateTime? {
		guard let value = getFieldValue(fieldNum: Spo2DataMesg.timestampFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setTimestamp(_ value: DateTime) throws {
		try setFieldValue(fieldNum: Spo2DataMesg.timestampFieldNum, value: value.timestamp)
	}

	public func getReadingSpo2() -> UInt8? {
		guard let value = getFieldValue(fieldNum: Spo2DataMesg.readingSpo2FieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setReadingSpo2(_ value: UInt8) throws {
		try setFieldValue(fieldNum: Spo2DataMesg.readingSpo2FieldNum, value: value)
	}

	public func getReadingConfidence() -> UInt8? {
		guard let value = getFieldValue(fieldNum: Spo2DataMesg.readingConfidenceFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setReadingConfidence(_ value: UInt8) throws {
		try setFieldValue(fieldNum: Spo2DataMesg.readingConfidenceFieldNum, value: value)
	}

	public func getMode() -> Spo2MeasurementType? {
		guard let value = getFieldValue(fieldNum: Spo2DataMesg.modeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return Spo2MeasurementType(rawValue: value) ?? .invalid
	}

	public func setMode(_ value: Spo2MeasurementType) throws {
		try setFieldValue(fieldNum: Spo2DataMesg.modeFieldNum, value: value.rawValue)
	}

	public class func createSpo2DataMesg() -> Spo2DataMesg {
        let mesg = Spo2DataMesg(name: "Spo2Data", num: Profile.MesgNum.spo2Data)
		
		mesg.fields[Spo2DataMesg.timestampFieldNum] = Field(name: "Timestamp", num: Spo2DataMesg.timestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
		mesg.fields[Spo2DataMesg.readingSpo2FieldNum] = Field(name: "ReadingSpo2", num: Spo2DataMesg.readingSpo2FieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "percent", accumulated: false)
		mesg.fields[Spo2DataMesg.readingConfidenceFieldNum] = Field(name: "ReadingConfidence", num: Spo2DataMesg.readingConfidenceFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[Spo2DataMesg.modeFieldNum] = Field(name: "Mode", num: Spo2DataMesg.modeFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
        return mesg
    }
}