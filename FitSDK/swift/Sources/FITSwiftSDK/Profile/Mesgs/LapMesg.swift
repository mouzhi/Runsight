/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class LapMesg : Mesg {
    public static let messageIndexFieldNum:UInt8 = 254
    public static let timestampFieldNum:UInt8 = 253
    public static let eventFieldNum:UInt8 = 0
    public static let eventTypeFieldNum:UInt8 = 1
    public static let startTimeFieldNum:UInt8 = 2
    public static let startPositionLatFieldNum:UInt8 = 3
    public static let startPositionLongFieldNum:UInt8 = 4
    public static let endPositionLatFieldNum:UInt8 = 5
    public static let endPositionLongFieldNum:UInt8 = 6
    public static let totalElapsedTimeFieldNum:UInt8 = 7
    public static let totalTimerTimeFieldNum:UInt8 = 8
    public static let totalDistanceFieldNum:UInt8 = 9
    public static let totalCyclesFieldNum:UInt8 = 10
    public static let totalCaloriesFieldNum:UInt8 = 11
    public static let totalFatCaloriesFieldNum:UInt8 = 12
    public static let avgSpeedFieldNum:UInt8 = 13
    public static let maxSpeedFieldNum:UInt8 = 14
    public static let avgHeartRateFieldNum:UInt8 = 15
    public static let maxHeartRateFieldNum:UInt8 = 16
    public static let avgCadenceFieldNum:UInt8 = 17
    public static let maxCadenceFieldNum:UInt8 = 18
    public static let avgPowerFieldNum:UInt8 = 19
    public static let maxPowerFieldNum:UInt8 = 20
    public static let totalAscentFieldNum:UInt8 = 21
    public static let totalDescentFieldNum:UInt8 = 22
    public static let intensityFieldNum:UInt8 = 23
    public static let lapTriggerFieldNum:UInt8 = 24
    public static let sportFieldNum:UInt8 = 25
    public static let eventGroupFieldNum:UInt8 = 26
    public static let numLengthsFieldNum:UInt8 = 32
    public static let normalizedPowerFieldNum:UInt8 = 33
    public static let leftRightBalanceFieldNum:UInt8 = 34
    public static let firstLengthIndexFieldNum:UInt8 = 35
    public static let avgStrokeDistanceFieldNum:UInt8 = 37
    public static let swimStrokeFieldNum:UInt8 = 38
    public static let subSportFieldNum:UInt8 = 39
    public static let numActiveLengthsFieldNum:UInt8 = 40
    public static let totalWorkFieldNum:UInt8 = 41
    public static let avgAltitudeFieldNum:UInt8 = 42
    public static let maxAltitudeFieldNum:UInt8 = 43
    public static let gpsAccuracyFieldNum:UInt8 = 44
    public static let avgGradeFieldNum:UInt8 = 45
    public static let avgPosGradeFieldNum:UInt8 = 46
    public static let avgNegGradeFieldNum:UInt8 = 47
    public static let maxPosGradeFieldNum:UInt8 = 48
    public static let maxNegGradeFieldNum:UInt8 = 49
    public static let avgTemperatureFieldNum:UInt8 = 50
    public static let maxTemperatureFieldNum:UInt8 = 51
    public static let totalMovingTimeFieldNum:UInt8 = 52
    public static let avgPosVerticalSpeedFieldNum:UInt8 = 53
    public static let avgNegVerticalSpeedFieldNum:UInt8 = 54
    public static let maxPosVerticalSpeedFieldNum:UInt8 = 55
    public static let maxNegVerticalSpeedFieldNum:UInt8 = 56
    public static let timeInHrZoneFieldNum:UInt8 = 57
    public static let timeInSpeedZoneFieldNum:UInt8 = 58
    public static let timeInCadenceZoneFieldNum:UInt8 = 59
    public static let timeInPowerZoneFieldNum:UInt8 = 60
    public static let repetitionNumFieldNum:UInt8 = 61
    public static let minAltitudeFieldNum:UInt8 = 62
    public static let minHeartRateFieldNum:UInt8 = 63
    public static let wktStepIndexFieldNum:UInt8 = 71
    public static let opponentScoreFieldNum:UInt8 = 74
    public static let strokeCountFieldNum:UInt8 = 75
    public static let zoneCountFieldNum:UInt8 = 76
    public static let avgVerticalOscillationFieldNum:UInt8 = 77
    public static let avgStanceTimePercentFieldNum:UInt8 = 78
    public static let avgStanceTimeFieldNum:UInt8 = 79
    public static let avgFractionalCadenceFieldNum:UInt8 = 80
    public static let maxFractionalCadenceFieldNum:UInt8 = 81
    public static let totalFractionalCyclesFieldNum:UInt8 = 82
    public static let playerScoreFieldNum:UInt8 = 83
    public static let avgTotalHemoglobinConcFieldNum:UInt8 = 84
    public static let minTotalHemoglobinConcFieldNum:UInt8 = 85
    public static let maxTotalHemoglobinConcFieldNum:UInt8 = 86
    public static let avgSaturatedHemoglobinPercentFieldNum:UInt8 = 87
    public static let minSaturatedHemoglobinPercentFieldNum:UInt8 = 88
    public static let maxSaturatedHemoglobinPercentFieldNum:UInt8 = 89
    public static let avgLeftTorqueEffectivenessFieldNum:UInt8 = 91
    public static let avgRightTorqueEffectivenessFieldNum:UInt8 = 92
    public static let avgLeftPedalSmoothnessFieldNum:UInt8 = 93
    public static let avgRightPedalSmoothnessFieldNum:UInt8 = 94
    public static let avgCombinedPedalSmoothnessFieldNum:UInt8 = 95
    public static let timeStandingFieldNum:UInt8 = 98
    public static let standCountFieldNum:UInt8 = 99
    public static let avgLeftPcoFieldNum:UInt8 = 100
    public static let avgRightPcoFieldNum:UInt8 = 101
    public static let avgLeftPowerPhaseFieldNum:UInt8 = 102
    public static let avgLeftPowerPhasePeakFieldNum:UInt8 = 103
    public static let avgRightPowerPhaseFieldNum:UInt8 = 104
    public static let avgRightPowerPhasePeakFieldNum:UInt8 = 105
    public static let avgPowerPositionFieldNum:UInt8 = 106
    public static let maxPowerPositionFieldNum:UInt8 = 107
    public static let avgCadencePositionFieldNum:UInt8 = 108
    public static let maxCadencePositionFieldNum:UInt8 = 109
    public static let enhancedAvgSpeedFieldNum:UInt8 = 110
    public static let enhancedMaxSpeedFieldNum:UInt8 = 111
    public static let enhancedAvgAltitudeFieldNum:UInt8 = 112
    public static let enhancedMinAltitudeFieldNum:UInt8 = 113
    public static let enhancedMaxAltitudeFieldNum:UInt8 = 114
    public static let avgLevMotorPowerFieldNum:UInt8 = 115
    public static let maxLevMotorPowerFieldNum:UInt8 = 116
    public static let levBatteryConsumptionFieldNum:UInt8 = 117
    public static let avgVerticalRatioFieldNum:UInt8 = 118
    public static let avgStanceTimeBalanceFieldNum:UInt8 = 119
    public static let avgStepLengthFieldNum:UInt8 = 120
    public static let avgVamFieldNum:UInt8 = 121
    public static let avgDepthFieldNum:UInt8 = 122
    public static let maxDepthFieldNum:UInt8 = 123
    public static let minTemperatureFieldNum:UInt8 = 124
    public static let enhancedAvgRespirationRateFieldNum:UInt8 = 136
    public static let enhancedMaxRespirationRateFieldNum:UInt8 = 137
    public static let avgRespirationRateFieldNum:UInt8 = 147
    public static let maxRespirationRateFieldNum:UInt8 = 148
    public static let totalGritFieldNum:UInt8 = 149
    public static let totalFlowFieldNum:UInt8 = 150
    public static let jumpCountFieldNum:UInt8 = 151
    public static let avgGritFieldNum:UInt8 = 153
    public static let avgFlowFieldNum:UInt8 = 154
    public static let totalFractionalAscentFieldNum:UInt8 = 156
    public static let totalFractionalDescentFieldNum:UInt8 = 157
    public static let avgCoreTemperatureFieldNum:UInt8 = 158
    public static let minCoreTemperatureFieldNum:UInt8 = 159
    public static let maxCoreTemperatureFieldNum:UInt8 = 160

	private struct TotalCyclesSubField {
        public static let totalStrides:UInt16 = 0
        public static let totalStrokes:UInt16 = 1
        public static let subfields:UInt16 = 2
        public static let active:UInt16 = FIT.SUBFIELD_INDEX.ACTIVE_SUBFIELD
        public static let mainField:UInt16 = FIT.SUBFIELD_INDEX.MAIN_FIELD
    }

	private struct AvgCadenceSubField {
        public static let avgRunningCadence:UInt16 = 0
        public static let subfields:UInt16 = 1
        public static let active:UInt16 = FIT.SUBFIELD_INDEX.ACTIVE_SUBFIELD
        public static let mainField:UInt16 = FIT.SUBFIELD_INDEX.MAIN_FIELD
    }

	private struct MaxCadenceSubField {
        public static let maxRunningCadence:UInt16 = 0
        public static let subfields:UInt16 = 1
        public static let active:UInt16 = FIT.SUBFIELD_INDEX.ACTIVE_SUBFIELD
        public static let mainField:UInt16 = FIT.SUBFIELD_INDEX.MAIN_FIELD
    }

	public init() {
        super.init(mesg: LapMesg.createLapMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getMessageIndex() -> MessageIndex? {
		guard let value = getFieldValue(fieldNum: LapMesg.messageIndexFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setMessageIndex(_ value: MessageIndex) throws {
		try setFieldValue(fieldNum: LapMesg.messageIndexFieldNum, value: value)
	}

	public func getTimestamp() -> DateTime? {
		guard let value = getFieldValue(fieldNum: LapMesg.timestampFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setTimestamp(_ value: DateTime) throws {
		try setFieldValue(fieldNum: LapMesg.timestampFieldNum, value: value.timestamp)
	}

	public func getEvent() -> Event? {
		guard let value = getFieldValue(fieldNum: LapMesg.eventFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return Event(rawValue: value) ?? .invalid
	}

	public func setEvent(_ value: Event) throws {
		try setFieldValue(fieldNum: LapMesg.eventFieldNum, value: value.rawValue)
	}

	public func getEventType() -> EventType? {
		guard let value = getFieldValue(fieldNum: LapMesg.eventTypeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return EventType(rawValue: value) ?? .invalid
	}

	public func setEventType(_ value: EventType) throws {
		try setFieldValue(fieldNum: LapMesg.eventTypeFieldNum, value: value.rawValue)
	}

	public func getStartTime() -> DateTime? {
		guard let value = getFieldValue(fieldNum: LapMesg.startTimeFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setStartTime(_ value: DateTime) throws {
		try setFieldValue(fieldNum: LapMesg.startTimeFieldNum, value: value.timestamp)
	}

	public func getStartPositionLat() -> Int32? {
		guard let value = getFieldValue(fieldNum: LapMesg.startPositionLatFieldNum, index:0) as? Int32 else {
            return nil
        }
		return value
	}

	public func setStartPositionLat(_ value: Int32) throws {
		try setFieldValue(fieldNum: LapMesg.startPositionLatFieldNum, value: value)
	}

	public func getStartPositionLong() -> Int32? {
		guard let value = getFieldValue(fieldNum: LapMesg.startPositionLongFieldNum, index:0) as? Int32 else {
            return nil
        }
		return value
	}

	public func setStartPositionLong(_ value: Int32) throws {
		try setFieldValue(fieldNum: LapMesg.startPositionLongFieldNum, value: value)
	}

	public func getEndPositionLat() -> Int32? {
		guard let value = getFieldValue(fieldNum: LapMesg.endPositionLatFieldNum, index:0) as? Int32 else {
            return nil
        }
		return value
	}

	public func setEndPositionLat(_ value: Int32) throws {
		try setFieldValue(fieldNum: LapMesg.endPositionLatFieldNum, value: value)
	}

	public func getEndPositionLong() -> Int32? {
		guard let value = getFieldValue(fieldNum: LapMesg.endPositionLongFieldNum, index:0) as? Int32 else {
            return nil
        }
		return value
	}

	public func setEndPositionLong(_ value: Int32) throws {
		try setFieldValue(fieldNum: LapMesg.endPositionLongFieldNum, value: value)
	}

	public func getTotalElapsedTime() -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.totalElapsedTimeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTotalElapsedTime(_ value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.totalElapsedTimeFieldNum, value: value)
	}

	public func getTotalTimerTime() -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.totalTimerTimeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTotalTimerTime(_ value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.totalTimerTimeFieldNum, value: value)
	}

	public func getTotalDistance() -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.totalDistanceFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTotalDistance(_ value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.totalDistanceFieldNum, value: value)
	}

	public func getTotalCycles() -> UInt32? {
		guard let value = getFieldValue(fieldNum: LapMesg.totalCyclesFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setTotalCycles(_ value: UInt32) throws {
		try setFieldValue(fieldNum: LapMesg.totalCyclesFieldNum, value: value)
	}

	public func getTotalStrides() throws -> UInt32? {
		guard let value = try getFieldValue(fieldNum: LapMesg.totalCyclesFieldNum, index: 0, subFieldIndex: TotalCyclesSubField.totalStrides).map({UInt32(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setTotalStrides(_ value: UInt32) throws {
		try setFieldValue(fieldNum: LapMesg.totalCyclesFieldNum, value: value, index: 0, subFieldIndex: TotalCyclesSubField.totalStrides )
	}

	public func getTotalStrokes() throws -> UInt32? {
		guard let value = try getFieldValue(fieldNum: LapMesg.totalCyclesFieldNum, index: 0, subFieldIndex: TotalCyclesSubField.totalStrokes).map({UInt32(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setTotalStrokes(_ value: UInt32) throws {
		try setFieldValue(fieldNum: LapMesg.totalCyclesFieldNum, value: value, index: 0, subFieldIndex: TotalCyclesSubField.totalStrokes )
	}

	public func getTotalCalories() -> UInt16? {
		guard let value = getFieldValue(fieldNum: LapMesg.totalCaloriesFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setTotalCalories(_ value: UInt16) throws {
		try setFieldValue(fieldNum: LapMesg.totalCaloriesFieldNum, value: value)
	}

	public func getTotalFatCalories() -> UInt16? {
		guard let value = getFieldValue(fieldNum: LapMesg.totalFatCaloriesFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setTotalFatCalories(_ value: UInt16) throws {
		try setFieldValue(fieldNum: LapMesg.totalFatCaloriesFieldNum, value: value)
	}

	public func getAvgSpeed() -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.avgSpeedFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgSpeed(_ value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.avgSpeedFieldNum, value: value)
	}

	public func getMaxSpeed() -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.maxSpeedFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setMaxSpeed(_ value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.maxSpeedFieldNum, value: value)
	}

	public func getAvgHeartRate() -> UInt8? {
		guard let value = getFieldValue(fieldNum: LapMesg.avgHeartRateFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setAvgHeartRate(_ value: UInt8) throws {
		try setFieldValue(fieldNum: LapMesg.avgHeartRateFieldNum, value: value)
	}

	public func getMaxHeartRate() -> UInt8? {
		guard let value = getFieldValue(fieldNum: LapMesg.maxHeartRateFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setMaxHeartRate(_ value: UInt8) throws {
		try setFieldValue(fieldNum: LapMesg.maxHeartRateFieldNum, value: value)
	}

	public func getAvgCadence() -> UInt8? {
		guard let value = getFieldValue(fieldNum: LapMesg.avgCadenceFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setAvgCadence(_ value: UInt8) throws {
		try setFieldValue(fieldNum: LapMesg.avgCadenceFieldNum, value: value)
	}

	public func getAvgRunningCadence() throws -> UInt8? {
		guard let value = try getFieldValue(fieldNum: LapMesg.avgCadenceFieldNum, index: 0, subFieldIndex: AvgCadenceSubField.avgRunningCadence).map({UInt8(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setAvgRunningCadence(_ value: UInt8) throws {
		try setFieldValue(fieldNum: LapMesg.avgCadenceFieldNum, value: value, index: 0, subFieldIndex: AvgCadenceSubField.avgRunningCadence )
	}

	public func getMaxCadence() -> UInt8? {
		guard let value = getFieldValue(fieldNum: LapMesg.maxCadenceFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setMaxCadence(_ value: UInt8) throws {
		try setFieldValue(fieldNum: LapMesg.maxCadenceFieldNum, value: value)
	}

	public func getMaxRunningCadence() throws -> UInt8? {
		guard let value = try getFieldValue(fieldNum: LapMesg.maxCadenceFieldNum, index: 0, subFieldIndex: MaxCadenceSubField.maxRunningCadence).map({UInt8(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setMaxRunningCadence(_ value: UInt8) throws {
		try setFieldValue(fieldNum: LapMesg.maxCadenceFieldNum, value: value, index: 0, subFieldIndex: MaxCadenceSubField.maxRunningCadence )
	}

	public func getAvgPower() -> UInt16? {
		guard let value = getFieldValue(fieldNum: LapMesg.avgPowerFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setAvgPower(_ value: UInt16) throws {
		try setFieldValue(fieldNum: LapMesg.avgPowerFieldNum, value: value)
	}

	public func getMaxPower() -> UInt16? {
		guard let value = getFieldValue(fieldNum: LapMesg.maxPowerFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setMaxPower(_ value: UInt16) throws {
		try setFieldValue(fieldNum: LapMesg.maxPowerFieldNum, value: value)
	}

	public func getTotalAscent() -> UInt16? {
		guard let value = getFieldValue(fieldNum: LapMesg.totalAscentFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setTotalAscent(_ value: UInt16) throws {
		try setFieldValue(fieldNum: LapMesg.totalAscentFieldNum, value: value)
	}

	public func getTotalDescent() -> UInt16? {
		guard let value = getFieldValue(fieldNum: LapMesg.totalDescentFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setTotalDescent(_ value: UInt16) throws {
		try setFieldValue(fieldNum: LapMesg.totalDescentFieldNum, value: value)
	}

	public func getIntensity() -> Intensity? {
		guard let value = getFieldValue(fieldNum: LapMesg.intensityFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return Intensity(rawValue: value) ?? .invalid
	}

	public func setIntensity(_ value: Intensity) throws {
		try setFieldValue(fieldNum: LapMesg.intensityFieldNum, value: value.rawValue)
	}

	public func getLapTrigger() -> LapTrigger? {
		guard let value = getFieldValue(fieldNum: LapMesg.lapTriggerFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return LapTrigger(rawValue: value) ?? .invalid
	}

	public func setLapTrigger(_ value: LapTrigger) throws {
		try setFieldValue(fieldNum: LapMesg.lapTriggerFieldNum, value: value.rawValue)
	}

	public func getSport() -> Sport? {
		guard let value = getFieldValue(fieldNum: LapMesg.sportFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return Sport(rawValue: value) ?? .invalid
	}

	public func setSport(_ value: Sport) throws {
		try setFieldValue(fieldNum: LapMesg.sportFieldNum, value: value.rawValue)
	}

	public func getEventGroup() -> UInt8? {
		guard let value = getFieldValue(fieldNum: LapMesg.eventGroupFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setEventGroup(_ value: UInt8) throws {
		try setFieldValue(fieldNum: LapMesg.eventGroupFieldNum, value: value)
	}

	public func getNumLengths() -> UInt16? {
		guard let value = getFieldValue(fieldNum: LapMesg.numLengthsFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setNumLengths(_ value: UInt16) throws {
		try setFieldValue(fieldNum: LapMesg.numLengthsFieldNum, value: value)
	}

	public func getNormalizedPower() -> UInt16? {
		guard let value = getFieldValue(fieldNum: LapMesg.normalizedPowerFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setNormalizedPower(_ value: UInt16) throws {
		try setFieldValue(fieldNum: LapMesg.normalizedPowerFieldNum, value: value)
	}

	public func getLeftRightBalance() -> LeftRightBalance100? {
		guard let value = getFieldValue(fieldNum: LapMesg.leftRightBalanceFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return LeftRightBalance100(rawValue: value) ?? .invalid
	}

	public func setLeftRightBalance(_ value: LeftRightBalance100) throws {
		try setFieldValue(fieldNum: LapMesg.leftRightBalanceFieldNum, value: value.rawValue)
	}

	public func getFirstLengthIndex() -> UInt16? {
		guard let value = getFieldValue(fieldNum: LapMesg.firstLengthIndexFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setFirstLengthIndex(_ value: UInt16) throws {
		try setFieldValue(fieldNum: LapMesg.firstLengthIndexFieldNum, value: value)
	}

	public func getAvgStrokeDistance() -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.avgStrokeDistanceFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgStrokeDistance(_ value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.avgStrokeDistanceFieldNum, value: value)
	}

	public func getSwimStroke() -> SwimStroke? {
		guard let value = getFieldValue(fieldNum: LapMesg.swimStrokeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return SwimStroke(rawValue: value) ?? .invalid
	}

	public func setSwimStroke(_ value: SwimStroke) throws {
		try setFieldValue(fieldNum: LapMesg.swimStrokeFieldNum, value: value.rawValue)
	}

	public func getSubSport() -> SubSport? {
		guard let value = getFieldValue(fieldNum: LapMesg.subSportFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return SubSport(rawValue: value) ?? .invalid
	}

	public func setSubSport(_ value: SubSport) throws {
		try setFieldValue(fieldNum: LapMesg.subSportFieldNum, value: value.rawValue)
	}

	public func getNumActiveLengths() -> UInt16? {
		guard let value = getFieldValue(fieldNum: LapMesg.numActiveLengthsFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setNumActiveLengths(_ value: UInt16) throws {
		try setFieldValue(fieldNum: LapMesg.numActiveLengthsFieldNum, value: value)
	}

	public func getTotalWork() -> UInt32? {
		guard let value = getFieldValue(fieldNum: LapMesg.totalWorkFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setTotalWork(_ value: UInt32) throws {
		try setFieldValue(fieldNum: LapMesg.totalWorkFieldNum, value: value)
	}

	public func getAvgAltitude() -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.avgAltitudeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgAltitude(_ value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.avgAltitudeFieldNum, value: value)
	}

	public func getMaxAltitude() -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.maxAltitudeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setMaxAltitude(_ value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.maxAltitudeFieldNum, value: value)
	}

	public func getGpsAccuracy() -> UInt8? {
		guard let value = getFieldValue(fieldNum: LapMesg.gpsAccuracyFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setGpsAccuracy(_ value: UInt8) throws {
		try setFieldValue(fieldNum: LapMesg.gpsAccuracyFieldNum, value: value)
	}

	public func getAvgGrade() -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.avgGradeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgGrade(_ value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.avgGradeFieldNum, value: value)
	}

	public func getAvgPosGrade() -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.avgPosGradeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgPosGrade(_ value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.avgPosGradeFieldNum, value: value)
	}

	public func getAvgNegGrade() -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.avgNegGradeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgNegGrade(_ value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.avgNegGradeFieldNum, value: value)
	}

	public func getMaxPosGrade() -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.maxPosGradeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setMaxPosGrade(_ value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.maxPosGradeFieldNum, value: value)
	}

	public func getMaxNegGrade() -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.maxNegGradeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setMaxNegGrade(_ value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.maxNegGradeFieldNum, value: value)
	}

	public func getAvgTemperature() -> Int8? {
		guard let value = getFieldValue(fieldNum: LapMesg.avgTemperatureFieldNum, index:0) as? Int8 else {
            return nil
        }
		return value
	}

	public func setAvgTemperature(_ value: Int8) throws {
		try setFieldValue(fieldNum: LapMesg.avgTemperatureFieldNum, value: value)
	}

	public func getMaxTemperature() -> Int8? {
		guard let value = getFieldValue(fieldNum: LapMesg.maxTemperatureFieldNum, index:0) as? Int8 else {
            return nil
        }
		return value
	}

	public func setMaxTemperature(_ value: Int8) throws {
		try setFieldValue(fieldNum: LapMesg.maxTemperatureFieldNum, value: value)
	}

	public func getTotalMovingTime() -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.totalMovingTimeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTotalMovingTime(_ value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.totalMovingTimeFieldNum, value: value)
	}

	public func getAvgPosVerticalSpeed() -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.avgPosVerticalSpeedFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgPosVerticalSpeed(_ value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.avgPosVerticalSpeedFieldNum, value: value)
	}

	public func getAvgNegVerticalSpeed() -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.avgNegVerticalSpeedFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgNegVerticalSpeed(_ value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.avgNegVerticalSpeedFieldNum, value: value)
	}

	public func getMaxPosVerticalSpeed() -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.maxPosVerticalSpeedFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setMaxPosVerticalSpeed(_ value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.maxPosVerticalSpeedFieldNum, value: value)
	}

	public func getMaxNegVerticalSpeed() -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.maxNegVerticalSpeedFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setMaxNegVerticalSpeed(_ value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.maxNegVerticalSpeedFieldNum, value: value)
	}

	public func getNumTimeInHrZone() -> UInt8 {
		guard let field = getField(fieldNum: LapMesg.timeInHrZoneFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getTimeInHrZone() -> [Float64?]? {
		guard let field = getField(fieldNum: LapMesg.timeInHrZoneFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getTimeInHrZone(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.timeInHrZoneFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTimeInHrZone(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.timeInHrZoneFieldNum, value: value, index: index)
	}

	public func getNumTimeInSpeedZone() -> UInt8 {
		guard let field = getField(fieldNum: LapMesg.timeInSpeedZoneFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getTimeInSpeedZone() -> [Float64?]? {
		guard let field = getField(fieldNum: LapMesg.timeInSpeedZoneFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getTimeInSpeedZone(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.timeInSpeedZoneFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTimeInSpeedZone(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.timeInSpeedZoneFieldNum, value: value, index: index)
	}

	public func getNumTimeInCadenceZone() -> UInt8 {
		guard let field = getField(fieldNum: LapMesg.timeInCadenceZoneFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getTimeInCadenceZone() -> [Float64?]? {
		guard let field = getField(fieldNum: LapMesg.timeInCadenceZoneFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getTimeInCadenceZone(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.timeInCadenceZoneFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTimeInCadenceZone(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.timeInCadenceZoneFieldNum, value: value, index: index)
	}

	public func getNumTimeInPowerZone() -> UInt8 {
		guard let field = getField(fieldNum: LapMesg.timeInPowerZoneFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getTimeInPowerZone() -> [Float64?]? {
		guard let field = getField(fieldNum: LapMesg.timeInPowerZoneFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getTimeInPowerZone(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.timeInPowerZoneFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTimeInPowerZone(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.timeInPowerZoneFieldNum, value: value, index: index)
	}

	public func getRepetitionNum() -> UInt16? {
		guard let value = getFieldValue(fieldNum: LapMesg.repetitionNumFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setRepetitionNum(_ value: UInt16) throws {
		try setFieldValue(fieldNum: LapMesg.repetitionNumFieldNum, value: value)
	}

	public func getMinAltitude() -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.minAltitudeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setMinAltitude(_ value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.minAltitudeFieldNum, value: value)
	}

	public func getMinHeartRate() -> UInt8? {
		guard let value = getFieldValue(fieldNum: LapMesg.minHeartRateFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setMinHeartRate(_ value: UInt8) throws {
		try setFieldValue(fieldNum: LapMesg.minHeartRateFieldNum, value: value)
	}

	public func getWktStepIndex() -> MessageIndex? {
		guard let value = getFieldValue(fieldNum: LapMesg.wktStepIndexFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setWktStepIndex(_ value: MessageIndex) throws {
		try setFieldValue(fieldNum: LapMesg.wktStepIndexFieldNum, value: value)
	}

	public func getOpponentScore() -> UInt16? {
		guard let value = getFieldValue(fieldNum: LapMesg.opponentScoreFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setOpponentScore(_ value: UInt16) throws {
		try setFieldValue(fieldNum: LapMesg.opponentScoreFieldNum, value: value)
	}

	public func getNumStrokeCount() -> UInt8 {
		guard let field = getField(fieldNum: LapMesg.strokeCountFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getStrokeCount() -> [UInt16?]? {
		guard let field = getField(fieldNum: LapMesg.strokeCountFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt16?]
	}

	public func getStrokeCount(index: Int) -> UInt16? {
		guard let value = getFieldValue(fieldNum: LapMesg.strokeCountFieldNum, index: index) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setStrokeCount(index: Int, value: UInt16) throws {
		try setFieldValue(fieldNum: LapMesg.strokeCountFieldNum, value: value, index: index)
	}

	public func getNumZoneCount() -> UInt8 {
		guard let field = getField(fieldNum: LapMesg.zoneCountFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getZoneCount() -> [UInt16?]? {
		guard let field = getField(fieldNum: LapMesg.zoneCountFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt16?]
	}

	public func getZoneCount(index: Int) -> UInt16? {
		guard let value = getFieldValue(fieldNum: LapMesg.zoneCountFieldNum, index: index) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setZoneCount(index: Int, value: UInt16) throws {
		try setFieldValue(fieldNum: LapMesg.zoneCountFieldNum, value: value, index: index)
	}

	public func getAvgVerticalOscillation() -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.avgVerticalOscillationFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgVerticalOscillation(_ value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.avgVerticalOscillationFieldNum, value: value)
	}

	public func getAvgStanceTimePercent() -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.avgStanceTimePercentFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgStanceTimePercent(_ value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.avgStanceTimePercentFieldNum, value: value)
	}

	public func getAvgStanceTime() -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.avgStanceTimeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgStanceTime(_ value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.avgStanceTimeFieldNum, value: value)
	}

	public func getAvgFractionalCadence() -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.avgFractionalCadenceFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgFractionalCadence(_ value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.avgFractionalCadenceFieldNum, value: value)
	}

	public func getMaxFractionalCadence() -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.maxFractionalCadenceFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setMaxFractionalCadence(_ value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.maxFractionalCadenceFieldNum, value: value)
	}

	public func getTotalFractionalCycles() -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.totalFractionalCyclesFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTotalFractionalCycles(_ value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.totalFractionalCyclesFieldNum, value: value)
	}

	public func getPlayerScore() -> UInt16? {
		guard let value = getFieldValue(fieldNum: LapMesg.playerScoreFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setPlayerScore(_ value: UInt16) throws {
		try setFieldValue(fieldNum: LapMesg.playerScoreFieldNum, value: value)
	}

	public func getNumAvgTotalHemoglobinConc() -> UInt8 {
		guard let field = getField(fieldNum: LapMesg.avgTotalHemoglobinConcFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getAvgTotalHemoglobinConc() -> [Float64?]? {
		guard let field = getField(fieldNum: LapMesg.avgTotalHemoglobinConcFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getAvgTotalHemoglobinConc(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.avgTotalHemoglobinConcFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgTotalHemoglobinConc(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.avgTotalHemoglobinConcFieldNum, value: value, index: index)
	}

	public func getNumMinTotalHemoglobinConc() -> UInt8 {
		guard let field = getField(fieldNum: LapMesg.minTotalHemoglobinConcFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getMinTotalHemoglobinConc() -> [Float64?]? {
		guard let field = getField(fieldNum: LapMesg.minTotalHemoglobinConcFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getMinTotalHemoglobinConc(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.minTotalHemoglobinConcFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setMinTotalHemoglobinConc(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.minTotalHemoglobinConcFieldNum, value: value, index: index)
	}

	public func getNumMaxTotalHemoglobinConc() -> UInt8 {
		guard let field = getField(fieldNum: LapMesg.maxTotalHemoglobinConcFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getMaxTotalHemoglobinConc() -> [Float64?]? {
		guard let field = getField(fieldNum: LapMesg.maxTotalHemoglobinConcFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getMaxTotalHemoglobinConc(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.maxTotalHemoglobinConcFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setMaxTotalHemoglobinConc(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.maxTotalHemoglobinConcFieldNum, value: value, index: index)
	}

	public func getNumAvgSaturatedHemoglobinPercent() -> UInt8 {
		guard let field = getField(fieldNum: LapMesg.avgSaturatedHemoglobinPercentFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getAvgSaturatedHemoglobinPercent() -> [Float64?]? {
		guard let field = getField(fieldNum: LapMesg.avgSaturatedHemoglobinPercentFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getAvgSaturatedHemoglobinPercent(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.avgSaturatedHemoglobinPercentFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgSaturatedHemoglobinPercent(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.avgSaturatedHemoglobinPercentFieldNum, value: value, index: index)
	}

	public func getNumMinSaturatedHemoglobinPercent() -> UInt8 {
		guard let field = getField(fieldNum: LapMesg.minSaturatedHemoglobinPercentFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getMinSaturatedHemoglobinPercent() -> [Float64?]? {
		guard let field = getField(fieldNum: LapMesg.minSaturatedHemoglobinPercentFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getMinSaturatedHemoglobinPercent(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.minSaturatedHemoglobinPercentFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setMinSaturatedHemoglobinPercent(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.minSaturatedHemoglobinPercentFieldNum, value: value, index: index)
	}

	public func getNumMaxSaturatedHemoglobinPercent() -> UInt8 {
		guard let field = getField(fieldNum: LapMesg.maxSaturatedHemoglobinPercentFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getMaxSaturatedHemoglobinPercent() -> [Float64?]? {
		guard let field = getField(fieldNum: LapMesg.maxSaturatedHemoglobinPercentFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getMaxSaturatedHemoglobinPercent(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.maxSaturatedHemoglobinPercentFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setMaxSaturatedHemoglobinPercent(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.maxSaturatedHemoglobinPercentFieldNum, value: value, index: index)
	}

	public func getAvgLeftTorqueEffectiveness() -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.avgLeftTorqueEffectivenessFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgLeftTorqueEffectiveness(_ value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.avgLeftTorqueEffectivenessFieldNum, value: value)
	}

	public func getAvgRightTorqueEffectiveness() -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.avgRightTorqueEffectivenessFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgRightTorqueEffectiveness(_ value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.avgRightTorqueEffectivenessFieldNum, value: value)
	}

	public func getAvgLeftPedalSmoothness() -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.avgLeftPedalSmoothnessFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgLeftPedalSmoothness(_ value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.avgLeftPedalSmoothnessFieldNum, value: value)
	}

	public func getAvgRightPedalSmoothness() -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.avgRightPedalSmoothnessFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgRightPedalSmoothness(_ value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.avgRightPedalSmoothnessFieldNum, value: value)
	}

	public func getAvgCombinedPedalSmoothness() -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.avgCombinedPedalSmoothnessFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgCombinedPedalSmoothness(_ value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.avgCombinedPedalSmoothnessFieldNum, value: value)
	}

	public func getTimeStanding() -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.timeStandingFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTimeStanding(_ value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.timeStandingFieldNum, value: value)
	}

	public func getStandCount() -> UInt16? {
		guard let value = getFieldValue(fieldNum: LapMesg.standCountFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setStandCount(_ value: UInt16) throws {
		try setFieldValue(fieldNum: LapMesg.standCountFieldNum, value: value)
	}

	public func getAvgLeftPco() -> Int8? {
		guard let value = getFieldValue(fieldNum: LapMesg.avgLeftPcoFieldNum, index:0) as? Int8 else {
            return nil
        }
		return value
	}

	public func setAvgLeftPco(_ value: Int8) throws {
		try setFieldValue(fieldNum: LapMesg.avgLeftPcoFieldNum, value: value)
	}

	public func getAvgRightPco() -> Int8? {
		guard let value = getFieldValue(fieldNum: LapMesg.avgRightPcoFieldNum, index:0) as? Int8 else {
            return nil
        }
		return value
	}

	public func setAvgRightPco(_ value: Int8) throws {
		try setFieldValue(fieldNum: LapMesg.avgRightPcoFieldNum, value: value)
	}

	public func getNumAvgLeftPowerPhase() -> UInt8 {
		guard let field = getField(fieldNum: LapMesg.avgLeftPowerPhaseFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getAvgLeftPowerPhase() -> [Float64?]? {
		guard let field = getField(fieldNum: LapMesg.avgLeftPowerPhaseFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getAvgLeftPowerPhase(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.avgLeftPowerPhaseFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgLeftPowerPhase(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.avgLeftPowerPhaseFieldNum, value: value, index: index)
	}

	public func getNumAvgLeftPowerPhasePeak() -> UInt8 {
		guard let field = getField(fieldNum: LapMesg.avgLeftPowerPhasePeakFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getAvgLeftPowerPhasePeak() -> [Float64?]? {
		guard let field = getField(fieldNum: LapMesg.avgLeftPowerPhasePeakFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getAvgLeftPowerPhasePeak(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.avgLeftPowerPhasePeakFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgLeftPowerPhasePeak(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.avgLeftPowerPhasePeakFieldNum, value: value, index: index)
	}

	public func getNumAvgRightPowerPhase() -> UInt8 {
		guard let field = getField(fieldNum: LapMesg.avgRightPowerPhaseFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getAvgRightPowerPhase() -> [Float64?]? {
		guard let field = getField(fieldNum: LapMesg.avgRightPowerPhaseFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getAvgRightPowerPhase(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.avgRightPowerPhaseFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgRightPowerPhase(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.avgRightPowerPhaseFieldNum, value: value, index: index)
	}

	public func getNumAvgRightPowerPhasePeak() -> UInt8 {
		guard let field = getField(fieldNum: LapMesg.avgRightPowerPhasePeakFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getAvgRightPowerPhasePeak() -> [Float64?]? {
		guard let field = getField(fieldNum: LapMesg.avgRightPowerPhasePeakFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getAvgRightPowerPhasePeak(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.avgRightPowerPhasePeakFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgRightPowerPhasePeak(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.avgRightPowerPhasePeakFieldNum, value: value, index: index)
	}

	public func getNumAvgPowerPosition() -> UInt8 {
		guard let field = getField(fieldNum: LapMesg.avgPowerPositionFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getAvgPowerPosition() -> [UInt16?]? {
		guard let field = getField(fieldNum: LapMesg.avgPowerPositionFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt16?]
	}

	public func getAvgPowerPosition(index: Int) -> UInt16? {
		guard let value = getFieldValue(fieldNum: LapMesg.avgPowerPositionFieldNum, index: index) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setAvgPowerPosition(index: Int, value: UInt16) throws {
		try setFieldValue(fieldNum: LapMesg.avgPowerPositionFieldNum, value: value, index: index)
	}

	public func getNumMaxPowerPosition() -> UInt8 {
		guard let field = getField(fieldNum: LapMesg.maxPowerPositionFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getMaxPowerPosition() -> [UInt16?]? {
		guard let field = getField(fieldNum: LapMesg.maxPowerPositionFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt16?]
	}

	public func getMaxPowerPosition(index: Int) -> UInt16? {
		guard let value = getFieldValue(fieldNum: LapMesg.maxPowerPositionFieldNum, index: index) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setMaxPowerPosition(index: Int, value: UInt16) throws {
		try setFieldValue(fieldNum: LapMesg.maxPowerPositionFieldNum, value: value, index: index)
	}

	public func getNumAvgCadencePosition() -> UInt8 {
		guard let field = getField(fieldNum: LapMesg.avgCadencePositionFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getAvgCadencePosition() -> [UInt8?]? {
		guard let field = getField(fieldNum: LapMesg.avgCadencePositionFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt8?]
	}

	public func getAvgCadencePosition(index: Int) -> UInt8? {
		guard let value = getFieldValue(fieldNum: LapMesg.avgCadencePositionFieldNum, index: index) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setAvgCadencePosition(index: Int, value: UInt8) throws {
		try setFieldValue(fieldNum: LapMesg.avgCadencePositionFieldNum, value: value, index: index)
	}

	public func getNumMaxCadencePosition() -> UInt8 {
		guard let field = getField(fieldNum: LapMesg.maxCadencePositionFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getMaxCadencePosition() -> [UInt8?]? {
		guard let field = getField(fieldNum: LapMesg.maxCadencePositionFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt8?]
	}

	public func getMaxCadencePosition(index: Int) -> UInt8? {
		guard let value = getFieldValue(fieldNum: LapMesg.maxCadencePositionFieldNum, index: index) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setMaxCadencePosition(index: Int, value: UInt8) throws {
		try setFieldValue(fieldNum: LapMesg.maxCadencePositionFieldNum, value: value, index: index)
	}

	public func getEnhancedAvgSpeed() -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.enhancedAvgSpeedFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setEnhancedAvgSpeed(_ value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.enhancedAvgSpeedFieldNum, value: value)
	}

	public func getEnhancedMaxSpeed() -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.enhancedMaxSpeedFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setEnhancedMaxSpeed(_ value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.enhancedMaxSpeedFieldNum, value: value)
	}

	public func getEnhancedAvgAltitude() -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.enhancedAvgAltitudeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setEnhancedAvgAltitude(_ value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.enhancedAvgAltitudeFieldNum, value: value)
	}

	public func getEnhancedMinAltitude() -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.enhancedMinAltitudeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setEnhancedMinAltitude(_ value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.enhancedMinAltitudeFieldNum, value: value)
	}

	public func getEnhancedMaxAltitude() -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.enhancedMaxAltitudeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setEnhancedMaxAltitude(_ value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.enhancedMaxAltitudeFieldNum, value: value)
	}

	public func getAvgLevMotorPower() -> UInt16? {
		guard let value = getFieldValue(fieldNum: LapMesg.avgLevMotorPowerFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setAvgLevMotorPower(_ value: UInt16) throws {
		try setFieldValue(fieldNum: LapMesg.avgLevMotorPowerFieldNum, value: value)
	}

	public func getMaxLevMotorPower() -> UInt16? {
		guard let value = getFieldValue(fieldNum: LapMesg.maxLevMotorPowerFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setMaxLevMotorPower(_ value: UInt16) throws {
		try setFieldValue(fieldNum: LapMesg.maxLevMotorPowerFieldNum, value: value)
	}

	public func getLevBatteryConsumption() -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.levBatteryConsumptionFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setLevBatteryConsumption(_ value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.levBatteryConsumptionFieldNum, value: value)
	}

	public func getAvgVerticalRatio() -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.avgVerticalRatioFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgVerticalRatio(_ value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.avgVerticalRatioFieldNum, value: value)
	}

	public func getAvgStanceTimeBalance() -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.avgStanceTimeBalanceFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgStanceTimeBalance(_ value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.avgStanceTimeBalanceFieldNum, value: value)
	}

	public func getAvgStepLength() -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.avgStepLengthFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgStepLength(_ value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.avgStepLengthFieldNum, value: value)
	}

	public func getAvgVam() -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.avgVamFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgVam(_ value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.avgVamFieldNum, value: value)
	}

	public func getAvgDepth() -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.avgDepthFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgDepth(_ value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.avgDepthFieldNum, value: value)
	}

	public func getMaxDepth() -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.maxDepthFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setMaxDepth(_ value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.maxDepthFieldNum, value: value)
	}

	public func getMinTemperature() -> Int8? {
		guard let value = getFieldValue(fieldNum: LapMesg.minTemperatureFieldNum, index:0) as? Int8 else {
            return nil
        }
		return value
	}

	public func setMinTemperature(_ value: Int8) throws {
		try setFieldValue(fieldNum: LapMesg.minTemperatureFieldNum, value: value)
	}

	public func getEnhancedAvgRespirationRate() -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.enhancedAvgRespirationRateFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setEnhancedAvgRespirationRate(_ value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.enhancedAvgRespirationRateFieldNum, value: value)
	}

	public func getEnhancedMaxRespirationRate() -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.enhancedMaxRespirationRateFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setEnhancedMaxRespirationRate(_ value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.enhancedMaxRespirationRateFieldNum, value: value)
	}

	public func getAvgRespirationRate() -> UInt8? {
		guard let value = getFieldValue(fieldNum: LapMesg.avgRespirationRateFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setAvgRespirationRate(_ value: UInt8) throws {
		try setFieldValue(fieldNum: LapMesg.avgRespirationRateFieldNum, value: value)
	}

	public func getMaxRespirationRate() -> UInt8? {
		guard let value = getFieldValue(fieldNum: LapMesg.maxRespirationRateFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setMaxRespirationRate(_ value: UInt8) throws {
		try setFieldValue(fieldNum: LapMesg.maxRespirationRateFieldNum, value: value)
	}

	public func getTotalGrit() -> Float32? {
		guard let value = getFieldValue(fieldNum: LapMesg.totalGritFieldNum, index:0) as? Float32 else {
            return nil
        }
		return value
	}

	public func setTotalGrit(_ value: Float32) throws {
		try setFieldValue(fieldNum: LapMesg.totalGritFieldNum, value: value)
	}

	public func getTotalFlow() -> Float32? {
		guard let value = getFieldValue(fieldNum: LapMesg.totalFlowFieldNum, index:0) as? Float32 else {
            return nil
        }
		return value
	}

	public func setTotalFlow(_ value: Float32) throws {
		try setFieldValue(fieldNum: LapMesg.totalFlowFieldNum, value: value)
	}

	public func getJumpCount() -> UInt16? {
		guard let value = getFieldValue(fieldNum: LapMesg.jumpCountFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setJumpCount(_ value: UInt16) throws {
		try setFieldValue(fieldNum: LapMesg.jumpCountFieldNum, value: value)
	}

	public func getAvgGrit() -> Float32? {
		guard let value = getFieldValue(fieldNum: LapMesg.avgGritFieldNum, index:0) as? Float32 else {
            return nil
        }
		return value
	}

	public func setAvgGrit(_ value: Float32) throws {
		try setFieldValue(fieldNum: LapMesg.avgGritFieldNum, value: value)
	}

	public func getAvgFlow() -> Float32? {
		guard let value = getFieldValue(fieldNum: LapMesg.avgFlowFieldNum, index:0) as? Float32 else {
            return nil
        }
		return value
	}

	public func setAvgFlow(_ value: Float32) throws {
		try setFieldValue(fieldNum: LapMesg.avgFlowFieldNum, value: value)
	}

	public func getTotalFractionalAscent() -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.totalFractionalAscentFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTotalFractionalAscent(_ value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.totalFractionalAscentFieldNum, value: value)
	}

	public func getTotalFractionalDescent() -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.totalFractionalDescentFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTotalFractionalDescent(_ value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.totalFractionalDescentFieldNum, value: value)
	}

	public func getAvgCoreTemperature() -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.avgCoreTemperatureFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgCoreTemperature(_ value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.avgCoreTemperatureFieldNum, value: value)
	}

	public func getMinCoreTemperature() -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.minCoreTemperatureFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setMinCoreTemperature(_ value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.minCoreTemperatureFieldNum, value: value)
	}

	public func getMaxCoreTemperature() -> Float64? {
		guard let value = getFieldValue(fieldNum: LapMesg.maxCoreTemperatureFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setMaxCoreTemperature(_ value: Float64) throws {
		try setFieldValue(fieldNum: LapMesg.maxCoreTemperatureFieldNum, value: value)
	}

	public class func createLapMesg() -> LapMesg {
        let mesg = LapMesg(name: "Lap", num: Profile.MesgNum.lap)
		
		mesg.fields[LapMesg.messageIndexFieldNum] = Field(name: "MessageIndex", num: LapMesg.messageIndexFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[LapMesg.timestampFieldNum] = Field(name: "Timestamp", num: LapMesg.timestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
		mesg.fields[LapMesg.eventFieldNum] = Field(name: "Event", num: LapMesg.eventFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[LapMesg.eventTypeFieldNum] = Field(name: "EventType", num: LapMesg.eventTypeFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[LapMesg.startTimeFieldNum] = Field(name: "StartTime", num: LapMesg.startTimeFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[LapMesg.startPositionLatFieldNum] = Field(name: "StartPositionLat", num: LapMesg.startPositionLatFieldNum, type: BaseType.SINT32.rawValue, scale: 1, offset: 0, units: "semicircles", accumulated: false)
		mesg.fields[LapMesg.startPositionLongFieldNum] = Field(name: "StartPositionLong", num: LapMesg.startPositionLongFieldNum, type: BaseType.SINT32.rawValue, scale: 1, offset: 0, units: "semicircles", accumulated: false)
		mesg.fields[LapMesg.endPositionLatFieldNum] = Field(name: "EndPositionLat", num: LapMesg.endPositionLatFieldNum, type: BaseType.SINT32.rawValue, scale: 1, offset: 0, units: "semicircles", accumulated: false)
		mesg.fields[LapMesg.endPositionLongFieldNum] = Field(name: "EndPositionLong", num: LapMesg.endPositionLongFieldNum, type: BaseType.SINT32.rawValue, scale: 1, offset: 0, units: "semicircles", accumulated: false)
		mesg.fields[LapMesg.totalElapsedTimeFieldNum] = Field(name: "TotalElapsedTime", num: LapMesg.totalElapsedTimeFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "s", accumulated: false)
		mesg.fields[LapMesg.totalTimerTimeFieldNum] = Field(name: "TotalTimerTime", num: LapMesg.totalTimerTimeFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "s", accumulated: false)
		mesg.fields[LapMesg.totalDistanceFieldNum] = Field(name: "TotalDistance", num: LapMesg.totalDistanceFieldNum, type: BaseType.UINT32.rawValue, scale: 100, offset: 0, units: "m", accumulated: false)
		mesg.fields[LapMesg.totalCyclesFieldNum] = Field(name: "TotalCycles", num: LapMesg.totalCyclesFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "cycles", accumulated: false)
        mesg.fields[LapMesg.totalCyclesFieldNum]?.subFields.append(SubField(name: "TotalStrides", type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "strides"))
        mesg.fields[LapMesg.totalCyclesFieldNum]?.subFields[Int(TotalCyclesSubField.totalStrides)].addMap(refFieldNum: 25, refFieldValue: 1)
        mesg.fields[LapMesg.totalCyclesFieldNum]?.subFields[Int(TotalCyclesSubField.totalStrides)].addMap(refFieldNum: 25, refFieldValue: 11)
        mesg.fields[LapMesg.totalCyclesFieldNum]?.subFields.append(SubField(name: "TotalStrokes", type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "strokes"))
        mesg.fields[LapMesg.totalCyclesFieldNum]?.subFields[Int(TotalCyclesSubField.totalStrokes)].addMap(refFieldNum: 25, refFieldValue: 2)
        mesg.fields[LapMesg.totalCyclesFieldNum]?.subFields[Int(TotalCyclesSubField.totalStrokes)].addMap(refFieldNum: 25, refFieldValue: 5)
        mesg.fields[LapMesg.totalCyclesFieldNum]?.subFields[Int(TotalCyclesSubField.totalStrokes)].addMap(refFieldNum: 25, refFieldValue: 15)
        mesg.fields[LapMesg.totalCyclesFieldNum]?.subFields[Int(TotalCyclesSubField.totalStrokes)].addMap(refFieldNum: 25, refFieldValue: 37)
		mesg.fields[LapMesg.totalCaloriesFieldNum] = Field(name: "TotalCalories", num: LapMesg.totalCaloriesFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "kcal", accumulated: false)
		mesg.fields[LapMesg.totalFatCaloriesFieldNum] = Field(name: "TotalFatCalories", num: LapMesg.totalFatCaloriesFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "kcal", accumulated: false)
		mesg.fields[LapMesg.avgSpeedFieldNum] = Field(name: "AvgSpeed", num: LapMesg.avgSpeedFieldNum, type: BaseType.UINT16.rawValue, scale: 1000, offset: 0, units: "m/s", accumulated: false)
		mesg.fields[LapMesg.avgSpeedFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: enhancedAvgSpeedFieldNum, accumulated: false, bits: 16, scale: 1000, offset: 0))
		mesg.fields[LapMesg.maxSpeedFieldNum] = Field(name: "MaxSpeed", num: LapMesg.maxSpeedFieldNum, type: BaseType.UINT16.rawValue, scale: 1000, offset: 0, units: "m/s", accumulated: false)
		mesg.fields[LapMesg.maxSpeedFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: enhancedMaxSpeedFieldNum, accumulated: false, bits: 16, scale: 1000, offset: 0))
		mesg.fields[LapMesg.avgHeartRateFieldNum] = Field(name: "AvgHeartRate", num: LapMesg.avgHeartRateFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "bpm", accumulated: false)
		mesg.fields[LapMesg.maxHeartRateFieldNum] = Field(name: "MaxHeartRate", num: LapMesg.maxHeartRateFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "bpm", accumulated: false)
		mesg.fields[LapMesg.avgCadenceFieldNum] = Field(name: "AvgCadence", num: LapMesg.avgCadenceFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "rpm", accumulated: false)
        mesg.fields[LapMesg.avgCadenceFieldNum]?.subFields.append(SubField(name: "AvgRunningCadence", type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "strides/min"))
        mesg.fields[LapMesg.avgCadenceFieldNum]?.subFields[Int(AvgCadenceSubField.avgRunningCadence)].addMap(refFieldNum: 25, refFieldValue: 1)
		mesg.fields[LapMesg.maxCadenceFieldNum] = Field(name: "MaxCadence", num: LapMesg.maxCadenceFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "rpm", accumulated: false)
        mesg.fields[LapMesg.maxCadenceFieldNum]?.subFields.append(SubField(name: "MaxRunningCadence", type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "strides/min"))
        mesg.fields[LapMesg.maxCadenceFieldNum]?.subFields[Int(MaxCadenceSubField.maxRunningCadence)].addMap(refFieldNum: 25, refFieldValue: 1)
		mesg.fields[LapMesg.avgPowerFieldNum] = Field(name: "AvgPower", num: LapMesg.avgPowerFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "watts", accumulated: false)
		mesg.fields[LapMesg.maxPowerFieldNum] = Field(name: "MaxPower", num: LapMesg.maxPowerFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "watts", accumulated: false)
		mesg.fields[LapMesg.totalAscentFieldNum] = Field(name: "TotalAscent", num: LapMesg.totalAscentFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "m", accumulated: false)
		mesg.fields[LapMesg.totalDescentFieldNum] = Field(name: "TotalDescent", num: LapMesg.totalDescentFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "m", accumulated: false)
		mesg.fields[LapMesg.intensityFieldNum] = Field(name: "Intensity", num: LapMesg.intensityFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[LapMesg.lapTriggerFieldNum] = Field(name: "LapTrigger", num: LapMesg.lapTriggerFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[LapMesg.sportFieldNum] = Field(name: "Sport", num: LapMesg.sportFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[LapMesg.eventGroupFieldNum] = Field(name: "EventGroup", num: LapMesg.eventGroupFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[LapMesg.numLengthsFieldNum] = Field(name: "NumLengths", num: LapMesg.numLengthsFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "lengths", accumulated: false)
		mesg.fields[LapMesg.normalizedPowerFieldNum] = Field(name: "NormalizedPower", num: LapMesg.normalizedPowerFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "watts", accumulated: false)
		mesg.fields[LapMesg.leftRightBalanceFieldNum] = Field(name: "LeftRightBalance", num: LapMesg.leftRightBalanceFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[LapMesg.firstLengthIndexFieldNum] = Field(name: "FirstLengthIndex", num: LapMesg.firstLengthIndexFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[LapMesg.avgStrokeDistanceFieldNum] = Field(name: "AvgStrokeDistance", num: LapMesg.avgStrokeDistanceFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "m", accumulated: false)
		mesg.fields[LapMesg.swimStrokeFieldNum] = Field(name: "SwimStroke", num: LapMesg.swimStrokeFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[LapMesg.subSportFieldNum] = Field(name: "SubSport", num: LapMesg.subSportFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[LapMesg.numActiveLengthsFieldNum] = Field(name: "NumActiveLengths", num: LapMesg.numActiveLengthsFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "lengths", accumulated: false)
		mesg.fields[LapMesg.totalWorkFieldNum] = Field(name: "TotalWork", num: LapMesg.totalWorkFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "J", accumulated: false)
		mesg.fields[LapMesg.avgAltitudeFieldNum] = Field(name: "AvgAltitude", num: LapMesg.avgAltitudeFieldNum, type: BaseType.UINT16.rawValue, scale: 5, offset: 500, units: "m", accumulated: false)
		mesg.fields[LapMesg.avgAltitudeFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: enhancedAvgAltitudeFieldNum, accumulated: false, bits: 16, scale: 5, offset: 500))
		mesg.fields[LapMesg.maxAltitudeFieldNum] = Field(name: "MaxAltitude", num: LapMesg.maxAltitudeFieldNum, type: BaseType.UINT16.rawValue, scale: 5, offset: 500, units: "m", accumulated: false)
		mesg.fields[LapMesg.maxAltitudeFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: enhancedMaxAltitudeFieldNum, accumulated: false, bits: 16, scale: 5, offset: 500))
		mesg.fields[LapMesg.gpsAccuracyFieldNum] = Field(name: "GpsAccuracy", num: LapMesg.gpsAccuracyFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "m", accumulated: false)
		mesg.fields[LapMesg.avgGradeFieldNum] = Field(name: "AvgGrade", num: LapMesg.avgGradeFieldNum, type: BaseType.SINT16.rawValue, scale: 100, offset: 0, units: "%", accumulated: false)
		mesg.fields[LapMesg.avgPosGradeFieldNum] = Field(name: "AvgPosGrade", num: LapMesg.avgPosGradeFieldNum, type: BaseType.SINT16.rawValue, scale: 100, offset: 0, units: "%", accumulated: false)
		mesg.fields[LapMesg.avgNegGradeFieldNum] = Field(name: "AvgNegGrade", num: LapMesg.avgNegGradeFieldNum, type: BaseType.SINT16.rawValue, scale: 100, offset: 0, units: "%", accumulated: false)
		mesg.fields[LapMesg.maxPosGradeFieldNum] = Field(name: "MaxPosGrade", num: LapMesg.maxPosGradeFieldNum, type: BaseType.SINT16.rawValue, scale: 100, offset: 0, units: "%", accumulated: false)
		mesg.fields[LapMesg.maxNegGradeFieldNum] = Field(name: "MaxNegGrade", num: LapMesg.maxNegGradeFieldNum, type: BaseType.SINT16.rawValue, scale: 100, offset: 0, units: "%", accumulated: false)
		mesg.fields[LapMesg.avgTemperatureFieldNum] = Field(name: "AvgTemperature", num: LapMesg.avgTemperatureFieldNum, type: BaseType.SINT8.rawValue, scale: 1, offset: 0, units: "C", accumulated: false)
		mesg.fields[LapMesg.maxTemperatureFieldNum] = Field(name: "MaxTemperature", num: LapMesg.maxTemperatureFieldNum, type: BaseType.SINT8.rawValue, scale: 1, offset: 0, units: "C", accumulated: false)
		mesg.fields[LapMesg.totalMovingTimeFieldNum] = Field(name: "TotalMovingTime", num: LapMesg.totalMovingTimeFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "s", accumulated: false)
		mesg.fields[LapMesg.avgPosVerticalSpeedFieldNum] = Field(name: "AvgPosVerticalSpeed", num: LapMesg.avgPosVerticalSpeedFieldNum, type: BaseType.SINT16.rawValue, scale: 1000, offset: 0, units: "m/s", accumulated: false)
		mesg.fields[LapMesg.avgNegVerticalSpeedFieldNum] = Field(name: "AvgNegVerticalSpeed", num: LapMesg.avgNegVerticalSpeedFieldNum, type: BaseType.SINT16.rawValue, scale: 1000, offset: 0, units: "m/s", accumulated: false)
		mesg.fields[LapMesg.maxPosVerticalSpeedFieldNum] = Field(name: "MaxPosVerticalSpeed", num: LapMesg.maxPosVerticalSpeedFieldNum, type: BaseType.SINT16.rawValue, scale: 1000, offset: 0, units: "m/s", accumulated: false)
		mesg.fields[LapMesg.maxNegVerticalSpeedFieldNum] = Field(name: "MaxNegVerticalSpeed", num: LapMesg.maxNegVerticalSpeedFieldNum, type: BaseType.SINT16.rawValue, scale: 1000, offset: 0, units: "m/s", accumulated: false)
		mesg.fields[LapMesg.timeInHrZoneFieldNum] = Field(name: "TimeInHrZone", num: LapMesg.timeInHrZoneFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "s", accumulated: false)
		mesg.fields[LapMesg.timeInSpeedZoneFieldNum] = Field(name: "TimeInSpeedZone", num: LapMesg.timeInSpeedZoneFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "s", accumulated: false)
		mesg.fields[LapMesg.timeInCadenceZoneFieldNum] = Field(name: "TimeInCadenceZone", num: LapMesg.timeInCadenceZoneFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "s", accumulated: false)
		mesg.fields[LapMesg.timeInPowerZoneFieldNum] = Field(name: "TimeInPowerZone", num: LapMesg.timeInPowerZoneFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "s", accumulated: false)
		mesg.fields[LapMesg.repetitionNumFieldNum] = Field(name: "RepetitionNum", num: LapMesg.repetitionNumFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[LapMesg.minAltitudeFieldNum] = Field(name: "MinAltitude", num: LapMesg.minAltitudeFieldNum, type: BaseType.UINT16.rawValue, scale: 5, offset: 500, units: "m", accumulated: false)
		mesg.fields[LapMesg.minAltitudeFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: enhancedMinAltitudeFieldNum, accumulated: false, bits: 16, scale: 5, offset: 500))
		mesg.fields[LapMesg.minHeartRateFieldNum] = Field(name: "MinHeartRate", num: LapMesg.minHeartRateFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "bpm", accumulated: false)
		mesg.fields[LapMesg.wktStepIndexFieldNum] = Field(name: "WktStepIndex", num: LapMesg.wktStepIndexFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[LapMesg.opponentScoreFieldNum] = Field(name: "OpponentScore", num: LapMesg.opponentScoreFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[LapMesg.strokeCountFieldNum] = Field(name: "StrokeCount", num: LapMesg.strokeCountFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "counts", accumulated: false)
		mesg.fields[LapMesg.zoneCountFieldNum] = Field(name: "ZoneCount", num: LapMesg.zoneCountFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "counts", accumulated: false)
		mesg.fields[LapMesg.avgVerticalOscillationFieldNum] = Field(name: "AvgVerticalOscillation", num: LapMesg.avgVerticalOscillationFieldNum, type: BaseType.UINT16.rawValue, scale: 10, offset: 0, units: "mm", accumulated: false)
		mesg.fields[LapMesg.avgStanceTimePercentFieldNum] = Field(name: "AvgStanceTimePercent", num: LapMesg.avgStanceTimePercentFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "percent", accumulated: false)
		mesg.fields[LapMesg.avgStanceTimeFieldNum] = Field(name: "AvgStanceTime", num: LapMesg.avgStanceTimeFieldNum, type: BaseType.UINT16.rawValue, scale: 10, offset: 0, units: "ms", accumulated: false)
		mesg.fields[LapMesg.avgFractionalCadenceFieldNum] = Field(name: "AvgFractionalCadence", num: LapMesg.avgFractionalCadenceFieldNum, type: BaseType.UINT8.rawValue, scale: 128, offset: 0, units: "rpm", accumulated: false)
		mesg.fields[LapMesg.maxFractionalCadenceFieldNum] = Field(name: "MaxFractionalCadence", num: LapMesg.maxFractionalCadenceFieldNum, type: BaseType.UINT8.rawValue, scale: 128, offset: 0, units: "rpm", accumulated: false)
		mesg.fields[LapMesg.totalFractionalCyclesFieldNum] = Field(name: "TotalFractionalCycles", num: LapMesg.totalFractionalCyclesFieldNum, type: BaseType.UINT8.rawValue, scale: 128, offset: 0, units: "cycles", accumulated: false)
		mesg.fields[LapMesg.playerScoreFieldNum] = Field(name: "PlayerScore", num: LapMesg.playerScoreFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[LapMesg.avgTotalHemoglobinConcFieldNum] = Field(name: "AvgTotalHemoglobinConc", num: LapMesg.avgTotalHemoglobinConcFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "g/dL", accumulated: false)
		mesg.fields[LapMesg.minTotalHemoglobinConcFieldNum] = Field(name: "MinTotalHemoglobinConc", num: LapMesg.minTotalHemoglobinConcFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "g/dL", accumulated: false)
		mesg.fields[LapMesg.maxTotalHemoglobinConcFieldNum] = Field(name: "MaxTotalHemoglobinConc", num: LapMesg.maxTotalHemoglobinConcFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "g/dL", accumulated: false)
		mesg.fields[LapMesg.avgSaturatedHemoglobinPercentFieldNum] = Field(name: "AvgSaturatedHemoglobinPercent", num: LapMesg.avgSaturatedHemoglobinPercentFieldNum, type: BaseType.UINT16.rawValue, scale: 10, offset: 0, units: "%", accumulated: false)
		mesg.fields[LapMesg.minSaturatedHemoglobinPercentFieldNum] = Field(name: "MinSaturatedHemoglobinPercent", num: LapMesg.minSaturatedHemoglobinPercentFieldNum, type: BaseType.UINT16.rawValue, scale: 10, offset: 0, units: "%", accumulated: false)
		mesg.fields[LapMesg.maxSaturatedHemoglobinPercentFieldNum] = Field(name: "MaxSaturatedHemoglobinPercent", num: LapMesg.maxSaturatedHemoglobinPercentFieldNum, type: BaseType.UINT16.rawValue, scale: 10, offset: 0, units: "%", accumulated: false)
		mesg.fields[LapMesg.avgLeftTorqueEffectivenessFieldNum] = Field(name: "AvgLeftTorqueEffectiveness", num: LapMesg.avgLeftTorqueEffectivenessFieldNum, type: BaseType.UINT8.rawValue, scale: 2, offset: 0, units: "percent", accumulated: false)
		mesg.fields[LapMesg.avgRightTorqueEffectivenessFieldNum] = Field(name: "AvgRightTorqueEffectiveness", num: LapMesg.avgRightTorqueEffectivenessFieldNum, type: BaseType.UINT8.rawValue, scale: 2, offset: 0, units: "percent", accumulated: false)
		mesg.fields[LapMesg.avgLeftPedalSmoothnessFieldNum] = Field(name: "AvgLeftPedalSmoothness", num: LapMesg.avgLeftPedalSmoothnessFieldNum, type: BaseType.UINT8.rawValue, scale: 2, offset: 0, units: "percent", accumulated: false)
		mesg.fields[LapMesg.avgRightPedalSmoothnessFieldNum] = Field(name: "AvgRightPedalSmoothness", num: LapMesg.avgRightPedalSmoothnessFieldNum, type: BaseType.UINT8.rawValue, scale: 2, offset: 0, units: "percent", accumulated: false)
		mesg.fields[LapMesg.avgCombinedPedalSmoothnessFieldNum] = Field(name: "AvgCombinedPedalSmoothness", num: LapMesg.avgCombinedPedalSmoothnessFieldNum, type: BaseType.UINT8.rawValue, scale: 2, offset: 0, units: "percent", accumulated: false)
		mesg.fields[LapMesg.timeStandingFieldNum] = Field(name: "TimeStanding", num: LapMesg.timeStandingFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "s", accumulated: false)
		mesg.fields[LapMesg.standCountFieldNum] = Field(name: "StandCount", num: LapMesg.standCountFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[LapMesg.avgLeftPcoFieldNum] = Field(name: "AvgLeftPco", num: LapMesg.avgLeftPcoFieldNum, type: BaseType.SINT8.rawValue, scale: 1, offset: 0, units: "mm", accumulated: false)
		mesg.fields[LapMesg.avgRightPcoFieldNum] = Field(name: "AvgRightPco", num: LapMesg.avgRightPcoFieldNum, type: BaseType.SINT8.rawValue, scale: 1, offset: 0, units: "mm", accumulated: false)
		mesg.fields[LapMesg.avgLeftPowerPhaseFieldNum] = Field(name: "AvgLeftPowerPhase", num: LapMesg.avgLeftPowerPhaseFieldNum, type: BaseType.UINT8.rawValue, scale: 0.7111111, offset: 0, units: "degrees", accumulated: false)
		mesg.fields[LapMesg.avgLeftPowerPhasePeakFieldNum] = Field(name: "AvgLeftPowerPhasePeak", num: LapMesg.avgLeftPowerPhasePeakFieldNum, type: BaseType.UINT8.rawValue, scale: 0.7111111, offset: 0, units: "degrees", accumulated: false)
		mesg.fields[LapMesg.avgRightPowerPhaseFieldNum] = Field(name: "AvgRightPowerPhase", num: LapMesg.avgRightPowerPhaseFieldNum, type: BaseType.UINT8.rawValue, scale: 0.7111111, offset: 0, units: "degrees", accumulated: false)
		mesg.fields[LapMesg.avgRightPowerPhasePeakFieldNum] = Field(name: "AvgRightPowerPhasePeak", num: LapMesg.avgRightPowerPhasePeakFieldNum, type: BaseType.UINT8.rawValue, scale: 0.7111111, offset: 0, units: "degrees", accumulated: false)
		mesg.fields[LapMesg.avgPowerPositionFieldNum] = Field(name: "AvgPowerPosition", num: LapMesg.avgPowerPositionFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "watts", accumulated: false)
		mesg.fields[LapMesg.maxPowerPositionFieldNum] = Field(name: "MaxPowerPosition", num: LapMesg.maxPowerPositionFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "watts", accumulated: false)
		mesg.fields[LapMesg.avgCadencePositionFieldNum] = Field(name: "AvgCadencePosition", num: LapMesg.avgCadencePositionFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "rpm", accumulated: false)
		mesg.fields[LapMesg.maxCadencePositionFieldNum] = Field(name: "MaxCadencePosition", num: LapMesg.maxCadencePositionFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "rpm", accumulated: false)
		mesg.fields[LapMesg.enhancedAvgSpeedFieldNum] = Field(name: "EnhancedAvgSpeed", num: LapMesg.enhancedAvgSpeedFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "m/s", accumulated: false)
		mesg.fields[LapMesg.enhancedMaxSpeedFieldNum] = Field(name: "EnhancedMaxSpeed", num: LapMesg.enhancedMaxSpeedFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "m/s", accumulated: false)
		mesg.fields[LapMesg.enhancedAvgAltitudeFieldNum] = Field(name: "EnhancedAvgAltitude", num: LapMesg.enhancedAvgAltitudeFieldNum, type: BaseType.UINT32.rawValue, scale: 5, offset: 500, units: "m", accumulated: false)
		mesg.fields[LapMesg.enhancedMinAltitudeFieldNum] = Field(name: "EnhancedMinAltitude", num: LapMesg.enhancedMinAltitudeFieldNum, type: BaseType.UINT32.rawValue, scale: 5, offset: 500, units: "m", accumulated: false)
		mesg.fields[LapMesg.enhancedMaxAltitudeFieldNum] = Field(name: "EnhancedMaxAltitude", num: LapMesg.enhancedMaxAltitudeFieldNum, type: BaseType.UINT32.rawValue, scale: 5, offset: 500, units: "m", accumulated: false)
		mesg.fields[LapMesg.avgLevMotorPowerFieldNum] = Field(name: "AvgLevMotorPower", num: LapMesg.avgLevMotorPowerFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "watts", accumulated: false)
		mesg.fields[LapMesg.maxLevMotorPowerFieldNum] = Field(name: "MaxLevMotorPower", num: LapMesg.maxLevMotorPowerFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "watts", accumulated: false)
		mesg.fields[LapMesg.levBatteryConsumptionFieldNum] = Field(name: "LevBatteryConsumption", num: LapMesg.levBatteryConsumptionFieldNum, type: BaseType.UINT8.rawValue, scale: 2, offset: 0, units: "percent", accumulated: false)
		mesg.fields[LapMesg.avgVerticalRatioFieldNum] = Field(name: "AvgVerticalRatio", num: LapMesg.avgVerticalRatioFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "percent", accumulated: false)
		mesg.fields[LapMesg.avgStanceTimeBalanceFieldNum] = Field(name: "AvgStanceTimeBalance", num: LapMesg.avgStanceTimeBalanceFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "percent", accumulated: false)
		mesg.fields[LapMesg.avgStepLengthFieldNum] = Field(name: "AvgStepLength", num: LapMesg.avgStepLengthFieldNum, type: BaseType.UINT16.rawValue, scale: 10, offset: 0, units: "mm", accumulated: false)
		mesg.fields[LapMesg.avgVamFieldNum] = Field(name: "AvgVam", num: LapMesg.avgVamFieldNum, type: BaseType.UINT16.rawValue, scale: 1000, offset: 0, units: "m/s", accumulated: false)
		mesg.fields[LapMesg.avgDepthFieldNum] = Field(name: "AvgDepth", num: LapMesg.avgDepthFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "m", accumulated: false)
		mesg.fields[LapMesg.maxDepthFieldNum] = Field(name: "MaxDepth", num: LapMesg.maxDepthFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "m", accumulated: false)
		mesg.fields[LapMesg.minTemperatureFieldNum] = Field(name: "MinTemperature", num: LapMesg.minTemperatureFieldNum, type: BaseType.SINT8.rawValue, scale: 1, offset: 0, units: "C", accumulated: false)
		mesg.fields[LapMesg.enhancedAvgRespirationRateFieldNum] = Field(name: "EnhancedAvgRespirationRate", num: LapMesg.enhancedAvgRespirationRateFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "Breaths/min", accumulated: false)
		mesg.fields[LapMesg.enhancedMaxRespirationRateFieldNum] = Field(name: "EnhancedMaxRespirationRate", num: LapMesg.enhancedMaxRespirationRateFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "Breaths/min", accumulated: false)
		mesg.fields[LapMesg.avgRespirationRateFieldNum] = Field(name: "AvgRespirationRate", num: LapMesg.avgRespirationRateFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[LapMesg.avgRespirationRateFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: enhancedAvgRespirationRateFieldNum, accumulated: false, bits: 8, scale: 1, offset: 0))
		mesg.fields[LapMesg.maxRespirationRateFieldNum] = Field(name: "MaxRespirationRate", num: LapMesg.maxRespirationRateFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[LapMesg.maxRespirationRateFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: enhancedMaxRespirationRateFieldNum, accumulated: false, bits: 8, scale: 1, offset: 0))
		mesg.fields[LapMesg.totalGritFieldNum] = Field(name: "TotalGrit", num: LapMesg.totalGritFieldNum, type: BaseType.FLOAT32.rawValue, scale: 1, offset: 0, units: "kGrit", accumulated: false)
		mesg.fields[LapMesg.totalFlowFieldNum] = Field(name: "TotalFlow", num: LapMesg.totalFlowFieldNum, type: BaseType.FLOAT32.rawValue, scale: 1, offset: 0, units: "Flow", accumulated: false)
		mesg.fields[LapMesg.jumpCountFieldNum] = Field(name: "JumpCount", num: LapMesg.jumpCountFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[LapMesg.avgGritFieldNum] = Field(name: "AvgGrit", num: LapMesg.avgGritFieldNum, type: BaseType.FLOAT32.rawValue, scale: 1, offset: 0, units: "kGrit", accumulated: false)
		mesg.fields[LapMesg.avgFlowFieldNum] = Field(name: "AvgFlow", num: LapMesg.avgFlowFieldNum, type: BaseType.FLOAT32.rawValue, scale: 1, offset: 0, units: "Flow", accumulated: false)
		mesg.fields[LapMesg.totalFractionalAscentFieldNum] = Field(name: "TotalFractionalAscent", num: LapMesg.totalFractionalAscentFieldNum, type: BaseType.UINT8.rawValue, scale: 100, offset: 0, units: "m", accumulated: false)
		mesg.fields[LapMesg.totalFractionalDescentFieldNum] = Field(name: "TotalFractionalDescent", num: LapMesg.totalFractionalDescentFieldNum, type: BaseType.UINT8.rawValue, scale: 100, offset: 0, units: "m", accumulated: false)
		mesg.fields[LapMesg.avgCoreTemperatureFieldNum] = Field(name: "AvgCoreTemperature", num: LapMesg.avgCoreTemperatureFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "C", accumulated: false)
		mesg.fields[LapMesg.minCoreTemperatureFieldNum] = Field(name: "MinCoreTemperature", num: LapMesg.minCoreTemperatureFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "C", accumulated: false)
		mesg.fields[LapMesg.maxCoreTemperatureFieldNum] = Field(name: "MaxCoreTemperature", num: LapMesg.maxCoreTemperatureFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "C", accumulated: false)
        return mesg
    }
}