/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class SessionMesg : Mesg {
    public static let messageIndexFieldNum:UInt8 = 254
    public static let timestampFieldNum:UInt8 = 253
    public static let eventFieldNum:UInt8 = 0
    public static let eventTypeFieldNum:UInt8 = 1
    public static let startTimeFieldNum:UInt8 = 2
    public static let startPositionLatFieldNum:UInt8 = 3
    public static let startPositionLongFieldNum:UInt8 = 4
    public static let sportFieldNum:UInt8 = 5
    public static let subSportFieldNum:UInt8 = 6
    public static let totalElapsedTimeFieldNum:UInt8 = 7
    public static let totalTimerTimeFieldNum:UInt8 = 8
    public static let totalDistanceFieldNum:UInt8 = 9
    public static let totalCyclesFieldNum:UInt8 = 10
    public static let totalCaloriesFieldNum:UInt8 = 11
    public static let totalFatCaloriesFieldNum:UInt8 = 13
    public static let avgSpeedFieldNum:UInt8 = 14
    public static let maxSpeedFieldNum:UInt8 = 15
    public static let avgHeartRateFieldNum:UInt8 = 16
    public static let maxHeartRateFieldNum:UInt8 = 17
    public static let avgCadenceFieldNum:UInt8 = 18
    public static let maxCadenceFieldNum:UInt8 = 19
    public static let avgPowerFieldNum:UInt8 = 20
    public static let maxPowerFieldNum:UInt8 = 21
    public static let totalAscentFieldNum:UInt8 = 22
    public static let totalDescentFieldNum:UInt8 = 23
    public static let totalTrainingEffectFieldNum:UInt8 = 24
    public static let firstLapIndexFieldNum:UInt8 = 25
    public static let numLapsFieldNum:UInt8 = 26
    public static let eventGroupFieldNum:UInt8 = 27
    public static let triggerFieldNum:UInt8 = 28
    public static let necLatFieldNum:UInt8 = 29
    public static let necLongFieldNum:UInt8 = 30
    public static let swcLatFieldNum:UInt8 = 31
    public static let swcLongFieldNum:UInt8 = 32
    public static let numLengthsFieldNum:UInt8 = 33
    public static let normalizedPowerFieldNum:UInt8 = 34
    public static let trainingStressScoreFieldNum:UInt8 = 35
    public static let intensityFactorFieldNum:UInt8 = 36
    public static let leftRightBalanceFieldNum:UInt8 = 37
    public static let endPositionLatFieldNum:UInt8 = 38
    public static let endPositionLongFieldNum:UInt8 = 39
    public static let avgStrokeCountFieldNum:UInt8 = 41
    public static let avgStrokeDistanceFieldNum:UInt8 = 42
    public static let swimStrokeFieldNum:UInt8 = 43
    public static let poolLengthFieldNum:UInt8 = 44
    public static let thresholdPowerFieldNum:UInt8 = 45
    public static let poolLengthUnitFieldNum:UInt8 = 46
    public static let numActiveLengthsFieldNum:UInt8 = 47
    public static let totalWorkFieldNum:UInt8 = 48
    public static let avgAltitudeFieldNum:UInt8 = 49
    public static let maxAltitudeFieldNum:UInt8 = 50
    public static let gpsAccuracyFieldNum:UInt8 = 51
    public static let avgGradeFieldNum:UInt8 = 52
    public static let avgPosGradeFieldNum:UInt8 = 53
    public static let avgNegGradeFieldNum:UInt8 = 54
    public static let maxPosGradeFieldNum:UInt8 = 55
    public static let maxNegGradeFieldNum:UInt8 = 56
    public static let avgTemperatureFieldNum:UInt8 = 57
    public static let maxTemperatureFieldNum:UInt8 = 58
    public static let totalMovingTimeFieldNum:UInt8 = 59
    public static let avgPosVerticalSpeedFieldNum:UInt8 = 60
    public static let avgNegVerticalSpeedFieldNum:UInt8 = 61
    public static let maxPosVerticalSpeedFieldNum:UInt8 = 62
    public static let maxNegVerticalSpeedFieldNum:UInt8 = 63
    public static let minHeartRateFieldNum:UInt8 = 64
    public static let timeInHrZoneFieldNum:UInt8 = 65
    public static let timeInSpeedZoneFieldNum:UInt8 = 66
    public static let timeInCadenceZoneFieldNum:UInt8 = 67
    public static let timeInPowerZoneFieldNum:UInt8 = 68
    public static let avgLapTimeFieldNum:UInt8 = 69
    public static let bestLapIndexFieldNum:UInt8 = 70
    public static let minAltitudeFieldNum:UInt8 = 71
    public static let playerScoreFieldNum:UInt8 = 82
    public static let opponentScoreFieldNum:UInt8 = 83
    public static let opponentNameFieldNum:UInt8 = 84
    public static let strokeCountFieldNum:UInt8 = 85
    public static let zoneCountFieldNum:UInt8 = 86
    public static let maxBallSpeedFieldNum:UInt8 = 87
    public static let avgBallSpeedFieldNum:UInt8 = 88
    public static let avgVerticalOscillationFieldNum:UInt8 = 89
    public static let avgStanceTimePercentFieldNum:UInt8 = 90
    public static let avgStanceTimeFieldNum:UInt8 = 91
    public static let avgFractionalCadenceFieldNum:UInt8 = 92
    public static let maxFractionalCadenceFieldNum:UInt8 = 93
    public static let totalFractionalCyclesFieldNum:UInt8 = 94
    public static let avgTotalHemoglobinConcFieldNum:UInt8 = 95
    public static let minTotalHemoglobinConcFieldNum:UInt8 = 96
    public static let maxTotalHemoglobinConcFieldNum:UInt8 = 97
    public static let avgSaturatedHemoglobinPercentFieldNum:UInt8 = 98
    public static let minSaturatedHemoglobinPercentFieldNum:UInt8 = 99
    public static let maxSaturatedHemoglobinPercentFieldNum:UInt8 = 100
    public static let avgLeftTorqueEffectivenessFieldNum:UInt8 = 101
    public static let avgRightTorqueEffectivenessFieldNum:UInt8 = 102
    public static let avgLeftPedalSmoothnessFieldNum:UInt8 = 103
    public static let avgRightPedalSmoothnessFieldNum:UInt8 = 104
    public static let avgCombinedPedalSmoothnessFieldNum:UInt8 = 105
    public static let sportProfileNameFieldNum:UInt8 = 110
    public static let sportIndexFieldNum:UInt8 = 111
    public static let timeStandingFieldNum:UInt8 = 112
    public static let standCountFieldNum:UInt8 = 113
    public static let avgLeftPcoFieldNum:UInt8 = 114
    public static let avgRightPcoFieldNum:UInt8 = 115
    public static let avgLeftPowerPhaseFieldNum:UInt8 = 116
    public static let avgLeftPowerPhasePeakFieldNum:UInt8 = 117
    public static let avgRightPowerPhaseFieldNum:UInt8 = 118
    public static let avgRightPowerPhasePeakFieldNum:UInt8 = 119
    public static let avgPowerPositionFieldNum:UInt8 = 120
    public static let maxPowerPositionFieldNum:UInt8 = 121
    public static let avgCadencePositionFieldNum:UInt8 = 122
    public static let maxCadencePositionFieldNum:UInt8 = 123
    public static let enhancedAvgSpeedFieldNum:UInt8 = 124
    public static let enhancedMaxSpeedFieldNum:UInt8 = 125
    public static let enhancedAvgAltitudeFieldNum:UInt8 = 126
    public static let enhancedMinAltitudeFieldNum:UInt8 = 127
    public static let enhancedMaxAltitudeFieldNum:UInt8 = 128
    public static let avgLevMotorPowerFieldNum:UInt8 = 129
    public static let maxLevMotorPowerFieldNum:UInt8 = 130
    public static let levBatteryConsumptionFieldNum:UInt8 = 131
    public static let avgVerticalRatioFieldNum:UInt8 = 132
    public static let avgStanceTimeBalanceFieldNum:UInt8 = 133
    public static let avgStepLengthFieldNum:UInt8 = 134
    public static let totalAnaerobicTrainingEffectFieldNum:UInt8 = 137
    public static let avgVamFieldNum:UInt8 = 139
    public static let avgDepthFieldNum:UInt8 = 140
    public static let maxDepthFieldNum:UInt8 = 141
    public static let surfaceIntervalFieldNum:UInt8 = 142
    public static let startCnsFieldNum:UInt8 = 143
    public static let endCnsFieldNum:UInt8 = 144
    public static let startN2FieldNum:UInt8 = 145
    public static let endN2FieldNum:UInt8 = 146
    public static let avgRespirationRateFieldNum:UInt8 = 147
    public static let maxRespirationRateFieldNum:UInt8 = 148
    public static let minRespirationRateFieldNum:UInt8 = 149
    public static let minTemperatureFieldNum:UInt8 = 150
    public static let o2ToxicityFieldNum:UInt8 = 155
    public static let diveNumberFieldNum:UInt8 = 156
    public static let trainingLoadPeakFieldNum:UInt8 = 168
    public static let enhancedAvgRespirationRateFieldNum:UInt8 = 169
    public static let enhancedMaxRespirationRateFieldNum:UInt8 = 170
    public static let enhancedMinRespirationRateFieldNum:UInt8 = 180
    public static let totalGritFieldNum:UInt8 = 181
    public static let totalFlowFieldNum:UInt8 = 182
    public static let jumpCountFieldNum:UInt8 = 183
    public static let avgGritFieldNum:UInt8 = 186
    public static let avgFlowFieldNum:UInt8 = 187
    public static let workoutFeelFieldNum:UInt8 = 192
    public static let workoutRpeFieldNum:UInt8 = 193
    public static let avgSpo2FieldNum:UInt8 = 194
    public static let avgStressFieldNum:UInt8 = 195
    public static let sdrrHrvFieldNum:UInt8 = 197
    public static let rmssdHrvFieldNum:UInt8 = 198
    public static let totalFractionalAscentFieldNum:UInt8 = 199
    public static let totalFractionalDescentFieldNum:UInt8 = 200
    public static let avgCoreTemperatureFieldNum:UInt8 = 208
    public static let minCoreTemperatureFieldNum:UInt8 = 209
    public static let maxCoreTemperatureFieldNum:UInt8 = 210

	private struct TotalCyclesSubField {
        public static let totalStrides:UInt16 = 0
        public static let totalStrokes:UInt16 = 1
        public static let subfields:UInt16 = 2
        public static let active:UInt16 = FIT.SUBFIELD_INDEX.ACTIVE_SUBFIELD
        public static let mainField:UInt16 = FIT.SUBFIELD_INDEX.MAIN_FIELD
    }

	private struct AvgCadenceSubField {
        public static let avgRunningCadence:UInt16 = 0
        public static let subfields:UInt16 = 1
        public static let active:UInt16 = FIT.SUBFIELD_INDEX.ACTIVE_SUBFIELD
        public static let mainField:UInt16 = FIT.SUBFIELD_INDEX.MAIN_FIELD
    }

	private struct MaxCadenceSubField {
        public static let maxRunningCadence:UInt16 = 0
        public static let subfields:UInt16 = 1
        public static let active:UInt16 = FIT.SUBFIELD_INDEX.ACTIVE_SUBFIELD
        public static let mainField:UInt16 = FIT.SUBFIELD_INDEX.MAIN_FIELD
    }

	public init() {
        super.init(mesg: SessionMesg.createSessionMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getMessageIndex() -> MessageIndex? {
		guard let value = getFieldValue(fieldNum: SessionMesg.messageIndexFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setMessageIndex(_ value: MessageIndex) throws {
		try setFieldValue(fieldNum: SessionMesg.messageIndexFieldNum, value: value)
	}

	public func getTimestamp() -> DateTime? {
		guard let value = getFieldValue(fieldNum: SessionMesg.timestampFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setTimestamp(_ value: DateTime) throws {
		try setFieldValue(fieldNum: SessionMesg.timestampFieldNum, value: value.timestamp)
	}

	public func getEvent() -> Event? {
		guard let value = getFieldValue(fieldNum: SessionMesg.eventFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return Event(rawValue: value) ?? .invalid
	}

	public func setEvent(_ value: Event) throws {
		try setFieldValue(fieldNum: SessionMesg.eventFieldNum, value: value.rawValue)
	}

	public func getEventType() -> EventType? {
		guard let value = getFieldValue(fieldNum: SessionMesg.eventTypeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return EventType(rawValue: value) ?? .invalid
	}

	public func setEventType(_ value: EventType) throws {
		try setFieldValue(fieldNum: SessionMesg.eventTypeFieldNum, value: value.rawValue)
	}

	public func getStartTime() -> DateTime? {
		guard let value = getFieldValue(fieldNum: SessionMesg.startTimeFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setStartTime(_ value: DateTime) throws {
		try setFieldValue(fieldNum: SessionMesg.startTimeFieldNum, value: value.timestamp)
	}

	public func getStartPositionLat() -> Int32? {
		guard let value = getFieldValue(fieldNum: SessionMesg.startPositionLatFieldNum, index:0) as? Int32 else {
            return nil
        }
		return value
	}

	public func setStartPositionLat(_ value: Int32) throws {
		try setFieldValue(fieldNum: SessionMesg.startPositionLatFieldNum, value: value)
	}

	public func getStartPositionLong() -> Int32? {
		guard let value = getFieldValue(fieldNum: SessionMesg.startPositionLongFieldNum, index:0) as? Int32 else {
            return nil
        }
		return value
	}

	public func setStartPositionLong(_ value: Int32) throws {
		try setFieldValue(fieldNum: SessionMesg.startPositionLongFieldNum, value: value)
	}

	public func getSport() -> Sport? {
		guard let value = getFieldValue(fieldNum: SessionMesg.sportFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return Sport(rawValue: value) ?? .invalid
	}

	public func setSport(_ value: Sport) throws {
		try setFieldValue(fieldNum: SessionMesg.sportFieldNum, value: value.rawValue)
	}

	public func getSubSport() -> SubSport? {
		guard let value = getFieldValue(fieldNum: SessionMesg.subSportFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return SubSport(rawValue: value) ?? .invalid
	}

	public func setSubSport(_ value: SubSport) throws {
		try setFieldValue(fieldNum: SessionMesg.subSportFieldNum, value: value.rawValue)
	}

	public func getTotalElapsedTime() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.totalElapsedTimeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTotalElapsedTime(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.totalElapsedTimeFieldNum, value: value)
	}

	public func getTotalTimerTime() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.totalTimerTimeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTotalTimerTime(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.totalTimerTimeFieldNum, value: value)
	}

	public func getTotalDistance() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.totalDistanceFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTotalDistance(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.totalDistanceFieldNum, value: value)
	}

	public func getTotalCycles() -> UInt32? {
		guard let value = getFieldValue(fieldNum: SessionMesg.totalCyclesFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setTotalCycles(_ value: UInt32) throws {
		try setFieldValue(fieldNum: SessionMesg.totalCyclesFieldNum, value: value)
	}

	public func getTotalStrides() throws -> UInt32? {
		guard let value = try getFieldValue(fieldNum: SessionMesg.totalCyclesFieldNum, index: 0, subFieldIndex: TotalCyclesSubField.totalStrides).map({UInt32(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setTotalStrides(_ value: UInt32) throws {
		try setFieldValue(fieldNum: SessionMesg.totalCyclesFieldNum, value: value, index: 0, subFieldIndex: TotalCyclesSubField.totalStrides )
	}

	public func getTotalStrokes() throws -> UInt32? {
		guard let value = try getFieldValue(fieldNum: SessionMesg.totalCyclesFieldNum, index: 0, subFieldIndex: TotalCyclesSubField.totalStrokes).map({UInt32(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setTotalStrokes(_ value: UInt32) throws {
		try setFieldValue(fieldNum: SessionMesg.totalCyclesFieldNum, value: value, index: 0, subFieldIndex: TotalCyclesSubField.totalStrokes )
	}

	public func getTotalCalories() -> UInt16? {
		guard let value = getFieldValue(fieldNum: SessionMesg.totalCaloriesFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setTotalCalories(_ value: UInt16) throws {
		try setFieldValue(fieldNum: SessionMesg.totalCaloriesFieldNum, value: value)
	}

	public func getTotalFatCalories() -> UInt16? {
		guard let value = getFieldValue(fieldNum: SessionMesg.totalFatCaloriesFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setTotalFatCalories(_ value: UInt16) throws {
		try setFieldValue(fieldNum: SessionMesg.totalFatCaloriesFieldNum, value: value)
	}

	public func getAvgSpeed() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.avgSpeedFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgSpeed(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.avgSpeedFieldNum, value: value)
	}

	public func getMaxSpeed() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.maxSpeedFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setMaxSpeed(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.maxSpeedFieldNum, value: value)
	}

	public func getAvgHeartRate() -> UInt8? {
		guard let value = getFieldValue(fieldNum: SessionMesg.avgHeartRateFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setAvgHeartRate(_ value: UInt8) throws {
		try setFieldValue(fieldNum: SessionMesg.avgHeartRateFieldNum, value: value)
	}

	public func getMaxHeartRate() -> UInt8? {
		guard let value = getFieldValue(fieldNum: SessionMesg.maxHeartRateFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setMaxHeartRate(_ value: UInt8) throws {
		try setFieldValue(fieldNum: SessionMesg.maxHeartRateFieldNum, value: value)
	}

	public func getAvgCadence() -> UInt8? {
		guard let value = getFieldValue(fieldNum: SessionMesg.avgCadenceFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setAvgCadence(_ value: UInt8) throws {
		try setFieldValue(fieldNum: SessionMesg.avgCadenceFieldNum, value: value)
	}

	public func getAvgRunningCadence() throws -> UInt8? {
		guard let value = try getFieldValue(fieldNum: SessionMesg.avgCadenceFieldNum, index: 0, subFieldIndex: AvgCadenceSubField.avgRunningCadence).map({UInt8(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setAvgRunningCadence(_ value: UInt8) throws {
		try setFieldValue(fieldNum: SessionMesg.avgCadenceFieldNum, value: value, index: 0, subFieldIndex: AvgCadenceSubField.avgRunningCadence )
	}

	public func getMaxCadence() -> UInt8? {
		guard let value = getFieldValue(fieldNum: SessionMesg.maxCadenceFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setMaxCadence(_ value: UInt8) throws {
		try setFieldValue(fieldNum: SessionMesg.maxCadenceFieldNum, value: value)
	}

	public func getMaxRunningCadence() throws -> UInt8? {
		guard let value = try getFieldValue(fieldNum: SessionMesg.maxCadenceFieldNum, index: 0, subFieldIndex: MaxCadenceSubField.maxRunningCadence).map({UInt8(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setMaxRunningCadence(_ value: UInt8) throws {
		try setFieldValue(fieldNum: SessionMesg.maxCadenceFieldNum, value: value, index: 0, subFieldIndex: MaxCadenceSubField.maxRunningCadence )
	}

	public func getAvgPower() -> UInt16? {
		guard let value = getFieldValue(fieldNum: SessionMesg.avgPowerFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setAvgPower(_ value: UInt16) throws {
		try setFieldValue(fieldNum: SessionMesg.avgPowerFieldNum, value: value)
	}

	public func getMaxPower() -> UInt16? {
		guard let value = getFieldValue(fieldNum: SessionMesg.maxPowerFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setMaxPower(_ value: UInt16) throws {
		try setFieldValue(fieldNum: SessionMesg.maxPowerFieldNum, value: value)
	}

	public func getTotalAscent() -> UInt16? {
		guard let value = getFieldValue(fieldNum: SessionMesg.totalAscentFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setTotalAscent(_ value: UInt16) throws {
		try setFieldValue(fieldNum: SessionMesg.totalAscentFieldNum, value: value)
	}

	public func getTotalDescent() -> UInt16? {
		guard let value = getFieldValue(fieldNum: SessionMesg.totalDescentFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setTotalDescent(_ value: UInt16) throws {
		try setFieldValue(fieldNum: SessionMesg.totalDescentFieldNum, value: value)
	}

	public func getTotalTrainingEffect() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.totalTrainingEffectFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTotalTrainingEffect(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.totalTrainingEffectFieldNum, value: value)
	}

	public func getFirstLapIndex() -> UInt16? {
		guard let value = getFieldValue(fieldNum: SessionMesg.firstLapIndexFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setFirstLapIndex(_ value: UInt16) throws {
		try setFieldValue(fieldNum: SessionMesg.firstLapIndexFieldNum, value: value)
	}

	public func getNumLaps() -> UInt16? {
		guard let value = getFieldValue(fieldNum: SessionMesg.numLapsFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setNumLaps(_ value: UInt16) throws {
		try setFieldValue(fieldNum: SessionMesg.numLapsFieldNum, value: value)
	}

	public func getEventGroup() -> UInt8? {
		guard let value = getFieldValue(fieldNum: SessionMesg.eventGroupFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setEventGroup(_ value: UInt8) throws {
		try setFieldValue(fieldNum: SessionMesg.eventGroupFieldNum, value: value)
	}

	public func getTrigger() -> SessionTrigger? {
		guard let value = getFieldValue(fieldNum: SessionMesg.triggerFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return SessionTrigger(rawValue: value) ?? .invalid
	}

	public func setTrigger(_ value: SessionTrigger) throws {
		try setFieldValue(fieldNum: SessionMesg.triggerFieldNum, value: value.rawValue)
	}

	public func getNecLat() -> Int32? {
		guard let value = getFieldValue(fieldNum: SessionMesg.necLatFieldNum, index:0) as? Int32 else {
            return nil
        }
		return value
	}

	public func setNecLat(_ value: Int32) throws {
		try setFieldValue(fieldNum: SessionMesg.necLatFieldNum, value: value)
	}

	public func getNecLong() -> Int32? {
		guard let value = getFieldValue(fieldNum: SessionMesg.necLongFieldNum, index:0) as? Int32 else {
            return nil
        }
		return value
	}

	public func setNecLong(_ value: Int32) throws {
		try setFieldValue(fieldNum: SessionMesg.necLongFieldNum, value: value)
	}

	public func getSwcLat() -> Int32? {
		guard let value = getFieldValue(fieldNum: SessionMesg.swcLatFieldNum, index:0) as? Int32 else {
            return nil
        }
		return value
	}

	public func setSwcLat(_ value: Int32) throws {
		try setFieldValue(fieldNum: SessionMesg.swcLatFieldNum, value: value)
	}

	public func getSwcLong() -> Int32? {
		guard let value = getFieldValue(fieldNum: SessionMesg.swcLongFieldNum, index:0) as? Int32 else {
            return nil
        }
		return value
	}

	public func setSwcLong(_ value: Int32) throws {
		try setFieldValue(fieldNum: SessionMesg.swcLongFieldNum, value: value)
	}

	public func getNumLengths() -> UInt16? {
		guard let value = getFieldValue(fieldNum: SessionMesg.numLengthsFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setNumLengths(_ value: UInt16) throws {
		try setFieldValue(fieldNum: SessionMesg.numLengthsFieldNum, value: value)
	}

	public func getNormalizedPower() -> UInt16? {
		guard let value = getFieldValue(fieldNum: SessionMesg.normalizedPowerFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setNormalizedPower(_ value: UInt16) throws {
		try setFieldValue(fieldNum: SessionMesg.normalizedPowerFieldNum, value: value)
	}

	public func getTrainingStressScore() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.trainingStressScoreFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTrainingStressScore(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.trainingStressScoreFieldNum, value: value)
	}

	public func getIntensityFactor() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.intensityFactorFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setIntensityFactor(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.intensityFactorFieldNum, value: value)
	}

	public func getLeftRightBalance() -> LeftRightBalance100? {
		guard let value = getFieldValue(fieldNum: SessionMesg.leftRightBalanceFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return LeftRightBalance100(rawValue: value) ?? .invalid
	}

	public func setLeftRightBalance(_ value: LeftRightBalance100) throws {
		try setFieldValue(fieldNum: SessionMesg.leftRightBalanceFieldNum, value: value.rawValue)
	}

	public func getEndPositionLat() -> Int32? {
		guard let value = getFieldValue(fieldNum: SessionMesg.endPositionLatFieldNum, index:0) as? Int32 else {
            return nil
        }
		return value
	}

	public func setEndPositionLat(_ value: Int32) throws {
		try setFieldValue(fieldNum: SessionMesg.endPositionLatFieldNum, value: value)
	}

	public func getEndPositionLong() -> Int32? {
		guard let value = getFieldValue(fieldNum: SessionMesg.endPositionLongFieldNum, index:0) as? Int32 else {
            return nil
        }
		return value
	}

	public func setEndPositionLong(_ value: Int32) throws {
		try setFieldValue(fieldNum: SessionMesg.endPositionLongFieldNum, value: value)
	}

	public func getAvgStrokeCount() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.avgStrokeCountFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgStrokeCount(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.avgStrokeCountFieldNum, value: value)
	}

	public func getAvgStrokeDistance() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.avgStrokeDistanceFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgStrokeDistance(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.avgStrokeDistanceFieldNum, value: value)
	}

	public func getSwimStroke() -> SwimStroke? {
		guard let value = getFieldValue(fieldNum: SessionMesg.swimStrokeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return SwimStroke(rawValue: value) ?? .invalid
	}

	public func setSwimStroke(_ value: SwimStroke) throws {
		try setFieldValue(fieldNum: SessionMesg.swimStrokeFieldNum, value: value.rawValue)
	}

	public func getPoolLength() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.poolLengthFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setPoolLength(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.poolLengthFieldNum, value: value)
	}

	public func getThresholdPower() -> UInt16? {
		guard let value = getFieldValue(fieldNum: SessionMesg.thresholdPowerFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setThresholdPower(_ value: UInt16) throws {
		try setFieldValue(fieldNum: SessionMesg.thresholdPowerFieldNum, value: value)
	}

	public func getPoolLengthUnit() -> DisplayMeasure? {
		guard let value = getFieldValue(fieldNum: SessionMesg.poolLengthUnitFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return DisplayMeasure(rawValue: value) ?? .invalid
	}

	public func setPoolLengthUnit(_ value: DisplayMeasure) throws {
		try setFieldValue(fieldNum: SessionMesg.poolLengthUnitFieldNum, value: value.rawValue)
	}

	public func getNumActiveLengths() -> UInt16? {
		guard let value = getFieldValue(fieldNum: SessionMesg.numActiveLengthsFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setNumActiveLengths(_ value: UInt16) throws {
		try setFieldValue(fieldNum: SessionMesg.numActiveLengthsFieldNum, value: value)
	}

	public func getTotalWork() -> UInt32? {
		guard let value = getFieldValue(fieldNum: SessionMesg.totalWorkFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setTotalWork(_ value: UInt32) throws {
		try setFieldValue(fieldNum: SessionMesg.totalWorkFieldNum, value: value)
	}

	public func getAvgAltitude() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.avgAltitudeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgAltitude(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.avgAltitudeFieldNum, value: value)
	}

	public func getMaxAltitude() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.maxAltitudeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setMaxAltitude(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.maxAltitudeFieldNum, value: value)
	}

	public func getGpsAccuracy() -> UInt8? {
		guard let value = getFieldValue(fieldNum: SessionMesg.gpsAccuracyFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setGpsAccuracy(_ value: UInt8) throws {
		try setFieldValue(fieldNum: SessionMesg.gpsAccuracyFieldNum, value: value)
	}

	public func getAvgGrade() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.avgGradeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgGrade(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.avgGradeFieldNum, value: value)
	}

	public func getAvgPosGrade() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.avgPosGradeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgPosGrade(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.avgPosGradeFieldNum, value: value)
	}

	public func getAvgNegGrade() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.avgNegGradeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgNegGrade(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.avgNegGradeFieldNum, value: value)
	}

	public func getMaxPosGrade() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.maxPosGradeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setMaxPosGrade(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.maxPosGradeFieldNum, value: value)
	}

	public func getMaxNegGrade() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.maxNegGradeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setMaxNegGrade(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.maxNegGradeFieldNum, value: value)
	}

	public func getAvgTemperature() -> Int8? {
		guard let value = getFieldValue(fieldNum: SessionMesg.avgTemperatureFieldNum, index:0) as? Int8 else {
            return nil
        }
		return value
	}

	public func setAvgTemperature(_ value: Int8) throws {
		try setFieldValue(fieldNum: SessionMesg.avgTemperatureFieldNum, value: value)
	}

	public func getMaxTemperature() -> Int8? {
		guard let value = getFieldValue(fieldNum: SessionMesg.maxTemperatureFieldNum, index:0) as? Int8 else {
            return nil
        }
		return value
	}

	public func setMaxTemperature(_ value: Int8) throws {
		try setFieldValue(fieldNum: SessionMesg.maxTemperatureFieldNum, value: value)
	}

	public func getTotalMovingTime() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.totalMovingTimeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTotalMovingTime(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.totalMovingTimeFieldNum, value: value)
	}

	public func getAvgPosVerticalSpeed() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.avgPosVerticalSpeedFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgPosVerticalSpeed(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.avgPosVerticalSpeedFieldNum, value: value)
	}

	public func getAvgNegVerticalSpeed() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.avgNegVerticalSpeedFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgNegVerticalSpeed(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.avgNegVerticalSpeedFieldNum, value: value)
	}

	public func getMaxPosVerticalSpeed() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.maxPosVerticalSpeedFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setMaxPosVerticalSpeed(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.maxPosVerticalSpeedFieldNum, value: value)
	}

	public func getMaxNegVerticalSpeed() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.maxNegVerticalSpeedFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setMaxNegVerticalSpeed(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.maxNegVerticalSpeedFieldNum, value: value)
	}

	public func getMinHeartRate() -> UInt8? {
		guard let value = getFieldValue(fieldNum: SessionMesg.minHeartRateFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setMinHeartRate(_ value: UInt8) throws {
		try setFieldValue(fieldNum: SessionMesg.minHeartRateFieldNum, value: value)
	}

	public func getNumTimeInHrZone() -> UInt8 {
		guard let field = getField(fieldNum: SessionMesg.timeInHrZoneFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getTimeInHrZone() -> [Float64?]? {
		guard let field = getField(fieldNum: SessionMesg.timeInHrZoneFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getTimeInHrZone(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.timeInHrZoneFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTimeInHrZone(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.timeInHrZoneFieldNum, value: value, index: index)
	}

	public func getNumTimeInSpeedZone() -> UInt8 {
		guard let field = getField(fieldNum: SessionMesg.timeInSpeedZoneFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getTimeInSpeedZone() -> [Float64?]? {
		guard let field = getField(fieldNum: SessionMesg.timeInSpeedZoneFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getTimeInSpeedZone(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.timeInSpeedZoneFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTimeInSpeedZone(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.timeInSpeedZoneFieldNum, value: value, index: index)
	}

	public func getNumTimeInCadenceZone() -> UInt8 {
		guard let field = getField(fieldNum: SessionMesg.timeInCadenceZoneFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getTimeInCadenceZone() -> [Float64?]? {
		guard let field = getField(fieldNum: SessionMesg.timeInCadenceZoneFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getTimeInCadenceZone(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.timeInCadenceZoneFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTimeInCadenceZone(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.timeInCadenceZoneFieldNum, value: value, index: index)
	}

	public func getNumTimeInPowerZone() -> UInt8 {
		guard let field = getField(fieldNum: SessionMesg.timeInPowerZoneFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getTimeInPowerZone() -> [Float64?]? {
		guard let field = getField(fieldNum: SessionMesg.timeInPowerZoneFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getTimeInPowerZone(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.timeInPowerZoneFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTimeInPowerZone(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.timeInPowerZoneFieldNum, value: value, index: index)
	}

	public func getAvgLapTime() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.avgLapTimeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgLapTime(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.avgLapTimeFieldNum, value: value)
	}

	public func getBestLapIndex() -> UInt16? {
		guard let value = getFieldValue(fieldNum: SessionMesg.bestLapIndexFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setBestLapIndex(_ value: UInt16) throws {
		try setFieldValue(fieldNum: SessionMesg.bestLapIndexFieldNum, value: value)
	}

	public func getMinAltitude() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.minAltitudeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setMinAltitude(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.minAltitudeFieldNum, value: value)
	}

	public func getPlayerScore() -> UInt16? {
		guard let value = getFieldValue(fieldNum: SessionMesg.playerScoreFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setPlayerScore(_ value: UInt16) throws {
		try setFieldValue(fieldNum: SessionMesg.playerScoreFieldNum, value: value)
	}

	public func getOpponentScore() -> UInt16? {
		guard let value = getFieldValue(fieldNum: SessionMesg.opponentScoreFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setOpponentScore(_ value: UInt16) throws {
		try setFieldValue(fieldNum: SessionMesg.opponentScoreFieldNum, value: value)
	}

	public func getOpponentName() -> String? {
		guard let value = getFieldValue(fieldNum: SessionMesg.opponentNameFieldNum, index:0) as? String else {
            return nil
        }
		return value
	}

	public func setOpponentName(_ value: String) throws {
		try setFieldValue(fieldNum: SessionMesg.opponentNameFieldNum, value: value)
	}

	public func getNumStrokeCount() -> UInt8 {
		guard let field = getField(fieldNum: SessionMesg.strokeCountFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getStrokeCount() -> [UInt16?]? {
		guard let field = getField(fieldNum: SessionMesg.strokeCountFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt16?]
	}

	public func getStrokeCount(index: Int) -> UInt16? {
		guard let value = getFieldValue(fieldNum: SessionMesg.strokeCountFieldNum, index: index) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setStrokeCount(index: Int, value: UInt16) throws {
		try setFieldValue(fieldNum: SessionMesg.strokeCountFieldNum, value: value, index: index)
	}

	public func getNumZoneCount() -> UInt8 {
		guard let field = getField(fieldNum: SessionMesg.zoneCountFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getZoneCount() -> [UInt16?]? {
		guard let field = getField(fieldNum: SessionMesg.zoneCountFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt16?]
	}

	public func getZoneCount(index: Int) -> UInt16? {
		guard let value = getFieldValue(fieldNum: SessionMesg.zoneCountFieldNum, index: index) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setZoneCount(index: Int, value: UInt16) throws {
		try setFieldValue(fieldNum: SessionMesg.zoneCountFieldNum, value: value, index: index)
	}

	public func getMaxBallSpeed() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.maxBallSpeedFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setMaxBallSpeed(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.maxBallSpeedFieldNum, value: value)
	}

	public func getAvgBallSpeed() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.avgBallSpeedFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgBallSpeed(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.avgBallSpeedFieldNum, value: value)
	}

	public func getAvgVerticalOscillation() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.avgVerticalOscillationFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgVerticalOscillation(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.avgVerticalOscillationFieldNum, value: value)
	}

	public func getAvgStanceTimePercent() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.avgStanceTimePercentFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgStanceTimePercent(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.avgStanceTimePercentFieldNum, value: value)
	}

	public func getAvgStanceTime() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.avgStanceTimeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgStanceTime(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.avgStanceTimeFieldNum, value: value)
	}

	public func getAvgFractionalCadence() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.avgFractionalCadenceFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgFractionalCadence(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.avgFractionalCadenceFieldNum, value: value)
	}

	public func getMaxFractionalCadence() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.maxFractionalCadenceFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setMaxFractionalCadence(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.maxFractionalCadenceFieldNum, value: value)
	}

	public func getTotalFractionalCycles() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.totalFractionalCyclesFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTotalFractionalCycles(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.totalFractionalCyclesFieldNum, value: value)
	}

	public func getNumAvgTotalHemoglobinConc() -> UInt8 {
		guard let field = getField(fieldNum: SessionMesg.avgTotalHemoglobinConcFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getAvgTotalHemoglobinConc() -> [Float64?]? {
		guard let field = getField(fieldNum: SessionMesg.avgTotalHemoglobinConcFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getAvgTotalHemoglobinConc(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.avgTotalHemoglobinConcFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgTotalHemoglobinConc(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.avgTotalHemoglobinConcFieldNum, value: value, index: index)
	}

	public func getNumMinTotalHemoglobinConc() -> UInt8 {
		guard let field = getField(fieldNum: SessionMesg.minTotalHemoglobinConcFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getMinTotalHemoglobinConc() -> [Float64?]? {
		guard let field = getField(fieldNum: SessionMesg.minTotalHemoglobinConcFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getMinTotalHemoglobinConc(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.minTotalHemoglobinConcFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setMinTotalHemoglobinConc(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.minTotalHemoglobinConcFieldNum, value: value, index: index)
	}

	public func getNumMaxTotalHemoglobinConc() -> UInt8 {
		guard let field = getField(fieldNum: SessionMesg.maxTotalHemoglobinConcFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getMaxTotalHemoglobinConc() -> [Float64?]? {
		guard let field = getField(fieldNum: SessionMesg.maxTotalHemoglobinConcFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getMaxTotalHemoglobinConc(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.maxTotalHemoglobinConcFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setMaxTotalHemoglobinConc(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.maxTotalHemoglobinConcFieldNum, value: value, index: index)
	}

	public func getNumAvgSaturatedHemoglobinPercent() -> UInt8 {
		guard let field = getField(fieldNum: SessionMesg.avgSaturatedHemoglobinPercentFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getAvgSaturatedHemoglobinPercent() -> [Float64?]? {
		guard let field = getField(fieldNum: SessionMesg.avgSaturatedHemoglobinPercentFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getAvgSaturatedHemoglobinPercent(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.avgSaturatedHemoglobinPercentFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgSaturatedHemoglobinPercent(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.avgSaturatedHemoglobinPercentFieldNum, value: value, index: index)
	}

	public func getNumMinSaturatedHemoglobinPercent() -> UInt8 {
		guard let field = getField(fieldNum: SessionMesg.minSaturatedHemoglobinPercentFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getMinSaturatedHemoglobinPercent() -> [Float64?]? {
		guard let field = getField(fieldNum: SessionMesg.minSaturatedHemoglobinPercentFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getMinSaturatedHemoglobinPercent(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.minSaturatedHemoglobinPercentFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setMinSaturatedHemoglobinPercent(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.minSaturatedHemoglobinPercentFieldNum, value: value, index: index)
	}

	public func getNumMaxSaturatedHemoglobinPercent() -> UInt8 {
		guard let field = getField(fieldNum: SessionMesg.maxSaturatedHemoglobinPercentFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getMaxSaturatedHemoglobinPercent() -> [Float64?]? {
		guard let field = getField(fieldNum: SessionMesg.maxSaturatedHemoglobinPercentFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getMaxSaturatedHemoglobinPercent(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.maxSaturatedHemoglobinPercentFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setMaxSaturatedHemoglobinPercent(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.maxSaturatedHemoglobinPercentFieldNum, value: value, index: index)
	}

	public func getAvgLeftTorqueEffectiveness() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.avgLeftTorqueEffectivenessFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgLeftTorqueEffectiveness(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.avgLeftTorqueEffectivenessFieldNum, value: value)
	}

	public func getAvgRightTorqueEffectiveness() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.avgRightTorqueEffectivenessFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgRightTorqueEffectiveness(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.avgRightTorqueEffectivenessFieldNum, value: value)
	}

	public func getAvgLeftPedalSmoothness() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.avgLeftPedalSmoothnessFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgLeftPedalSmoothness(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.avgLeftPedalSmoothnessFieldNum, value: value)
	}

	public func getAvgRightPedalSmoothness() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.avgRightPedalSmoothnessFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgRightPedalSmoothness(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.avgRightPedalSmoothnessFieldNum, value: value)
	}

	public func getAvgCombinedPedalSmoothness() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.avgCombinedPedalSmoothnessFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgCombinedPedalSmoothness(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.avgCombinedPedalSmoothnessFieldNum, value: value)
	}

	public func getSportProfileName() -> String? {
		guard let value = getFieldValue(fieldNum: SessionMesg.sportProfileNameFieldNum, index:0) as? String else {
            return nil
        }
		return value
	}

	public func setSportProfileName(_ value: String) throws {
		try setFieldValue(fieldNum: SessionMesg.sportProfileNameFieldNum, value: value)
	}

	public func getSportIndex() -> UInt8? {
		guard let value = getFieldValue(fieldNum: SessionMesg.sportIndexFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setSportIndex(_ value: UInt8) throws {
		try setFieldValue(fieldNum: SessionMesg.sportIndexFieldNum, value: value)
	}

	public func getTimeStanding() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.timeStandingFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTimeStanding(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.timeStandingFieldNum, value: value)
	}

	public func getStandCount() -> UInt16? {
		guard let value = getFieldValue(fieldNum: SessionMesg.standCountFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setStandCount(_ value: UInt16) throws {
		try setFieldValue(fieldNum: SessionMesg.standCountFieldNum, value: value)
	}

	public func getAvgLeftPco() -> Int8? {
		guard let value = getFieldValue(fieldNum: SessionMesg.avgLeftPcoFieldNum, index:0) as? Int8 else {
            return nil
        }
		return value
	}

	public func setAvgLeftPco(_ value: Int8) throws {
		try setFieldValue(fieldNum: SessionMesg.avgLeftPcoFieldNum, value: value)
	}

	public func getAvgRightPco() -> Int8? {
		guard let value = getFieldValue(fieldNum: SessionMesg.avgRightPcoFieldNum, index:0) as? Int8 else {
            return nil
        }
		return value
	}

	public func setAvgRightPco(_ value: Int8) throws {
		try setFieldValue(fieldNum: SessionMesg.avgRightPcoFieldNum, value: value)
	}

	public func getNumAvgLeftPowerPhase() -> UInt8 {
		guard let field = getField(fieldNum: SessionMesg.avgLeftPowerPhaseFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getAvgLeftPowerPhase() -> [Float64?]? {
		guard let field = getField(fieldNum: SessionMesg.avgLeftPowerPhaseFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getAvgLeftPowerPhase(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.avgLeftPowerPhaseFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgLeftPowerPhase(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.avgLeftPowerPhaseFieldNum, value: value, index: index)
	}

	public func getNumAvgLeftPowerPhasePeak() -> UInt8 {
		guard let field = getField(fieldNum: SessionMesg.avgLeftPowerPhasePeakFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getAvgLeftPowerPhasePeak() -> [Float64?]? {
		guard let field = getField(fieldNum: SessionMesg.avgLeftPowerPhasePeakFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getAvgLeftPowerPhasePeak(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.avgLeftPowerPhasePeakFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgLeftPowerPhasePeak(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.avgLeftPowerPhasePeakFieldNum, value: value, index: index)
	}

	public func getNumAvgRightPowerPhase() -> UInt8 {
		guard let field = getField(fieldNum: SessionMesg.avgRightPowerPhaseFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getAvgRightPowerPhase() -> [Float64?]? {
		guard let field = getField(fieldNum: SessionMesg.avgRightPowerPhaseFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getAvgRightPowerPhase(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.avgRightPowerPhaseFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgRightPowerPhase(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.avgRightPowerPhaseFieldNum, value: value, index: index)
	}

	public func getNumAvgRightPowerPhasePeak() -> UInt8 {
		guard let field = getField(fieldNum: SessionMesg.avgRightPowerPhasePeakFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getAvgRightPowerPhasePeak() -> [Float64?]? {
		guard let field = getField(fieldNum: SessionMesg.avgRightPowerPhasePeakFieldNum) else {
			return nil
		}
		return field.toArray() as [Float64?]
	}

	public func getAvgRightPowerPhasePeak(index: Int) -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.avgRightPowerPhasePeakFieldNum, index: index) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgRightPowerPhasePeak(index: Int, value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.avgRightPowerPhasePeakFieldNum, value: value, index: index)
	}

	public func getNumAvgPowerPosition() -> UInt8 {
		guard let field = getField(fieldNum: SessionMesg.avgPowerPositionFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getAvgPowerPosition() -> [UInt16?]? {
		guard let field = getField(fieldNum: SessionMesg.avgPowerPositionFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt16?]
	}

	public func getAvgPowerPosition(index: Int) -> UInt16? {
		guard let value = getFieldValue(fieldNum: SessionMesg.avgPowerPositionFieldNum, index: index) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setAvgPowerPosition(index: Int, value: UInt16) throws {
		try setFieldValue(fieldNum: SessionMesg.avgPowerPositionFieldNum, value: value, index: index)
	}

	public func getNumMaxPowerPosition() -> UInt8 {
		guard let field = getField(fieldNum: SessionMesg.maxPowerPositionFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getMaxPowerPosition() -> [UInt16?]? {
		guard let field = getField(fieldNum: SessionMesg.maxPowerPositionFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt16?]
	}

	public func getMaxPowerPosition(index: Int) -> UInt16? {
		guard let value = getFieldValue(fieldNum: SessionMesg.maxPowerPositionFieldNum, index: index) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setMaxPowerPosition(index: Int, value: UInt16) throws {
		try setFieldValue(fieldNum: SessionMesg.maxPowerPositionFieldNum, value: value, index: index)
	}

	public func getNumAvgCadencePosition() -> UInt8 {
		guard let field = getField(fieldNum: SessionMesg.avgCadencePositionFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getAvgCadencePosition() -> [UInt8?]? {
		guard let field = getField(fieldNum: SessionMesg.avgCadencePositionFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt8?]
	}

	public func getAvgCadencePosition(index: Int) -> UInt8? {
		guard let value = getFieldValue(fieldNum: SessionMesg.avgCadencePositionFieldNum, index: index) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setAvgCadencePosition(index: Int, value: UInt8) throws {
		try setFieldValue(fieldNum: SessionMesg.avgCadencePositionFieldNum, value: value, index: index)
	}

	public func getNumMaxCadencePosition() -> UInt8 {
		guard let field = getField(fieldNum: SessionMesg.maxCadencePositionFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getMaxCadencePosition() -> [UInt8?]? {
		guard let field = getField(fieldNum: SessionMesg.maxCadencePositionFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt8?]
	}

	public func getMaxCadencePosition(index: Int) -> UInt8? {
		guard let value = getFieldValue(fieldNum: SessionMesg.maxCadencePositionFieldNum, index: index) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setMaxCadencePosition(index: Int, value: UInt8) throws {
		try setFieldValue(fieldNum: SessionMesg.maxCadencePositionFieldNum, value: value, index: index)
	}

	public func getEnhancedAvgSpeed() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.enhancedAvgSpeedFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setEnhancedAvgSpeed(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.enhancedAvgSpeedFieldNum, value: value)
	}

	public func getEnhancedMaxSpeed() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.enhancedMaxSpeedFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setEnhancedMaxSpeed(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.enhancedMaxSpeedFieldNum, value: value)
	}

	public func getEnhancedAvgAltitude() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.enhancedAvgAltitudeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setEnhancedAvgAltitude(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.enhancedAvgAltitudeFieldNum, value: value)
	}

	public func getEnhancedMinAltitude() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.enhancedMinAltitudeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setEnhancedMinAltitude(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.enhancedMinAltitudeFieldNum, value: value)
	}

	public func getEnhancedMaxAltitude() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.enhancedMaxAltitudeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setEnhancedMaxAltitude(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.enhancedMaxAltitudeFieldNum, value: value)
	}

	public func getAvgLevMotorPower() -> UInt16? {
		guard let value = getFieldValue(fieldNum: SessionMesg.avgLevMotorPowerFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setAvgLevMotorPower(_ value: UInt16) throws {
		try setFieldValue(fieldNum: SessionMesg.avgLevMotorPowerFieldNum, value: value)
	}

	public func getMaxLevMotorPower() -> UInt16? {
		guard let value = getFieldValue(fieldNum: SessionMesg.maxLevMotorPowerFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setMaxLevMotorPower(_ value: UInt16) throws {
		try setFieldValue(fieldNum: SessionMesg.maxLevMotorPowerFieldNum, value: value)
	}

	public func getLevBatteryConsumption() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.levBatteryConsumptionFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setLevBatteryConsumption(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.levBatteryConsumptionFieldNum, value: value)
	}

	public func getAvgVerticalRatio() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.avgVerticalRatioFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgVerticalRatio(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.avgVerticalRatioFieldNum, value: value)
	}

	public func getAvgStanceTimeBalance() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.avgStanceTimeBalanceFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgStanceTimeBalance(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.avgStanceTimeBalanceFieldNum, value: value)
	}

	public func getAvgStepLength() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.avgStepLengthFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgStepLength(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.avgStepLengthFieldNum, value: value)
	}

	public func getTotalAnaerobicTrainingEffect() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.totalAnaerobicTrainingEffectFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTotalAnaerobicTrainingEffect(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.totalAnaerobicTrainingEffectFieldNum, value: value)
	}

	public func getAvgVam() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.avgVamFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgVam(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.avgVamFieldNum, value: value)
	}

	public func getAvgDepth() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.avgDepthFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgDepth(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.avgDepthFieldNum, value: value)
	}

	public func getMaxDepth() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.maxDepthFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setMaxDepth(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.maxDepthFieldNum, value: value)
	}

	public func getSurfaceInterval() -> UInt32? {
		guard let value = getFieldValue(fieldNum: SessionMesg.surfaceIntervalFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setSurfaceInterval(_ value: UInt32) throws {
		try setFieldValue(fieldNum: SessionMesg.surfaceIntervalFieldNum, value: value)
	}

	public func getStartCns() -> UInt8? {
		guard let value = getFieldValue(fieldNum: SessionMesg.startCnsFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setStartCns(_ value: UInt8) throws {
		try setFieldValue(fieldNum: SessionMesg.startCnsFieldNum, value: value)
	}

	public func getEndCns() -> UInt8? {
		guard let value = getFieldValue(fieldNum: SessionMesg.endCnsFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setEndCns(_ value: UInt8) throws {
		try setFieldValue(fieldNum: SessionMesg.endCnsFieldNum, value: value)
	}

	public func getStartN2() -> UInt16? {
		guard let value = getFieldValue(fieldNum: SessionMesg.startN2FieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setStartN2(_ value: UInt16) throws {
		try setFieldValue(fieldNum: SessionMesg.startN2FieldNum, value: value)
	}

	public func getEndN2() -> UInt16? {
		guard let value = getFieldValue(fieldNum: SessionMesg.endN2FieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setEndN2(_ value: UInt16) throws {
		try setFieldValue(fieldNum: SessionMesg.endN2FieldNum, value: value)
	}

	public func getAvgRespirationRate() -> UInt8? {
		guard let value = getFieldValue(fieldNum: SessionMesg.avgRespirationRateFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setAvgRespirationRate(_ value: UInt8) throws {
		try setFieldValue(fieldNum: SessionMesg.avgRespirationRateFieldNum, value: value)
	}

	public func getMaxRespirationRate() -> UInt8? {
		guard let value = getFieldValue(fieldNum: SessionMesg.maxRespirationRateFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setMaxRespirationRate(_ value: UInt8) throws {
		try setFieldValue(fieldNum: SessionMesg.maxRespirationRateFieldNum, value: value)
	}

	public func getMinRespirationRate() -> UInt8? {
		guard let value = getFieldValue(fieldNum: SessionMesg.minRespirationRateFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setMinRespirationRate(_ value: UInt8) throws {
		try setFieldValue(fieldNum: SessionMesg.minRespirationRateFieldNum, value: value)
	}

	public func getMinTemperature() -> Int8? {
		guard let value = getFieldValue(fieldNum: SessionMesg.minTemperatureFieldNum, index:0) as? Int8 else {
            return nil
        }
		return value
	}

	public func setMinTemperature(_ value: Int8) throws {
		try setFieldValue(fieldNum: SessionMesg.minTemperatureFieldNum, value: value)
	}

	public func getO2Toxicity() -> UInt16? {
		guard let value = getFieldValue(fieldNum: SessionMesg.o2ToxicityFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setO2Toxicity(_ value: UInt16) throws {
		try setFieldValue(fieldNum: SessionMesg.o2ToxicityFieldNum, value: value)
	}

	public func getDiveNumber() -> UInt32? {
		guard let value = getFieldValue(fieldNum: SessionMesg.diveNumberFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setDiveNumber(_ value: UInt32) throws {
		try setFieldValue(fieldNum: SessionMesg.diveNumberFieldNum, value: value)
	}

	public func getTrainingLoadPeak() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.trainingLoadPeakFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTrainingLoadPeak(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.trainingLoadPeakFieldNum, value: value)
	}

	public func getEnhancedAvgRespirationRate() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.enhancedAvgRespirationRateFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setEnhancedAvgRespirationRate(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.enhancedAvgRespirationRateFieldNum, value: value)
	}

	public func getEnhancedMaxRespirationRate() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.enhancedMaxRespirationRateFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setEnhancedMaxRespirationRate(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.enhancedMaxRespirationRateFieldNum, value: value)
	}

	public func getEnhancedMinRespirationRate() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.enhancedMinRespirationRateFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setEnhancedMinRespirationRate(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.enhancedMinRespirationRateFieldNum, value: value)
	}

	public func getTotalGrit() -> Float32? {
		guard let value = getFieldValue(fieldNum: SessionMesg.totalGritFieldNum, index:0) as? Float32 else {
            return nil
        }
		return value
	}

	public func setTotalGrit(_ value: Float32) throws {
		try setFieldValue(fieldNum: SessionMesg.totalGritFieldNum, value: value)
	}

	public func getTotalFlow() -> Float32? {
		guard let value = getFieldValue(fieldNum: SessionMesg.totalFlowFieldNum, index:0) as? Float32 else {
            return nil
        }
		return value
	}

	public func setTotalFlow(_ value: Float32) throws {
		try setFieldValue(fieldNum: SessionMesg.totalFlowFieldNum, value: value)
	}

	public func getJumpCount() -> UInt16? {
		guard let value = getFieldValue(fieldNum: SessionMesg.jumpCountFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setJumpCount(_ value: UInt16) throws {
		try setFieldValue(fieldNum: SessionMesg.jumpCountFieldNum, value: value)
	}

	public func getAvgGrit() -> Float32? {
		guard let value = getFieldValue(fieldNum: SessionMesg.avgGritFieldNum, index:0) as? Float32 else {
            return nil
        }
		return value
	}

	public func setAvgGrit(_ value: Float32) throws {
		try setFieldValue(fieldNum: SessionMesg.avgGritFieldNum, value: value)
	}

	public func getAvgFlow() -> Float32? {
		guard let value = getFieldValue(fieldNum: SessionMesg.avgFlowFieldNum, index:0) as? Float32 else {
            return nil
        }
		return value
	}

	public func setAvgFlow(_ value: Float32) throws {
		try setFieldValue(fieldNum: SessionMesg.avgFlowFieldNum, value: value)
	}

	public func getWorkoutFeel() -> UInt8? {
		guard let value = getFieldValue(fieldNum: SessionMesg.workoutFeelFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setWorkoutFeel(_ value: UInt8) throws {
		try setFieldValue(fieldNum: SessionMesg.workoutFeelFieldNum, value: value)
	}

	public func getWorkoutRpe() -> UInt8? {
		guard let value = getFieldValue(fieldNum: SessionMesg.workoutRpeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setWorkoutRpe(_ value: UInt8) throws {
		try setFieldValue(fieldNum: SessionMesg.workoutRpeFieldNum, value: value)
	}

	public func getAvgSpo2() -> UInt8? {
		guard let value = getFieldValue(fieldNum: SessionMesg.avgSpo2FieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setAvgSpo2(_ value: UInt8) throws {
		try setFieldValue(fieldNum: SessionMesg.avgSpo2FieldNum, value: value)
	}

	public func getAvgStress() -> UInt8? {
		guard let value = getFieldValue(fieldNum: SessionMesg.avgStressFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setAvgStress(_ value: UInt8) throws {
		try setFieldValue(fieldNum: SessionMesg.avgStressFieldNum, value: value)
	}

	public func getSdrrHrv() -> UInt8? {
		guard let value = getFieldValue(fieldNum: SessionMesg.sdrrHrvFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setSdrrHrv(_ value: UInt8) throws {
		try setFieldValue(fieldNum: SessionMesg.sdrrHrvFieldNum, value: value)
	}

	public func getRmssdHrv() -> UInt8? {
		guard let value = getFieldValue(fieldNum: SessionMesg.rmssdHrvFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setRmssdHrv(_ value: UInt8) throws {
		try setFieldValue(fieldNum: SessionMesg.rmssdHrvFieldNum, value: value)
	}

	public func getTotalFractionalAscent() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.totalFractionalAscentFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTotalFractionalAscent(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.totalFractionalAscentFieldNum, value: value)
	}

	public func getTotalFractionalDescent() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.totalFractionalDescentFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTotalFractionalDescent(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.totalFractionalDescentFieldNum, value: value)
	}

	public func getAvgCoreTemperature() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.avgCoreTemperatureFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setAvgCoreTemperature(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.avgCoreTemperatureFieldNum, value: value)
	}

	public func getMinCoreTemperature() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.minCoreTemperatureFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setMinCoreTemperature(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.minCoreTemperatureFieldNum, value: value)
	}

	public func getMaxCoreTemperature() -> Float64? {
		guard let value = getFieldValue(fieldNum: SessionMesg.maxCoreTemperatureFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setMaxCoreTemperature(_ value: Float64) throws {
		try setFieldValue(fieldNum: SessionMesg.maxCoreTemperatureFieldNum, value: value)
	}

	public class func createSessionMesg() -> SessionMesg {
        let mesg = SessionMesg(name: "Session", num: Profile.MesgNum.session)
		
		mesg.fields[SessionMesg.messageIndexFieldNum] = Field(name: "MessageIndex", num: SessionMesg.messageIndexFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SessionMesg.timestampFieldNum] = Field(name: "Timestamp", num: SessionMesg.timestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
		mesg.fields[SessionMesg.eventFieldNum] = Field(name: "Event", num: SessionMesg.eventFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SessionMesg.eventTypeFieldNum] = Field(name: "EventType", num: SessionMesg.eventTypeFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SessionMesg.startTimeFieldNum] = Field(name: "StartTime", num: SessionMesg.startTimeFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SessionMesg.startPositionLatFieldNum] = Field(name: "StartPositionLat", num: SessionMesg.startPositionLatFieldNum, type: BaseType.SINT32.rawValue, scale: 1, offset: 0, units: "semicircles", accumulated: false)
		mesg.fields[SessionMesg.startPositionLongFieldNum] = Field(name: "StartPositionLong", num: SessionMesg.startPositionLongFieldNum, type: BaseType.SINT32.rawValue, scale: 1, offset: 0, units: "semicircles", accumulated: false)
		mesg.fields[SessionMesg.sportFieldNum] = Field(name: "Sport", num: SessionMesg.sportFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SessionMesg.subSportFieldNum] = Field(name: "SubSport", num: SessionMesg.subSportFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SessionMesg.totalElapsedTimeFieldNum] = Field(name: "TotalElapsedTime", num: SessionMesg.totalElapsedTimeFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "s", accumulated: false)
		mesg.fields[SessionMesg.totalTimerTimeFieldNum] = Field(name: "TotalTimerTime", num: SessionMesg.totalTimerTimeFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "s", accumulated: false)
		mesg.fields[SessionMesg.totalDistanceFieldNum] = Field(name: "TotalDistance", num: SessionMesg.totalDistanceFieldNum, type: BaseType.UINT32.rawValue, scale: 100, offset: 0, units: "m", accumulated: false)
		mesg.fields[SessionMesg.totalCyclesFieldNum] = Field(name: "TotalCycles", num: SessionMesg.totalCyclesFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "cycles", accumulated: false)
        mesg.fields[SessionMesg.totalCyclesFieldNum]?.subFields.append(SubField(name: "TotalStrides", type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "strides"))
        mesg.fields[SessionMesg.totalCyclesFieldNum]?.subFields[Int(TotalCyclesSubField.totalStrides)].addMap(refFieldNum: 5, refFieldValue: 1)
        mesg.fields[SessionMesg.totalCyclesFieldNum]?.subFields[Int(TotalCyclesSubField.totalStrides)].addMap(refFieldNum: 5, refFieldValue: 11)
        mesg.fields[SessionMesg.totalCyclesFieldNum]?.subFields.append(SubField(name: "TotalStrokes", type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "strokes"))
        mesg.fields[SessionMesg.totalCyclesFieldNum]?.subFields[Int(TotalCyclesSubField.totalStrokes)].addMap(refFieldNum: 5, refFieldValue: 2)
        mesg.fields[SessionMesg.totalCyclesFieldNum]?.subFields[Int(TotalCyclesSubField.totalStrokes)].addMap(refFieldNum: 5, refFieldValue: 5)
        mesg.fields[SessionMesg.totalCyclesFieldNum]?.subFields[Int(TotalCyclesSubField.totalStrokes)].addMap(refFieldNum: 5, refFieldValue: 15)
        mesg.fields[SessionMesg.totalCyclesFieldNum]?.subFields[Int(TotalCyclesSubField.totalStrokes)].addMap(refFieldNum: 5, refFieldValue: 37)
		mesg.fields[SessionMesg.totalCaloriesFieldNum] = Field(name: "TotalCalories", num: SessionMesg.totalCaloriesFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "kcal", accumulated: false)
		mesg.fields[SessionMesg.totalFatCaloriesFieldNum] = Field(name: "TotalFatCalories", num: SessionMesg.totalFatCaloriesFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "kcal", accumulated: false)
		mesg.fields[SessionMesg.avgSpeedFieldNum] = Field(name: "AvgSpeed", num: SessionMesg.avgSpeedFieldNum, type: BaseType.UINT16.rawValue, scale: 1000, offset: 0, units: "m/s", accumulated: false)
		mesg.fields[SessionMesg.avgSpeedFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: enhancedAvgSpeedFieldNum, accumulated: false, bits: 16, scale: 1000, offset: 0))
		mesg.fields[SessionMesg.maxSpeedFieldNum] = Field(name: "MaxSpeed", num: SessionMesg.maxSpeedFieldNum, type: BaseType.UINT16.rawValue, scale: 1000, offset: 0, units: "m/s", accumulated: false)
		mesg.fields[SessionMesg.maxSpeedFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: enhancedMaxSpeedFieldNum, accumulated: false, bits: 16, scale: 1000, offset: 0))
		mesg.fields[SessionMesg.avgHeartRateFieldNum] = Field(name: "AvgHeartRate", num: SessionMesg.avgHeartRateFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "bpm", accumulated: false)
		mesg.fields[SessionMesg.maxHeartRateFieldNum] = Field(name: "MaxHeartRate", num: SessionMesg.maxHeartRateFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "bpm", accumulated: false)
		mesg.fields[SessionMesg.avgCadenceFieldNum] = Field(name: "AvgCadence", num: SessionMesg.avgCadenceFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "rpm", accumulated: false)
        mesg.fields[SessionMesg.avgCadenceFieldNum]?.subFields.append(SubField(name: "AvgRunningCadence", type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "strides/min"))
        mesg.fields[SessionMesg.avgCadenceFieldNum]?.subFields[Int(AvgCadenceSubField.avgRunningCadence)].addMap(refFieldNum: 5, refFieldValue: 1)
		mesg.fields[SessionMesg.maxCadenceFieldNum] = Field(name: "MaxCadence", num: SessionMesg.maxCadenceFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "rpm", accumulated: false)
        mesg.fields[SessionMesg.maxCadenceFieldNum]?.subFields.append(SubField(name: "MaxRunningCadence", type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "strides/min"))
        mesg.fields[SessionMesg.maxCadenceFieldNum]?.subFields[Int(MaxCadenceSubField.maxRunningCadence)].addMap(refFieldNum: 5, refFieldValue: 1)
		mesg.fields[SessionMesg.avgPowerFieldNum] = Field(name: "AvgPower", num: SessionMesg.avgPowerFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "watts", accumulated: false)
		mesg.fields[SessionMesg.maxPowerFieldNum] = Field(name: "MaxPower", num: SessionMesg.maxPowerFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "watts", accumulated: false)
		mesg.fields[SessionMesg.totalAscentFieldNum] = Field(name: "TotalAscent", num: SessionMesg.totalAscentFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "m", accumulated: false)
		mesg.fields[SessionMesg.totalDescentFieldNum] = Field(name: "TotalDescent", num: SessionMesg.totalDescentFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "m", accumulated: false)
		mesg.fields[SessionMesg.totalTrainingEffectFieldNum] = Field(name: "TotalTrainingEffect", num: SessionMesg.totalTrainingEffectFieldNum, type: BaseType.UINT8.rawValue, scale: 10, offset: 0, units: "", accumulated: false)
		mesg.fields[SessionMesg.firstLapIndexFieldNum] = Field(name: "FirstLapIndex", num: SessionMesg.firstLapIndexFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SessionMesg.numLapsFieldNum] = Field(name: "NumLaps", num: SessionMesg.numLapsFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SessionMesg.eventGroupFieldNum] = Field(name: "EventGroup", num: SessionMesg.eventGroupFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SessionMesg.triggerFieldNum] = Field(name: "Trigger", num: SessionMesg.triggerFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SessionMesg.necLatFieldNum] = Field(name: "NecLat", num: SessionMesg.necLatFieldNum, type: BaseType.SINT32.rawValue, scale: 1, offset: 0, units: "semicircles", accumulated: false)
		mesg.fields[SessionMesg.necLongFieldNum] = Field(name: "NecLong", num: SessionMesg.necLongFieldNum, type: BaseType.SINT32.rawValue, scale: 1, offset: 0, units: "semicircles", accumulated: false)
		mesg.fields[SessionMesg.swcLatFieldNum] = Field(name: "SwcLat", num: SessionMesg.swcLatFieldNum, type: BaseType.SINT32.rawValue, scale: 1, offset: 0, units: "semicircles", accumulated: false)
		mesg.fields[SessionMesg.swcLongFieldNum] = Field(name: "SwcLong", num: SessionMesg.swcLongFieldNum, type: BaseType.SINT32.rawValue, scale: 1, offset: 0, units: "semicircles", accumulated: false)
		mesg.fields[SessionMesg.numLengthsFieldNum] = Field(name: "NumLengths", num: SessionMesg.numLengthsFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "lengths", accumulated: false)
		mesg.fields[SessionMesg.normalizedPowerFieldNum] = Field(name: "NormalizedPower", num: SessionMesg.normalizedPowerFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "watts", accumulated: false)
		mesg.fields[SessionMesg.trainingStressScoreFieldNum] = Field(name: "TrainingStressScore", num: SessionMesg.trainingStressScoreFieldNum, type: BaseType.UINT16.rawValue, scale: 10, offset: 0, units: "tss", accumulated: false)
		mesg.fields[SessionMesg.intensityFactorFieldNum] = Field(name: "IntensityFactor", num: SessionMesg.intensityFactorFieldNum, type: BaseType.UINT16.rawValue, scale: 1000, offset: 0, units: "if", accumulated: false)
		mesg.fields[SessionMesg.leftRightBalanceFieldNum] = Field(name: "LeftRightBalance", num: SessionMesg.leftRightBalanceFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SessionMesg.endPositionLatFieldNum] = Field(name: "EndPositionLat", num: SessionMesg.endPositionLatFieldNum, type: BaseType.SINT32.rawValue, scale: 1, offset: 0, units: "semicircles", accumulated: false)
		mesg.fields[SessionMesg.endPositionLongFieldNum] = Field(name: "EndPositionLong", num: SessionMesg.endPositionLongFieldNum, type: BaseType.SINT32.rawValue, scale: 1, offset: 0, units: "semicircles", accumulated: false)
		mesg.fields[SessionMesg.avgStrokeCountFieldNum] = Field(name: "AvgStrokeCount", num: SessionMesg.avgStrokeCountFieldNum, type: BaseType.UINT32.rawValue, scale: 10, offset: 0, units: "strokes/lap", accumulated: false)
		mesg.fields[SessionMesg.avgStrokeDistanceFieldNum] = Field(name: "AvgStrokeDistance", num: SessionMesg.avgStrokeDistanceFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "m", accumulated: false)
		mesg.fields[SessionMesg.swimStrokeFieldNum] = Field(name: "SwimStroke", num: SessionMesg.swimStrokeFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "swim_stroke", accumulated: false)
		mesg.fields[SessionMesg.poolLengthFieldNum] = Field(name: "PoolLength", num: SessionMesg.poolLengthFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "m", accumulated: false)
		mesg.fields[SessionMesg.thresholdPowerFieldNum] = Field(name: "ThresholdPower", num: SessionMesg.thresholdPowerFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "watts", accumulated: false)
		mesg.fields[SessionMesg.poolLengthUnitFieldNum] = Field(name: "PoolLengthUnit", num: SessionMesg.poolLengthUnitFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SessionMesg.numActiveLengthsFieldNum] = Field(name: "NumActiveLengths", num: SessionMesg.numActiveLengthsFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "lengths", accumulated: false)
		mesg.fields[SessionMesg.totalWorkFieldNum] = Field(name: "TotalWork", num: SessionMesg.totalWorkFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "J", accumulated: false)
		mesg.fields[SessionMesg.avgAltitudeFieldNum] = Field(name: "AvgAltitude", num: SessionMesg.avgAltitudeFieldNum, type: BaseType.UINT16.rawValue, scale: 5, offset: 500, units: "m", accumulated: false)
		mesg.fields[SessionMesg.avgAltitudeFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: enhancedAvgAltitudeFieldNum, accumulated: false, bits: 16, scale: 5, offset: 500))
		mesg.fields[SessionMesg.maxAltitudeFieldNum] = Field(name: "MaxAltitude", num: SessionMesg.maxAltitudeFieldNum, type: BaseType.UINT16.rawValue, scale: 5, offset: 500, units: "m", accumulated: false)
		mesg.fields[SessionMesg.maxAltitudeFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: enhancedMaxAltitudeFieldNum, accumulated: false, bits: 16, scale: 5, offset: 500))
		mesg.fields[SessionMesg.gpsAccuracyFieldNum] = Field(name: "GpsAccuracy", num: SessionMesg.gpsAccuracyFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "m", accumulated: false)
		mesg.fields[SessionMesg.avgGradeFieldNum] = Field(name: "AvgGrade", num: SessionMesg.avgGradeFieldNum, type: BaseType.SINT16.rawValue, scale: 100, offset: 0, units: "%", accumulated: false)
		mesg.fields[SessionMesg.avgPosGradeFieldNum] = Field(name: "AvgPosGrade", num: SessionMesg.avgPosGradeFieldNum, type: BaseType.SINT16.rawValue, scale: 100, offset: 0, units: "%", accumulated: false)
		mesg.fields[SessionMesg.avgNegGradeFieldNum] = Field(name: "AvgNegGrade", num: SessionMesg.avgNegGradeFieldNum, type: BaseType.SINT16.rawValue, scale: 100, offset: 0, units: "%", accumulated: false)
		mesg.fields[SessionMesg.maxPosGradeFieldNum] = Field(name: "MaxPosGrade", num: SessionMesg.maxPosGradeFieldNum, type: BaseType.SINT16.rawValue, scale: 100, offset: 0, units: "%", accumulated: false)
		mesg.fields[SessionMesg.maxNegGradeFieldNum] = Field(name: "MaxNegGrade", num: SessionMesg.maxNegGradeFieldNum, type: BaseType.SINT16.rawValue, scale: 100, offset: 0, units: "%", accumulated: false)
		mesg.fields[SessionMesg.avgTemperatureFieldNum] = Field(name: "AvgTemperature", num: SessionMesg.avgTemperatureFieldNum, type: BaseType.SINT8.rawValue, scale: 1, offset: 0, units: "C", accumulated: false)
		mesg.fields[SessionMesg.maxTemperatureFieldNum] = Field(name: "MaxTemperature", num: SessionMesg.maxTemperatureFieldNum, type: BaseType.SINT8.rawValue, scale: 1, offset: 0, units: "C", accumulated: false)
		mesg.fields[SessionMesg.totalMovingTimeFieldNum] = Field(name: "TotalMovingTime", num: SessionMesg.totalMovingTimeFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "s", accumulated: false)
		mesg.fields[SessionMesg.avgPosVerticalSpeedFieldNum] = Field(name: "AvgPosVerticalSpeed", num: SessionMesg.avgPosVerticalSpeedFieldNum, type: BaseType.SINT16.rawValue, scale: 1000, offset: 0, units: "m/s", accumulated: false)
		mesg.fields[SessionMesg.avgNegVerticalSpeedFieldNum] = Field(name: "AvgNegVerticalSpeed", num: SessionMesg.avgNegVerticalSpeedFieldNum, type: BaseType.SINT16.rawValue, scale: 1000, offset: 0, units: "m/s", accumulated: false)
		mesg.fields[SessionMesg.maxPosVerticalSpeedFieldNum] = Field(name: "MaxPosVerticalSpeed", num: SessionMesg.maxPosVerticalSpeedFieldNum, type: BaseType.SINT16.rawValue, scale: 1000, offset: 0, units: "m/s", accumulated: false)
		mesg.fields[SessionMesg.maxNegVerticalSpeedFieldNum] = Field(name: "MaxNegVerticalSpeed", num: SessionMesg.maxNegVerticalSpeedFieldNum, type: BaseType.SINT16.rawValue, scale: 1000, offset: 0, units: "m/s", accumulated: false)
		mesg.fields[SessionMesg.minHeartRateFieldNum] = Field(name: "MinHeartRate", num: SessionMesg.minHeartRateFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "bpm", accumulated: false)
		mesg.fields[SessionMesg.timeInHrZoneFieldNum] = Field(name: "TimeInHrZone", num: SessionMesg.timeInHrZoneFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "s", accumulated: false)
		mesg.fields[SessionMesg.timeInSpeedZoneFieldNum] = Field(name: "TimeInSpeedZone", num: SessionMesg.timeInSpeedZoneFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "s", accumulated: false)
		mesg.fields[SessionMesg.timeInCadenceZoneFieldNum] = Field(name: "TimeInCadenceZone", num: SessionMesg.timeInCadenceZoneFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "s", accumulated: false)
		mesg.fields[SessionMesg.timeInPowerZoneFieldNum] = Field(name: "TimeInPowerZone", num: SessionMesg.timeInPowerZoneFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "s", accumulated: false)
		mesg.fields[SessionMesg.avgLapTimeFieldNum] = Field(name: "AvgLapTime", num: SessionMesg.avgLapTimeFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "s", accumulated: false)
		mesg.fields[SessionMesg.bestLapIndexFieldNum] = Field(name: "BestLapIndex", num: SessionMesg.bestLapIndexFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SessionMesg.minAltitudeFieldNum] = Field(name: "MinAltitude", num: SessionMesg.minAltitudeFieldNum, type: BaseType.UINT16.rawValue, scale: 5, offset: 500, units: "m", accumulated: false)
		mesg.fields[SessionMesg.minAltitudeFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: enhancedMinAltitudeFieldNum, accumulated: false, bits: 16, scale: 5, offset: 500))
		mesg.fields[SessionMesg.playerScoreFieldNum] = Field(name: "PlayerScore", num: SessionMesg.playerScoreFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SessionMesg.opponentScoreFieldNum] = Field(name: "OpponentScore", num: SessionMesg.opponentScoreFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SessionMesg.opponentNameFieldNum] = Field(name: "OpponentName", num: SessionMesg.opponentNameFieldNum, type: BaseType.STRING.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SessionMesg.strokeCountFieldNum] = Field(name: "StrokeCount", num: SessionMesg.strokeCountFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "counts", accumulated: false)
		mesg.fields[SessionMesg.zoneCountFieldNum] = Field(name: "ZoneCount", num: SessionMesg.zoneCountFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "counts", accumulated: false)
		mesg.fields[SessionMesg.maxBallSpeedFieldNum] = Field(name: "MaxBallSpeed", num: SessionMesg.maxBallSpeedFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "m/s", accumulated: false)
		mesg.fields[SessionMesg.avgBallSpeedFieldNum] = Field(name: "AvgBallSpeed", num: SessionMesg.avgBallSpeedFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "m/s", accumulated: false)
		mesg.fields[SessionMesg.avgVerticalOscillationFieldNum] = Field(name: "AvgVerticalOscillation", num: SessionMesg.avgVerticalOscillationFieldNum, type: BaseType.UINT16.rawValue, scale: 10, offset: 0, units: "mm", accumulated: false)
		mesg.fields[SessionMesg.avgStanceTimePercentFieldNum] = Field(name: "AvgStanceTimePercent", num: SessionMesg.avgStanceTimePercentFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "percent", accumulated: false)
		mesg.fields[SessionMesg.avgStanceTimeFieldNum] = Field(name: "AvgStanceTime", num: SessionMesg.avgStanceTimeFieldNum, type: BaseType.UINT16.rawValue, scale: 10, offset: 0, units: "ms", accumulated: false)
		mesg.fields[SessionMesg.avgFractionalCadenceFieldNum] = Field(name: "AvgFractionalCadence", num: SessionMesg.avgFractionalCadenceFieldNum, type: BaseType.UINT8.rawValue, scale: 128, offset: 0, units: "rpm", accumulated: false)
		mesg.fields[SessionMesg.maxFractionalCadenceFieldNum] = Field(name: "MaxFractionalCadence", num: SessionMesg.maxFractionalCadenceFieldNum, type: BaseType.UINT8.rawValue, scale: 128, offset: 0, units: "rpm", accumulated: false)
		mesg.fields[SessionMesg.totalFractionalCyclesFieldNum] = Field(name: "TotalFractionalCycles", num: SessionMesg.totalFractionalCyclesFieldNum, type: BaseType.UINT8.rawValue, scale: 128, offset: 0, units: "cycles", accumulated: false)
		mesg.fields[SessionMesg.avgTotalHemoglobinConcFieldNum] = Field(name: "AvgTotalHemoglobinConc", num: SessionMesg.avgTotalHemoglobinConcFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "g/dL", accumulated: false)
		mesg.fields[SessionMesg.minTotalHemoglobinConcFieldNum] = Field(name: "MinTotalHemoglobinConc", num: SessionMesg.minTotalHemoglobinConcFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "g/dL", accumulated: false)
		mesg.fields[SessionMesg.maxTotalHemoglobinConcFieldNum] = Field(name: "MaxTotalHemoglobinConc", num: SessionMesg.maxTotalHemoglobinConcFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "g/dL", accumulated: false)
		mesg.fields[SessionMesg.avgSaturatedHemoglobinPercentFieldNum] = Field(name: "AvgSaturatedHemoglobinPercent", num: SessionMesg.avgSaturatedHemoglobinPercentFieldNum, type: BaseType.UINT16.rawValue, scale: 10, offset: 0, units: "%", accumulated: false)
		mesg.fields[SessionMesg.minSaturatedHemoglobinPercentFieldNum] = Field(name: "MinSaturatedHemoglobinPercent", num: SessionMesg.minSaturatedHemoglobinPercentFieldNum, type: BaseType.UINT16.rawValue, scale: 10, offset: 0, units: "%", accumulated: false)
		mesg.fields[SessionMesg.maxSaturatedHemoglobinPercentFieldNum] = Field(name: "MaxSaturatedHemoglobinPercent", num: SessionMesg.maxSaturatedHemoglobinPercentFieldNum, type: BaseType.UINT16.rawValue, scale: 10, offset: 0, units: "%", accumulated: false)
		mesg.fields[SessionMesg.avgLeftTorqueEffectivenessFieldNum] = Field(name: "AvgLeftTorqueEffectiveness", num: SessionMesg.avgLeftTorqueEffectivenessFieldNum, type: BaseType.UINT8.rawValue, scale: 2, offset: 0, units: "percent", accumulated: false)
		mesg.fields[SessionMesg.avgRightTorqueEffectivenessFieldNum] = Field(name: "AvgRightTorqueEffectiveness", num: SessionMesg.avgRightTorqueEffectivenessFieldNum, type: BaseType.UINT8.rawValue, scale: 2, offset: 0, units: "percent", accumulated: false)
		mesg.fields[SessionMesg.avgLeftPedalSmoothnessFieldNum] = Field(name: "AvgLeftPedalSmoothness", num: SessionMesg.avgLeftPedalSmoothnessFieldNum, type: BaseType.UINT8.rawValue, scale: 2, offset: 0, units: "percent", accumulated: false)
		mesg.fields[SessionMesg.avgRightPedalSmoothnessFieldNum] = Field(name: "AvgRightPedalSmoothness", num: SessionMesg.avgRightPedalSmoothnessFieldNum, type: BaseType.UINT8.rawValue, scale: 2, offset: 0, units: "percent", accumulated: false)
		mesg.fields[SessionMesg.avgCombinedPedalSmoothnessFieldNum] = Field(name: "AvgCombinedPedalSmoothness", num: SessionMesg.avgCombinedPedalSmoothnessFieldNum, type: BaseType.UINT8.rawValue, scale: 2, offset: 0, units: "percent", accumulated: false)
		mesg.fields[SessionMesg.sportProfileNameFieldNum] = Field(name: "SportProfileName", num: SessionMesg.sportProfileNameFieldNum, type: BaseType.STRING.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SessionMesg.sportIndexFieldNum] = Field(name: "SportIndex", num: SessionMesg.sportIndexFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SessionMesg.timeStandingFieldNum] = Field(name: "TimeStanding", num: SessionMesg.timeStandingFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "s", accumulated: false)
		mesg.fields[SessionMesg.standCountFieldNum] = Field(name: "StandCount", num: SessionMesg.standCountFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SessionMesg.avgLeftPcoFieldNum] = Field(name: "AvgLeftPco", num: SessionMesg.avgLeftPcoFieldNum, type: BaseType.SINT8.rawValue, scale: 1, offset: 0, units: "mm", accumulated: false)
		mesg.fields[SessionMesg.avgRightPcoFieldNum] = Field(name: "AvgRightPco", num: SessionMesg.avgRightPcoFieldNum, type: BaseType.SINT8.rawValue, scale: 1, offset: 0, units: "mm", accumulated: false)
		mesg.fields[SessionMesg.avgLeftPowerPhaseFieldNum] = Field(name: "AvgLeftPowerPhase", num: SessionMesg.avgLeftPowerPhaseFieldNum, type: BaseType.UINT8.rawValue, scale: 0.7111111, offset: 0, units: "degrees", accumulated: false)
		mesg.fields[SessionMesg.avgLeftPowerPhasePeakFieldNum] = Field(name: "AvgLeftPowerPhasePeak", num: SessionMesg.avgLeftPowerPhasePeakFieldNum, type: BaseType.UINT8.rawValue, scale: 0.7111111, offset: 0, units: "degrees", accumulated: false)
		mesg.fields[SessionMesg.avgRightPowerPhaseFieldNum] = Field(name: "AvgRightPowerPhase", num: SessionMesg.avgRightPowerPhaseFieldNum, type: BaseType.UINT8.rawValue, scale: 0.7111111, offset: 0, units: "degrees", accumulated: false)
		mesg.fields[SessionMesg.avgRightPowerPhasePeakFieldNum] = Field(name: "AvgRightPowerPhasePeak", num: SessionMesg.avgRightPowerPhasePeakFieldNum, type: BaseType.UINT8.rawValue, scale: 0.7111111, offset: 0, units: "degrees", accumulated: false)
		mesg.fields[SessionMesg.avgPowerPositionFieldNum] = Field(name: "AvgPowerPosition", num: SessionMesg.avgPowerPositionFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "watts", accumulated: false)
		mesg.fields[SessionMesg.maxPowerPositionFieldNum] = Field(name: "MaxPowerPosition", num: SessionMesg.maxPowerPositionFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "watts", accumulated: false)
		mesg.fields[SessionMesg.avgCadencePositionFieldNum] = Field(name: "AvgCadencePosition", num: SessionMesg.avgCadencePositionFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "rpm", accumulated: false)
		mesg.fields[SessionMesg.maxCadencePositionFieldNum] = Field(name: "MaxCadencePosition", num: SessionMesg.maxCadencePositionFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "rpm", accumulated: false)
		mesg.fields[SessionMesg.enhancedAvgSpeedFieldNum] = Field(name: "EnhancedAvgSpeed", num: SessionMesg.enhancedAvgSpeedFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "m/s", accumulated: false)
		mesg.fields[SessionMesg.enhancedMaxSpeedFieldNum] = Field(name: "EnhancedMaxSpeed", num: SessionMesg.enhancedMaxSpeedFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "m/s", accumulated: false)
		mesg.fields[SessionMesg.enhancedAvgAltitudeFieldNum] = Field(name: "EnhancedAvgAltitude", num: SessionMesg.enhancedAvgAltitudeFieldNum, type: BaseType.UINT32.rawValue, scale: 5, offset: 500, units: "m", accumulated: false)
		mesg.fields[SessionMesg.enhancedMinAltitudeFieldNum] = Field(name: "EnhancedMinAltitude", num: SessionMesg.enhancedMinAltitudeFieldNum, type: BaseType.UINT32.rawValue, scale: 5, offset: 500, units: "m", accumulated: false)
		mesg.fields[SessionMesg.enhancedMaxAltitudeFieldNum] = Field(name: "EnhancedMaxAltitude", num: SessionMesg.enhancedMaxAltitudeFieldNum, type: BaseType.UINT32.rawValue, scale: 5, offset: 500, units: "m", accumulated: false)
		mesg.fields[SessionMesg.avgLevMotorPowerFieldNum] = Field(name: "AvgLevMotorPower", num: SessionMesg.avgLevMotorPowerFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "watts", accumulated: false)
		mesg.fields[SessionMesg.maxLevMotorPowerFieldNum] = Field(name: "MaxLevMotorPower", num: SessionMesg.maxLevMotorPowerFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "watts", accumulated: false)
		mesg.fields[SessionMesg.levBatteryConsumptionFieldNum] = Field(name: "LevBatteryConsumption", num: SessionMesg.levBatteryConsumptionFieldNum, type: BaseType.UINT8.rawValue, scale: 2, offset: 0, units: "percent", accumulated: false)
		mesg.fields[SessionMesg.avgVerticalRatioFieldNum] = Field(name: "AvgVerticalRatio", num: SessionMesg.avgVerticalRatioFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "percent", accumulated: false)
		mesg.fields[SessionMesg.avgStanceTimeBalanceFieldNum] = Field(name: "AvgStanceTimeBalance", num: SessionMesg.avgStanceTimeBalanceFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "percent", accumulated: false)
		mesg.fields[SessionMesg.avgStepLengthFieldNum] = Field(name: "AvgStepLength", num: SessionMesg.avgStepLengthFieldNum, type: BaseType.UINT16.rawValue, scale: 10, offset: 0, units: "mm", accumulated: false)
		mesg.fields[SessionMesg.totalAnaerobicTrainingEffectFieldNum] = Field(name: "TotalAnaerobicTrainingEffect", num: SessionMesg.totalAnaerobicTrainingEffectFieldNum, type: BaseType.UINT8.rawValue, scale: 10, offset: 0, units: "", accumulated: false)
		mesg.fields[SessionMesg.avgVamFieldNum] = Field(name: "AvgVam", num: SessionMesg.avgVamFieldNum, type: BaseType.UINT16.rawValue, scale: 1000, offset: 0, units: "m/s", accumulated: false)
		mesg.fields[SessionMesg.avgDepthFieldNum] = Field(name: "AvgDepth", num: SessionMesg.avgDepthFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "m", accumulated: false)
		mesg.fields[SessionMesg.maxDepthFieldNum] = Field(name: "MaxDepth", num: SessionMesg.maxDepthFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "m", accumulated: false)
		mesg.fields[SessionMesg.surfaceIntervalFieldNum] = Field(name: "SurfaceInterval", num: SessionMesg.surfaceIntervalFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
		mesg.fields[SessionMesg.startCnsFieldNum] = Field(name: "StartCns", num: SessionMesg.startCnsFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "percent", accumulated: false)
		mesg.fields[SessionMesg.endCnsFieldNum] = Field(name: "EndCns", num: SessionMesg.endCnsFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "percent", accumulated: false)
		mesg.fields[SessionMesg.startN2FieldNum] = Field(name: "StartN2", num: SessionMesg.startN2FieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "percent", accumulated: false)
		mesg.fields[SessionMesg.endN2FieldNum] = Field(name: "EndN2", num: SessionMesg.endN2FieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "percent", accumulated: false)
		mesg.fields[SessionMesg.avgRespirationRateFieldNum] = Field(name: "AvgRespirationRate", num: SessionMesg.avgRespirationRateFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SessionMesg.avgRespirationRateFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: enhancedAvgRespirationRateFieldNum, accumulated: false, bits: 8, scale: 1, offset: 0))
		mesg.fields[SessionMesg.maxRespirationRateFieldNum] = Field(name: "MaxRespirationRate", num: SessionMesg.maxRespirationRateFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SessionMesg.maxRespirationRateFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: enhancedMaxRespirationRateFieldNum, accumulated: false, bits: 8, scale: 1, offset: 0))
		mesg.fields[SessionMesg.minRespirationRateFieldNum] = Field(name: "MinRespirationRate", num: SessionMesg.minRespirationRateFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SessionMesg.minRespirationRateFieldNum]?.addComponent(newComponent: FieldComponent(fieldNum: enhancedMinRespirationRateFieldNum, accumulated: false, bits: 8, scale: 1, offset: 0))
		mesg.fields[SessionMesg.minTemperatureFieldNum] = Field(name: "MinTemperature", num: SessionMesg.minTemperatureFieldNum, type: BaseType.SINT8.rawValue, scale: 1, offset: 0, units: "C", accumulated: false)
		mesg.fields[SessionMesg.o2ToxicityFieldNum] = Field(name: "O2Toxicity", num: SessionMesg.o2ToxicityFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "OTUs", accumulated: false)
		mesg.fields[SessionMesg.diveNumberFieldNum] = Field(name: "DiveNumber", num: SessionMesg.diveNumberFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SessionMesg.trainingLoadPeakFieldNum] = Field(name: "TrainingLoadPeak", num: SessionMesg.trainingLoadPeakFieldNum, type: BaseType.SINT32.rawValue, scale: 65536, offset: 0, units: "", accumulated: false)
		mesg.fields[SessionMesg.enhancedAvgRespirationRateFieldNum] = Field(name: "EnhancedAvgRespirationRate", num: SessionMesg.enhancedAvgRespirationRateFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "Breaths/min", accumulated: false)
		mesg.fields[SessionMesg.enhancedMaxRespirationRateFieldNum] = Field(name: "EnhancedMaxRespirationRate", num: SessionMesg.enhancedMaxRespirationRateFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "Breaths/min", accumulated: false)
		mesg.fields[SessionMesg.enhancedMinRespirationRateFieldNum] = Field(name: "EnhancedMinRespirationRate", num: SessionMesg.enhancedMinRespirationRateFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "", accumulated: false)
		mesg.fields[SessionMesg.totalGritFieldNum] = Field(name: "TotalGrit", num: SessionMesg.totalGritFieldNum, type: BaseType.FLOAT32.rawValue, scale: 1, offset: 0, units: "kGrit", accumulated: false)
		mesg.fields[SessionMesg.totalFlowFieldNum] = Field(name: "TotalFlow", num: SessionMesg.totalFlowFieldNum, type: BaseType.FLOAT32.rawValue, scale: 1, offset: 0, units: "Flow", accumulated: false)
		mesg.fields[SessionMesg.jumpCountFieldNum] = Field(name: "JumpCount", num: SessionMesg.jumpCountFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SessionMesg.avgGritFieldNum] = Field(name: "AvgGrit", num: SessionMesg.avgGritFieldNum, type: BaseType.FLOAT32.rawValue, scale: 1, offset: 0, units: "kGrit", accumulated: false)
		mesg.fields[SessionMesg.avgFlowFieldNum] = Field(name: "AvgFlow", num: SessionMesg.avgFlowFieldNum, type: BaseType.FLOAT32.rawValue, scale: 1, offset: 0, units: "Flow", accumulated: false)
		mesg.fields[SessionMesg.workoutFeelFieldNum] = Field(name: "WorkoutFeel", num: SessionMesg.workoutFeelFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SessionMesg.workoutRpeFieldNum] = Field(name: "WorkoutRpe", num: SessionMesg.workoutRpeFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SessionMesg.avgSpo2FieldNum] = Field(name: "AvgSpo2", num: SessionMesg.avgSpo2FieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "percent", accumulated: false)
		mesg.fields[SessionMesg.avgStressFieldNum] = Field(name: "AvgStress", num: SessionMesg.avgStressFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "percent", accumulated: false)
		mesg.fields[SessionMesg.sdrrHrvFieldNum] = Field(name: "SdrrHrv", num: SessionMesg.sdrrHrvFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "mS", accumulated: false)
		mesg.fields[SessionMesg.rmssdHrvFieldNum] = Field(name: "RmssdHrv", num: SessionMesg.rmssdHrvFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "mS", accumulated: false)
		mesg.fields[SessionMesg.totalFractionalAscentFieldNum] = Field(name: "TotalFractionalAscent", num: SessionMesg.totalFractionalAscentFieldNum, type: BaseType.UINT8.rawValue, scale: 100, offset: 0, units: "m", accumulated: false)
		mesg.fields[SessionMesg.totalFractionalDescentFieldNum] = Field(name: "TotalFractionalDescent", num: SessionMesg.totalFractionalDescentFieldNum, type: BaseType.UINT8.rawValue, scale: 100, offset: 0, units: "m", accumulated: false)
		mesg.fields[SessionMesg.avgCoreTemperatureFieldNum] = Field(name: "AvgCoreTemperature", num: SessionMesg.avgCoreTemperatureFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "C", accumulated: false)
		mesg.fields[SessionMesg.minCoreTemperatureFieldNum] = Field(name: "MinCoreTemperature", num: SessionMesg.minCoreTemperatureFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "C", accumulated: false)
		mesg.fields[SessionMesg.maxCoreTemperatureFieldNum] = Field(name: "MaxCoreTemperature", num: SessionMesg.maxCoreTemperatureFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "C", accumulated: false)
        return mesg
    }
}