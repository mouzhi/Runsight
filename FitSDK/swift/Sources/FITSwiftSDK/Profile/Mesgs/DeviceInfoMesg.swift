/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class DeviceInfoMesg : Mesg {
    public static let timestampFieldNum:UInt8 = 253
    public static let deviceIndexFieldNum:UInt8 = 0
    public static let deviceTypeFieldNum:UInt8 = 1
    public static let manufacturerFieldNum:UInt8 = 2
    public static let serialNumberFieldNum:UInt8 = 3
    public static let productFieldNum:UInt8 = 4
    public static let softwareVersionFieldNum:UInt8 = 5
    public static let hardwareVersionFieldNum:UInt8 = 6
    public static let cumOperatingTimeFieldNum:UInt8 = 7
    public static let batteryVoltageFieldNum:UInt8 = 10
    public static let batteryStatusFieldNum:UInt8 = 11
    public static let sensorPositionFieldNum:UInt8 = 18
    public static let descriptorFieldNum:UInt8 = 19
    public static let antTransmissionTypeFieldNum:UInt8 = 20
    public static let antDeviceNumberFieldNum:UInt8 = 21
    public static let antNetworkFieldNum:UInt8 = 22
    public static let sourceTypeFieldNum:UInt8 = 25
    public static let productNameFieldNum:UInt8 = 27
    public static let batteryLevelFieldNum:UInt8 = 32

	private struct DeviceTypeSubField {
        public static let bleDeviceType:UInt16 = 0
        public static let antplusDeviceType:UInt16 = 1
        public static let antDeviceType:UInt16 = 2
        public static let localDeviceType:UInt16 = 3
        public static let subfields:UInt16 = 4
        public static let active:UInt16 = FIT.SUBFIELD_INDEX.ACTIVE_SUBFIELD
        public static let mainField:UInt16 = FIT.SUBFIELD_INDEX.MAIN_FIELD
    }

	private struct ProductSubField {
        public static let faveroProduct:UInt16 = 0
        public static let garminProduct:UInt16 = 1
        public static let subfields:UInt16 = 2
        public static let active:UInt16 = FIT.SUBFIELD_INDEX.ACTIVE_SUBFIELD
        public static let mainField:UInt16 = FIT.SUBFIELD_INDEX.MAIN_FIELD
    }

	public init() {
        super.init(mesg: DeviceInfoMesg.createDeviceInfoMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getTimestamp() -> DateTime? {
		guard let value = getFieldValue(fieldNum: DeviceInfoMesg.timestampFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setTimestamp(_ value: DateTime) throws {
		try setFieldValue(fieldNum: DeviceInfoMesg.timestampFieldNum, value: value.timestamp)
	}

	public func getDeviceIndex() -> DeviceIndex? {
		guard let value = getFieldValue(fieldNum: DeviceInfoMesg.deviceIndexFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setDeviceIndex(_ value: DeviceIndex) throws {
		try setFieldValue(fieldNum: DeviceInfoMesg.deviceIndexFieldNum, value: value)
	}

	public func getDeviceType() -> UInt8? {
		guard let value = getFieldValue(fieldNum: DeviceInfoMesg.deviceTypeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setDeviceType(_ value: UInt8) throws {
		try setFieldValue(fieldNum: DeviceInfoMesg.deviceTypeFieldNum, value: value)
	}

	public func getBleDeviceType() throws -> BleDeviceType? {
		guard let value = try getFieldValue(fieldNum: DeviceInfoMesg.deviceTypeFieldNum, index: 0, subFieldIndex: DeviceTypeSubField.bleDeviceType).map({UInt8(fitValue: $0)}) else {
			return nil
		}
		
		return BleDeviceType(rawValue: value) ?? .invalid
	}

	public func setBleDeviceType(_ value: BleDeviceType) throws {
		try setFieldValue(fieldNum: DeviceInfoMesg.deviceTypeFieldNum, value: value.rawValue, index: 0, subFieldIndex: DeviceTypeSubField.bleDeviceType )
	}

	public func getAntplusDeviceType() throws -> AntplusDeviceType? {
		guard let value = try getFieldValue(fieldNum: DeviceInfoMesg.deviceTypeFieldNum, index: 0, subFieldIndex: DeviceTypeSubField.antplusDeviceType).map({UInt8(fitValue: $0)}) else {
			return nil
		}
		
		return AntplusDeviceType(rawValue: value) ?? .invalid
	}

	public func setAntplusDeviceType(_ value: AntplusDeviceType) throws {
		try setFieldValue(fieldNum: DeviceInfoMesg.deviceTypeFieldNum, value: value.rawValue, index: 0, subFieldIndex: DeviceTypeSubField.antplusDeviceType )
	}

	public func getAntDeviceType() throws -> UInt8? {
		guard let value = try getFieldValue(fieldNum: DeviceInfoMesg.deviceTypeFieldNum, index: 0, subFieldIndex: DeviceTypeSubField.antDeviceType).map({UInt8(fitValue: $0)}) else {
			return nil
		}
		
		return value
	}

	public func setAntDeviceType(_ value: UInt8) throws {
		try setFieldValue(fieldNum: DeviceInfoMesg.deviceTypeFieldNum, value: value, index: 0, subFieldIndex: DeviceTypeSubField.antDeviceType )
	}

	public func getLocalDeviceType() throws -> LocalDeviceType? {
		guard let value = try getFieldValue(fieldNum: DeviceInfoMesg.deviceTypeFieldNum, index: 0, subFieldIndex: DeviceTypeSubField.localDeviceType).map({UInt8(fitValue: $0)}) else {
			return nil
		}
		
		return LocalDeviceType(rawValue: value) ?? .invalid
	}

	public func setLocalDeviceType(_ value: LocalDeviceType) throws {
		try setFieldValue(fieldNum: DeviceInfoMesg.deviceTypeFieldNum, value: value.rawValue, index: 0, subFieldIndex: DeviceTypeSubField.localDeviceType )
	}

	public func getManufacturer() -> Manufacturer? {
		guard let value = getFieldValue(fieldNum: DeviceInfoMesg.manufacturerFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return Manufacturer(rawValue: value) ?? .invalid
	}

	public func setManufacturer(_ value: Manufacturer) throws {
		try setFieldValue(fieldNum: DeviceInfoMesg.manufacturerFieldNum, value: value.rawValue)
	}

	public func getSerialNumber() -> UInt32? {
		guard let value = getFieldValue(fieldNum: DeviceInfoMesg.serialNumberFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setSerialNumber(_ value: UInt32) throws {
		try setFieldValue(fieldNum: DeviceInfoMesg.serialNumberFieldNum, value: value)
	}

	public func getProduct() -> UInt16? {
		guard let value = getFieldValue(fieldNum: DeviceInfoMesg.productFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setProduct(_ value: UInt16) throws {
		try setFieldValue(fieldNum: DeviceInfoMesg.productFieldNum, value: value)
	}

	public func getFaveroProduct() throws -> FaveroProduct? {
		guard let value = try getFieldValue(fieldNum: DeviceInfoMesg.productFieldNum, index: 0, subFieldIndex: ProductSubField.faveroProduct).map({UInt16(fitValue: $0)}) else {
			return nil
		}
		
		return FaveroProduct(rawValue: value) ?? .invalid
	}

	public func setFaveroProduct(_ value: FaveroProduct) throws {
		try setFieldValue(fieldNum: DeviceInfoMesg.productFieldNum, value: value.rawValue, index: 0, subFieldIndex: ProductSubField.faveroProduct )
	}

	public func getGarminProduct() throws -> GarminProduct? {
		guard let value = try getFieldValue(fieldNum: DeviceInfoMesg.productFieldNum, index: 0, subFieldIndex: ProductSubField.garminProduct).map({UInt16(fitValue: $0)}) else {
			return nil
		}
		
		return GarminProduct(rawValue: value) ?? .invalid
	}

	public func setGarminProduct(_ value: GarminProduct) throws {
		try setFieldValue(fieldNum: DeviceInfoMesg.productFieldNum, value: value.rawValue, index: 0, subFieldIndex: ProductSubField.garminProduct )
	}

	public func getSoftwareVersion() -> Float64? {
		guard let value = getFieldValue(fieldNum: DeviceInfoMesg.softwareVersionFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setSoftwareVersion(_ value: Float64) throws {
		try setFieldValue(fieldNum: DeviceInfoMesg.softwareVersionFieldNum, value: value)
	}

	public func getHardwareVersion() -> UInt8? {
		guard let value = getFieldValue(fieldNum: DeviceInfoMesg.hardwareVersionFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setHardwareVersion(_ value: UInt8) throws {
		try setFieldValue(fieldNum: DeviceInfoMesg.hardwareVersionFieldNum, value: value)
	}

	public func getCumOperatingTime() -> UInt32? {
		guard let value = getFieldValue(fieldNum: DeviceInfoMesg.cumOperatingTimeFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setCumOperatingTime(_ value: UInt32) throws {
		try setFieldValue(fieldNum: DeviceInfoMesg.cumOperatingTimeFieldNum, value: value)
	}

	public func getBatteryVoltage() -> Float64? {
		guard let value = getFieldValue(fieldNum: DeviceInfoMesg.batteryVoltageFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setBatteryVoltage(_ value: Float64) throws {
		try setFieldValue(fieldNum: DeviceInfoMesg.batteryVoltageFieldNum, value: value)
	}

	public func getBatteryStatus() -> BatteryStatus? {
		guard let value = getFieldValue(fieldNum: DeviceInfoMesg.batteryStatusFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return BatteryStatus(rawValue: value) ?? .invalid
	}

	public func setBatteryStatus(_ value: BatteryStatus) throws {
		try setFieldValue(fieldNum: DeviceInfoMesg.batteryStatusFieldNum, value: value.rawValue)
	}

	public func getSensorPosition() -> BodyLocation? {
		guard let value = getFieldValue(fieldNum: DeviceInfoMesg.sensorPositionFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return BodyLocation(rawValue: value) ?? .invalid
	}

	public func setSensorPosition(_ value: BodyLocation) throws {
		try setFieldValue(fieldNum: DeviceInfoMesg.sensorPositionFieldNum, value: value.rawValue)
	}

	public func getDescriptor() -> String? {
		guard let value = getFieldValue(fieldNum: DeviceInfoMesg.descriptorFieldNum, index:0) as? String else {
            return nil
        }
		return value
	}

	public func setDescriptor(_ value: String) throws {
		try setFieldValue(fieldNum: DeviceInfoMesg.descriptorFieldNum, value: value)
	}

	public func getAntTransmissionType() -> UInt8? {
		guard let value = getFieldValue(fieldNum: DeviceInfoMesg.antTransmissionTypeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setAntTransmissionType(_ value: UInt8) throws {
		try setFieldValue(fieldNum: DeviceInfoMesg.antTransmissionTypeFieldNum, value: value)
	}

	public func getAntDeviceNumber() -> UInt16? {
		guard let value = getFieldValue(fieldNum: DeviceInfoMesg.antDeviceNumberFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setAntDeviceNumber(_ value: UInt16) throws {
		try setFieldValue(fieldNum: DeviceInfoMesg.antDeviceNumberFieldNum, value: value)
	}

	public func getAntNetwork() -> AntNetwork? {
		guard let value = getFieldValue(fieldNum: DeviceInfoMesg.antNetworkFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return AntNetwork(rawValue: value) ?? .invalid
	}

	public func setAntNetwork(_ value: AntNetwork) throws {
		try setFieldValue(fieldNum: DeviceInfoMesg.antNetworkFieldNum, value: value.rawValue)
	}

	public func getSourceType() -> SourceType? {
		guard let value = getFieldValue(fieldNum: DeviceInfoMesg.sourceTypeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return SourceType(rawValue: value) ?? .invalid
	}

	public func setSourceType(_ value: SourceType) throws {
		try setFieldValue(fieldNum: DeviceInfoMesg.sourceTypeFieldNum, value: value.rawValue)
	}

	public func getProductName() -> String? {
		guard let value = getFieldValue(fieldNum: DeviceInfoMesg.productNameFieldNum, index:0) as? String else {
            return nil
        }
		return value
	}

	public func setProductName(_ value: String) throws {
		try setFieldValue(fieldNum: DeviceInfoMesg.productNameFieldNum, value: value)
	}

	public func getBatteryLevel() -> UInt8? {
		guard let value = getFieldValue(fieldNum: DeviceInfoMesg.batteryLevelFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setBatteryLevel(_ value: UInt8) throws {
		try setFieldValue(fieldNum: DeviceInfoMesg.batteryLevelFieldNum, value: value)
	}

	public class func createDeviceInfoMesg() -> DeviceInfoMesg {
        let mesg = DeviceInfoMesg(name: "DeviceInfo", num: Profile.MesgNum.deviceInfo)
		
		mesg.fields[DeviceInfoMesg.timestampFieldNum] = Field(name: "Timestamp", num: DeviceInfoMesg.timestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
		mesg.fields[DeviceInfoMesg.deviceIndexFieldNum] = Field(name: "DeviceIndex", num: DeviceInfoMesg.deviceIndexFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DeviceInfoMesg.deviceTypeFieldNum] = Field(name: "DeviceType", num: DeviceInfoMesg.deviceTypeFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
        mesg.fields[DeviceInfoMesg.deviceTypeFieldNum]?.subFields.append(SubField(name: "BleDeviceType", type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: ""))
        mesg.fields[DeviceInfoMesg.deviceTypeFieldNum]?.subFields[Int(DeviceTypeSubField.bleDeviceType)].addMap(refFieldNum: 25, refFieldValue: 3)
        mesg.fields[DeviceInfoMesg.deviceTypeFieldNum]?.subFields.append(SubField(name: "AntplusDeviceType", type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: ""))
        mesg.fields[DeviceInfoMesg.deviceTypeFieldNum]?.subFields[Int(DeviceTypeSubField.antplusDeviceType)].addMap(refFieldNum: 25, refFieldValue: 1)
        mesg.fields[DeviceInfoMesg.deviceTypeFieldNum]?.subFields.append(SubField(name: "AntDeviceType", type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: ""))
        mesg.fields[DeviceInfoMesg.deviceTypeFieldNum]?.subFields[Int(DeviceTypeSubField.antDeviceType)].addMap(refFieldNum: 25, refFieldValue: 0)
        mesg.fields[DeviceInfoMesg.deviceTypeFieldNum]?.subFields.append(SubField(name: "LocalDeviceType", type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: ""))
        mesg.fields[DeviceInfoMesg.deviceTypeFieldNum]?.subFields[Int(DeviceTypeSubField.localDeviceType)].addMap(refFieldNum: 25, refFieldValue: 5)
		mesg.fields[DeviceInfoMesg.manufacturerFieldNum] = Field(name: "Manufacturer", num: DeviceInfoMesg.manufacturerFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DeviceInfoMesg.serialNumberFieldNum] = Field(name: "SerialNumber", num: DeviceInfoMesg.serialNumberFieldNum, type: BaseType.UINT32Z.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DeviceInfoMesg.productFieldNum] = Field(name: "Product", num: DeviceInfoMesg.productFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
        mesg.fields[DeviceInfoMesg.productFieldNum]?.subFields.append(SubField(name: "FaveroProduct", type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: ""))
        mesg.fields[DeviceInfoMesg.productFieldNum]?.subFields[Int(ProductSubField.faveroProduct)].addMap(refFieldNum: 2, refFieldValue: 263)
        mesg.fields[DeviceInfoMesg.productFieldNum]?.subFields.append(SubField(name: "GarminProduct", type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: ""))
        mesg.fields[DeviceInfoMesg.productFieldNum]?.subFields[Int(ProductSubField.garminProduct)].addMap(refFieldNum: 2, refFieldValue: 1)
        mesg.fields[DeviceInfoMesg.productFieldNum]?.subFields[Int(ProductSubField.garminProduct)].addMap(refFieldNum: 2, refFieldValue: 15)
        mesg.fields[DeviceInfoMesg.productFieldNum]?.subFields[Int(ProductSubField.garminProduct)].addMap(refFieldNum: 2, refFieldValue: 13)
        mesg.fields[DeviceInfoMesg.productFieldNum]?.subFields[Int(ProductSubField.garminProduct)].addMap(refFieldNum: 2, refFieldValue: 89)
		mesg.fields[DeviceInfoMesg.softwareVersionFieldNum] = Field(name: "SoftwareVersion", num: DeviceInfoMesg.softwareVersionFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "", accumulated: false)
		mesg.fields[DeviceInfoMesg.hardwareVersionFieldNum] = Field(name: "HardwareVersion", num: DeviceInfoMesg.hardwareVersionFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DeviceInfoMesg.cumOperatingTimeFieldNum] = Field(name: "CumOperatingTime", num: DeviceInfoMesg.cumOperatingTimeFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
		mesg.fields[DeviceInfoMesg.batteryVoltageFieldNum] = Field(name: "BatteryVoltage", num: DeviceInfoMesg.batteryVoltageFieldNum, type: BaseType.UINT16.rawValue, scale: 256, offset: 0, units: "V", accumulated: false)
		mesg.fields[DeviceInfoMesg.batteryStatusFieldNum] = Field(name: "BatteryStatus", num: DeviceInfoMesg.batteryStatusFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DeviceInfoMesg.sensorPositionFieldNum] = Field(name: "SensorPosition", num: DeviceInfoMesg.sensorPositionFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DeviceInfoMesg.descriptorFieldNum] = Field(name: "Descriptor", num: DeviceInfoMesg.descriptorFieldNum, type: BaseType.STRING.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DeviceInfoMesg.antTransmissionTypeFieldNum] = Field(name: "AntTransmissionType", num: DeviceInfoMesg.antTransmissionTypeFieldNum, type: BaseType.UINT8Z.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DeviceInfoMesg.antDeviceNumberFieldNum] = Field(name: "AntDeviceNumber", num: DeviceInfoMesg.antDeviceNumberFieldNum, type: BaseType.UINT16Z.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DeviceInfoMesg.antNetworkFieldNum] = Field(name: "AntNetwork", num: DeviceInfoMesg.antNetworkFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DeviceInfoMesg.sourceTypeFieldNum] = Field(name: "SourceType", num: DeviceInfoMesg.sourceTypeFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DeviceInfoMesg.productNameFieldNum] = Field(name: "ProductName", num: DeviceInfoMesg.productNameFieldNum, type: BaseType.STRING.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[DeviceInfoMesg.batteryLevelFieldNum] = Field(name: "BatteryLevel", num: DeviceInfoMesg.batteryLevelFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "%", accumulated: false)
        return mesg
    }
}