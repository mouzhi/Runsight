/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class SegmentFileMesg : Mesg {
    public static let messageIndexFieldNum:UInt8 = 254
    public static let fileUuidFieldNum:UInt8 = 1
    public static let enabledFieldNum:UInt8 = 3
    public static let userProfilePrimaryKeyFieldNum:UInt8 = 4
    public static let leaderTypeFieldNum:UInt8 = 7
    public static let leaderGroupPrimaryKeyFieldNum:UInt8 = 8
    public static let leaderActivityIdFieldNum:UInt8 = 9
    public static let leaderActivityIdStringFieldNum:UInt8 = 10
    public static let defaultRaceLeaderFieldNum:UInt8 = 11

	public init() {
        super.init(mesg: SegmentFileMesg.createSegmentFileMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getMessageIndex() -> MessageIndex? {
		guard let value = getFieldValue(fieldNum: SegmentFileMesg.messageIndexFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setMessageIndex(_ value: MessageIndex) throws {
		try setFieldValue(fieldNum: SegmentFileMesg.messageIndexFieldNum, value: value)
	}

	public func getFileUuid() -> String? {
		guard let value = getFieldValue(fieldNum: SegmentFileMesg.fileUuidFieldNum, index:0) as? String else {
            return nil
        }
		return value
	}

	public func setFileUuid(_ value: String) throws {
		try setFieldValue(fieldNum: SegmentFileMesg.fileUuidFieldNum, value: value)
	}

	public func getEnabled() -> Bool? {
		guard let value = getFieldValue(fieldNum: SegmentFileMesg.enabledFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value == 1 ? true : false
	}

	public func setEnabled(_ value: Bool) throws {
		try setFieldValue(fieldNum: SegmentFileMesg.enabledFieldNum, value: value)
	}

	public func getUserProfilePrimaryKey() -> UInt32? {
		guard let value = getFieldValue(fieldNum: SegmentFileMesg.userProfilePrimaryKeyFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setUserProfilePrimaryKey(_ value: UInt32) throws {
		try setFieldValue(fieldNum: SegmentFileMesg.userProfilePrimaryKeyFieldNum, value: value)
	}

	public func getNumLeaderType() -> UInt8 {
		guard let field = getField(fieldNum: SegmentFileMesg.leaderTypeFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getLeaderType() -> [SegmentLeaderboardType?]? {
		guard let field = getField(fieldNum: SegmentFileMesg.leaderTypeFieldNum) else {
			return nil
		}

		let rawValues = field.toArray() as [Any?]
		var values = [SegmentLeaderboardType]()
		for rawValue in rawValues {
			values.append(
				SegmentLeaderboardType(rawValue: rawValue as! UInt8)!
			)
		}

		return values
	}

	public func getLeaderType(index: Int) -> SegmentLeaderboardType? {
		guard let value = getFieldValue(fieldNum: SegmentFileMesg.leaderTypeFieldNum, index: index) as? UInt8 else {
            return nil
        }
		return SegmentLeaderboardType(rawValue: value) ?? .invalid
	}

	public func setLeaderType(index: Int, value: SegmentLeaderboardType) throws {
		try setFieldValue(fieldNum: SegmentFileMesg.leaderTypeFieldNum, value: value.rawValue, index: index)
	}

	public func getNumLeaderGroupPrimaryKey() -> UInt8 {
		guard let field = getField(fieldNum: SegmentFileMesg.leaderGroupPrimaryKeyFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getLeaderGroupPrimaryKey() -> [UInt32?]? {
		guard let field = getField(fieldNum: SegmentFileMesg.leaderGroupPrimaryKeyFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt32?]
	}

	public func getLeaderGroupPrimaryKey(index: Int) -> UInt32? {
		guard let value = getFieldValue(fieldNum: SegmentFileMesg.leaderGroupPrimaryKeyFieldNum, index: index) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setLeaderGroupPrimaryKey(index: Int, value: UInt32) throws {
		try setFieldValue(fieldNum: SegmentFileMesg.leaderGroupPrimaryKeyFieldNum, value: value, index: index)
	}

	public func getNumLeaderActivityId() -> UInt8 {
		guard let field = getField(fieldNum: SegmentFileMesg.leaderActivityIdFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getLeaderActivityId() -> [UInt32?]? {
		guard let field = getField(fieldNum: SegmentFileMesg.leaderActivityIdFieldNum) else {
			return nil
		}
		return field.toArray() as [UInt32?]
	}

	public func getLeaderActivityId(index: Int) -> UInt32? {
		guard let value = getFieldValue(fieldNum: SegmentFileMesg.leaderActivityIdFieldNum, index: index) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setLeaderActivityId(index: Int, value: UInt32) throws {
		try setFieldValue(fieldNum: SegmentFileMesg.leaderActivityIdFieldNum, value: value, index: index)
	}

	public func getNumLeaderActivityIdString() -> UInt8 {
		guard let field = getField(fieldNum: SegmentFileMesg.leaderActivityIdStringFieldNum) else {
			return 0
		}

		return field.numValues
	}

	public func getLeaderActivityIdString() -> [String?]? {
		guard let field = getField(fieldNum: SegmentFileMesg.leaderActivityIdStringFieldNum) else {
			return nil
		}
		return field.toArray() as [String?]
	}

	public func getLeaderActivityIdString(index: Int) -> String? {
		guard let value = getFieldValue(fieldNum: SegmentFileMesg.leaderActivityIdStringFieldNum, index: index) as? String else {
            return nil
        }
		return value
	}

	public func setLeaderActivityIdString(index: Int, value: String) throws {
		try setFieldValue(fieldNum: SegmentFileMesg.leaderActivityIdStringFieldNum, value: value, index: index)
	}

	public func getDefaultRaceLeader() -> UInt8? {
		guard let value = getFieldValue(fieldNum: SegmentFileMesg.defaultRaceLeaderFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setDefaultRaceLeader(_ value: UInt8) throws {
		try setFieldValue(fieldNum: SegmentFileMesg.defaultRaceLeaderFieldNum, value: value)
	}

	public class func createSegmentFileMesg() -> SegmentFileMesg {
        let mesg = SegmentFileMesg(name: "SegmentFile", num: Profile.MesgNum.segmentFile)
		
		mesg.fields[SegmentFileMesg.messageIndexFieldNum] = Field(name: "MessageIndex", num: SegmentFileMesg.messageIndexFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SegmentFileMesg.fileUuidFieldNum] = Field(name: "FileUuid", num: SegmentFileMesg.fileUuidFieldNum, type: BaseType.STRING.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SegmentFileMesg.enabledFieldNum] = Field(name: "Enabled", num: SegmentFileMesg.enabledFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SegmentFileMesg.userProfilePrimaryKeyFieldNum] = Field(name: "UserProfilePrimaryKey", num: SegmentFileMesg.userProfilePrimaryKeyFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SegmentFileMesg.leaderTypeFieldNum] = Field(name: "LeaderType", num: SegmentFileMesg.leaderTypeFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SegmentFileMesg.leaderGroupPrimaryKeyFieldNum] = Field(name: "LeaderGroupPrimaryKey", num: SegmentFileMesg.leaderGroupPrimaryKeyFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SegmentFileMesg.leaderActivityIdFieldNum] = Field(name: "LeaderActivityId", num: SegmentFileMesg.leaderActivityIdFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SegmentFileMesg.leaderActivityIdStringFieldNum] = Field(name: "LeaderActivityIdString", num: SegmentFileMesg.leaderActivityIdStringFieldNum, type: BaseType.STRING.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SegmentFileMesg.defaultRaceLeaderFieldNum] = Field(name: "DefaultRaceLeader", num: SegmentFileMesg.defaultRaceLeaderFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
        return mesg
    }
}