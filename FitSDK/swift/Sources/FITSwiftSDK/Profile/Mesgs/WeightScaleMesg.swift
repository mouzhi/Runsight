/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class WeightScaleMesg : Mesg {
    public static let timestampFieldNum:UInt8 = 253
    public static let weightFieldNum:UInt8 = 0
    public static let percentFatFieldNum:UInt8 = 1
    public static let percentHydrationFieldNum:UInt8 = 2
    public static let visceralFatMassFieldNum:UInt8 = 3
    public static let boneMassFieldNum:UInt8 = 4
    public static let muscleMassFieldNum:UInt8 = 5
    public static let basalMetFieldNum:UInt8 = 7
    public static let physiqueRatingFieldNum:UInt8 = 8
    public static let activeMetFieldNum:UInt8 = 9
    public static let metabolicAgeFieldNum:UInt8 = 10
    public static let visceralFatRatingFieldNum:UInt8 = 11
    public static let userProfileIndexFieldNum:UInt8 = 12
    public static let bmiFieldNum:UInt8 = 13

	public init() {
        super.init(mesg: WeightScaleMesg.createWeightScaleMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getTimestamp() -> DateTime? {
		guard let value = getFieldValue(fieldNum: WeightScaleMesg.timestampFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setTimestamp(_ value: DateTime) throws {
		try setFieldValue(fieldNum: WeightScaleMesg.timestampFieldNum, value: value.timestamp)
	}

	public func getWeight() -> Float64? {
		guard let value = getFieldValue(fieldNum: WeightScaleMesg.weightFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setWeight(_ value: Float64) throws {
		try setFieldValue(fieldNum: WeightScaleMesg.weightFieldNum, value: value)
	}

	public func getPercentFat() -> Float64? {
		guard let value = getFieldValue(fieldNum: WeightScaleMesg.percentFatFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setPercentFat(_ value: Float64) throws {
		try setFieldValue(fieldNum: WeightScaleMesg.percentFatFieldNum, value: value)
	}

	public func getPercentHydration() -> Float64? {
		guard let value = getFieldValue(fieldNum: WeightScaleMesg.percentHydrationFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setPercentHydration(_ value: Float64) throws {
		try setFieldValue(fieldNum: WeightScaleMesg.percentHydrationFieldNum, value: value)
	}

	public func getVisceralFatMass() -> Float64? {
		guard let value = getFieldValue(fieldNum: WeightScaleMesg.visceralFatMassFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setVisceralFatMass(_ value: Float64) throws {
		try setFieldValue(fieldNum: WeightScaleMesg.visceralFatMassFieldNum, value: value)
	}

	public func getBoneMass() -> Float64? {
		guard let value = getFieldValue(fieldNum: WeightScaleMesg.boneMassFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setBoneMass(_ value: Float64) throws {
		try setFieldValue(fieldNum: WeightScaleMesg.boneMassFieldNum, value: value)
	}

	public func getMuscleMass() -> Float64? {
		guard let value = getFieldValue(fieldNum: WeightScaleMesg.muscleMassFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setMuscleMass(_ value: Float64) throws {
		try setFieldValue(fieldNum: WeightScaleMesg.muscleMassFieldNum, value: value)
	}

	public func getBasalMet() -> Float64? {
		guard let value = getFieldValue(fieldNum: WeightScaleMesg.basalMetFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setBasalMet(_ value: Float64) throws {
		try setFieldValue(fieldNum: WeightScaleMesg.basalMetFieldNum, value: value)
	}

	public func getPhysiqueRating() -> UInt8? {
		guard let value = getFieldValue(fieldNum: WeightScaleMesg.physiqueRatingFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setPhysiqueRating(_ value: UInt8) throws {
		try setFieldValue(fieldNum: WeightScaleMesg.physiqueRatingFieldNum, value: value)
	}

	public func getActiveMet() -> Float64? {
		guard let value = getFieldValue(fieldNum: WeightScaleMesg.activeMetFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setActiveMet(_ value: Float64) throws {
		try setFieldValue(fieldNum: WeightScaleMesg.activeMetFieldNum, value: value)
	}

	public func getMetabolicAge() -> UInt8? {
		guard let value = getFieldValue(fieldNum: WeightScaleMesg.metabolicAgeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setMetabolicAge(_ value: UInt8) throws {
		try setFieldValue(fieldNum: WeightScaleMesg.metabolicAgeFieldNum, value: value)
	}

	public func getVisceralFatRating() -> UInt8? {
		guard let value = getFieldValue(fieldNum: WeightScaleMesg.visceralFatRatingFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setVisceralFatRating(_ value: UInt8) throws {
		try setFieldValue(fieldNum: WeightScaleMesg.visceralFatRatingFieldNum, value: value)
	}

	public func getUserProfileIndex() -> MessageIndex? {
		guard let value = getFieldValue(fieldNum: WeightScaleMesg.userProfileIndexFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setUserProfileIndex(_ value: MessageIndex) throws {
		try setFieldValue(fieldNum: WeightScaleMesg.userProfileIndexFieldNum, value: value)
	}

	public func getBmi() -> Float64? {
		guard let value = getFieldValue(fieldNum: WeightScaleMesg.bmiFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setBmi(_ value: Float64) throws {
		try setFieldValue(fieldNum: WeightScaleMesg.bmiFieldNum, value: value)
	}

	public class func createWeightScaleMesg() -> WeightScaleMesg {
        let mesg = WeightScaleMesg(name: "WeightScale", num: Profile.MesgNum.weightScale)
		
		mesg.fields[WeightScaleMesg.timestampFieldNum] = Field(name: "Timestamp", num: WeightScaleMesg.timestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "s", accumulated: false)
		mesg.fields[WeightScaleMesg.weightFieldNum] = Field(name: "Weight", num: WeightScaleMesg.weightFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "kg", accumulated: false)
		mesg.fields[WeightScaleMesg.percentFatFieldNum] = Field(name: "PercentFat", num: WeightScaleMesg.percentFatFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "%", accumulated: false)
		mesg.fields[WeightScaleMesg.percentHydrationFieldNum] = Field(name: "PercentHydration", num: WeightScaleMesg.percentHydrationFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "%", accumulated: false)
		mesg.fields[WeightScaleMesg.visceralFatMassFieldNum] = Field(name: "VisceralFatMass", num: WeightScaleMesg.visceralFatMassFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "kg", accumulated: false)
		mesg.fields[WeightScaleMesg.boneMassFieldNum] = Field(name: "BoneMass", num: WeightScaleMesg.boneMassFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "kg", accumulated: false)
		mesg.fields[WeightScaleMesg.muscleMassFieldNum] = Field(name: "MuscleMass", num: WeightScaleMesg.muscleMassFieldNum, type: BaseType.UINT16.rawValue, scale: 100, offset: 0, units: "kg", accumulated: false)
		mesg.fields[WeightScaleMesg.basalMetFieldNum] = Field(name: "BasalMet", num: WeightScaleMesg.basalMetFieldNum, type: BaseType.UINT16.rawValue, scale: 4, offset: 0, units: "kcal/day", accumulated: false)
		mesg.fields[WeightScaleMesg.physiqueRatingFieldNum] = Field(name: "PhysiqueRating", num: WeightScaleMesg.physiqueRatingFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[WeightScaleMesg.activeMetFieldNum] = Field(name: "ActiveMet", num: WeightScaleMesg.activeMetFieldNum, type: BaseType.UINT16.rawValue, scale: 4, offset: 0, units: "kcal/day", accumulated: false)
		mesg.fields[WeightScaleMesg.metabolicAgeFieldNum] = Field(name: "MetabolicAge", num: WeightScaleMesg.metabolicAgeFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "years", accumulated: false)
		mesg.fields[WeightScaleMesg.visceralFatRatingFieldNum] = Field(name: "VisceralFatRating", num: WeightScaleMesg.visceralFatRatingFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[WeightScaleMesg.userProfileIndexFieldNum] = Field(name: "UserProfileIndex", num: WeightScaleMesg.userProfileIndexFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[WeightScaleMesg.bmiFieldNum] = Field(name: "Bmi", num: WeightScaleMesg.bmiFieldNum, type: BaseType.UINT16.rawValue, scale: 10, offset: 0, units: "kg/m^2", accumulated: false)
        return mesg
    }
}