/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


open class ActivityMesg : Mesg {
    public static let timestampFieldNum:UInt8 = 253
    public static let totalTimerTimeFieldNum:UInt8 = 0
    public static let numSessionsFieldNum:UInt8 = 1
    public static let typeFieldNum:UInt8 = 2
    public static let eventFieldNum:UInt8 = 3
    public static let eventTypeFieldNum:UInt8 = 4
    public static let localTimestampFieldNum:UInt8 = 5
    public static let eventGroupFieldNum:UInt8 = 6

	public init() {
        super.init(mesg: ActivityMesg.createActivityMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getTimestamp() -> DateTime? {
		guard let value = getFieldValue(fieldNum: ActivityMesg.timestampFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setTimestamp(_ value: DateTime) throws {
		try setFieldValue(fieldNum: ActivityMesg.timestampFieldNum, value: value.timestamp)
	}

	public func getTotalTimerTime() -> Float64? {
		guard let value = getFieldValue(fieldNum: ActivityMesg.totalTimerTimeFieldNum, index:0) as? Float64 else {
            return nil
        }
		return value
	}

	public func setTotalTimerTime(_ value: Float64) throws {
		try setFieldValue(fieldNum: ActivityMesg.totalTimerTimeFieldNum, value: value)
	}

	public func getNumSessions() -> UInt16? {
		guard let value = getFieldValue(fieldNum: ActivityMesg.numSessionsFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setNumSessions(_ value: UInt16) throws {
		try setFieldValue(fieldNum: ActivityMesg.numSessionsFieldNum, value: value)
	}

	public func getType() -> Activity? {
		guard let value = getFieldValue(fieldNum: ActivityMesg.typeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return Activity(rawValue: value) ?? .invalid
	}

	public func setType(_ value: Activity) throws {
		try setFieldValue(fieldNum: ActivityMesg.typeFieldNum, value: value.rawValue)
	}

	public func getEvent() -> Event? {
		guard let value = getFieldValue(fieldNum: ActivityMesg.eventFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return Event(rawValue: value) ?? .invalid
	}

	public func setEvent(_ value: Event) throws {
		try setFieldValue(fieldNum: ActivityMesg.eventFieldNum, value: value.rawValue)
	}

	public func getEventType() -> EventType? {
		guard let value = getFieldValue(fieldNum: ActivityMesg.eventTypeFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return EventType(rawValue: value) ?? .invalid
	}

	public func setEventType(_ value: EventType) throws {
		try setFieldValue(fieldNum: ActivityMesg.eventTypeFieldNum, value: value.rawValue)
	}

	public func getLocalTimestamp() -> LocalDateTime? {
		guard let value = getFieldValue(fieldNum: ActivityMesg.localTimestampFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return value
	}

	public func setLocalTimestamp(_ value: LocalDateTime) throws {
		try setFieldValue(fieldNum: ActivityMesg.localTimestampFieldNum, value: value)
	}

	public func getEventGroup() -> UInt8? {
		guard let value = getFieldValue(fieldNum: ActivityMesg.eventGroupFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return value
	}

	public func setEventGroup(_ value: UInt8) throws {
		try setFieldValue(fieldNum: ActivityMesg.eventGroupFieldNum, value: value)
	}

	public class func createActivityMesg() -> ActivityMesg {
        let mesg = ActivityMesg(name: "Activity", num: Profile.MesgNum.activity)
		
		mesg.fields[ActivityMesg.timestampFieldNum] = Field(name: "Timestamp", num: ActivityMesg.timestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[ActivityMesg.totalTimerTimeFieldNum] = Field(name: "TotalTimerTime", num: ActivityMesg.totalTimerTimeFieldNum, type: BaseType.UINT32.rawValue, scale: 1000, offset: 0, units: "s", accumulated: false)
		mesg.fields[ActivityMesg.numSessionsFieldNum] = Field(name: "NumSessions", num: ActivityMesg.numSessionsFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[ActivityMesg.typeFieldNum] = Field(name: "Type", num: ActivityMesg.typeFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[ActivityMesg.eventFieldNum] = Field(name: "Event", num: ActivityMesg.eventFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[ActivityMesg.eventTypeFieldNum] = Field(name: "EventType", num: ActivityMesg.eventTypeFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[ActivityMesg.localTimestampFieldNum] = Field(name: "LocalTimestamp", num: ActivityMesg.localTimestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[ActivityMesg.eventGroupFieldNum] = Field(name: "EventGroup", num: ActivityMesg.eventGroupFieldNum, type: BaseType.UINT8.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
        return mesg
    }
}