/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


import Foundation

public struct DateTime: Equatable {
    public static let min: UInt32 = 0x10000000
    public static let invalid: UInt32 = 0xFFFFFFFF

	// Number of seconds between UNIX Epoch and Garmin Epoch
    public static let unixEpochToFITEpoch: UInt32 = 631065600
    public private(set) var timestamp: UInt32 = 0
   
    public init() {
        self.timestamp = UInt32(Date().timeIntervalSince1970) - DateTime.unixEpochToFITEpoch
    }
    
    public init(timestamp: UInt32) {
        self.timestamp = timestamp
    }
    
    public init(datetime: DateTime) {
        self.timestamp = datetime.timestamp
    }
    
    public init(date: Date) {
        self.timestamp = UInt32(date.timeIntervalSince1970) - DateTime.unixEpochToFITEpoch
    }
    
    public var date: Date {
        return Date(timeIntervalSince1970: TimeInterval(timestamp + DateTime.unixEpochToFITEpoch))
    }
    
    public static func == (lhs: DateTime, rhs: DateTime) -> Bool {
        return  lhs.timestamp == rhs.timestamp
    }
} 
