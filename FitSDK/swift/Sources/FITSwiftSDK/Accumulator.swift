/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


import Foundation

class Accumulator {
    // [MesgNum: [FieldNum: AccumulatedField]]
    private var messages: [UInt16: [UInt8: AccumulatedField]] = [:]
    
    @discardableResult
    func createAccumulatedField(mesgNum: UInt16, fieldNum: UInt8, value: Int64) -> AccumulatedField {
        let accumulatedField = AccumulatedField(value)
        
        if (messages[mesgNum] == nil) {
            messages[mesgNum] = [:]
        }
        
        messages[mesgNum]![fieldNum] = accumulatedField
        
        return accumulatedField
    }
    
    func accumulate(mesgNum: UInt16, fieldNum: UInt8, value: Int64, bits: Int) -> Int64 {
        var accumulatedField = messages[mesgNum]?[fieldNum]
        
        if (accumulatedField == nil) {
            accumulatedField = createAccumulatedField(mesgNum: mesgNum, fieldNum: fieldNum, value: value)
        }
        
        return accumulatedField!.accumulate(value: value, bits: bits)
    }
    
    class AccumulatedField {
        private var accumulatedValue: Int64 = 0
        private var lastValue: Int64 = 0
        
        init(_ value: Int64 = 0) {
            self.accumulatedValue = value
            self.lastValue = value
        }
        
        func accumulate(value: Int64, bits: Int) -> Int64 {
            let mask: Int64 = (1 << bits) - 1
            
            accumulatedValue += (value - lastValue) & mask
            lastValue = value
            
            return accumulatedValue
        }
    }
}
