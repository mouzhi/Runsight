/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


import Foundation

public class MesgDefinition: Equatable {
    public private(set) var localMesgNum: LocalMesgNum
    public private(set) var reserved: UInt8 = 0
    public private(set) var endianness: Endianness
    public private(set) var globalMessageNumber: UInt16
    
    public private(set) var fieldDefinitions: [FieldDefinition] = []
    public private(set) var developerFieldDefinitions: [DeveloperFieldDefinition] = []
    
    enum MesgDefinitionError: Error {
        case invalidLocalMesgNum(localMesgNum: LocalMesgNum)
    }
    
    public init(stream: InputStream) throws {
        let recordHeader: UInt8 = try stream.readNumeric();
        localMesgNum = LocalMesgNum(rawValue: recordHeader & FIT.LOCAL_MESG_NUM_MASK)!
        reserved = try stream.readNumeric()
        let architecture: UInt8 = try stream.readNumeric()
        endianness = Endianness(rawValue: architecture)!
        globalMessageNumber = try stream.readNumeric(endianness: endianness)
        let numFields: UInt8 = try stream.readNumeric()
        var numDevFields: UInt8 = 0
        
        for _ in 0..<numFields {
            try fieldDefinitions.append(FieldDefinition(stream: stream))
        }
        
        if ((recordHeader & FIT.DEV_DATA_MASK) == FIT.DEV_DATA_MASK) {
            numDevFields = try stream.readNumeric();
            
            for _ in 0..<numDevFields {
                try developerFieldDefinitions.append(DeveloperFieldDefinition(stream: stream))
            }
        }
    }
    
    public init(mesg: Mesg) {
        globalMessageNumber = mesg.mesgNum
        localMesgNum = mesg.localMesgNum
        endianness = .little
        
        fieldDefinitions = [];
        developerFieldDefinitions = [];
        
        for field in mesg.fields.values {
            fieldDefinitions.append(FieldDefinition(field: field))
        }
        
        for developerField in mesg.devFields {
            developerFieldDefinitions.append(DeveloperFieldDefinition(developerField: developerField.value))
        }
    }
    
    public func write(outputStream: OutputStream) {
        var headerByte: UInt8 = FIT.HDR_TYPE_DEF_BIT | (localMesgNum.rawValue & FIT.HDR_TYPE_MASK);
        
        if(developerFieldDefinitions.count > 0) {
            headerByte |= FIT.DEV_DATA_MASK;
        }
        
        outputStream.append(value: headerByte);
        outputStream.append(value: UInt8(0)); // Reserved
        outputStream.append(value: Endianness.little.rawValue);
        outputStream.append(value: globalMessageNumber);
        outputStream.append(value: numFields);
        
        for fieldDefinition in fieldDefinitions {
            fieldDefinition.write(outputStream: outputStream);
        }
        
        if(developerFieldDefinitions.count > 0) {
            outputStream.append(value: UInt8(developerFieldDefinitions.count));

            for developerFieldDefinition in developerFieldDefinitions {
                developerFieldDefinition.write(outputStream: outputStream);
            }
        }
    }
    
    public var numFields: UInt8 {
        return UInt8(fieldDefinitions.count)
    }
    
    public var numDevFields: UInt8 {
        return UInt8(developerFieldDefinitions.count)
    }
    
    // MARK: Equatable
    public static func == (lhs: MesgDefinition, rhs: MesgDefinition) -> Bool {
        if ( lhs.localMesgNum != rhs.localMesgNum
         || lhs.globalMessageNumber != rhs.globalMessageNumber
         || lhs.fieldDefinitions.count != rhs.fieldDefinitions.count
         || lhs.developerFieldDefinitions.count != rhs.developerFieldDefinitions.count) {
            return false
        }
        
        for i in 0..<lhs.fieldDefinitions.count {
            if lhs.fieldDefinitions[i] != rhs.fieldDefinitions[i] {
                return false
            }
        }
        
        for i in 0..<lhs.developerFieldDefinitions.count {
            if lhs.developerFieldDefinitions[i] != rhs.developerFieldDefinitions[i] {
                return false
            }
        }
        
        return true
    }
    
}