/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


import XCTest
import FITSwiftSDK

final class ActivityEncodeTests: XCTestCase {

    func testTimeBasedActivity() throws {
        let twoPI:Double = Double.pi * 2.0
        let semicirclesPerMeter:Double = 107.173
        let fileName = "SwiftActivityEncodeRecipe.fit"

        var messages: [Mesg] = []

        // The starting timestamp for the activity
        let startTime = DateTime()

        // Timer Events are a BEST PRACTICE for FIT ACTIVITY files
        let eventMesgStart = EventMesg()
        try eventMesgStart.setTimestamp(startTime)
        try eventMesgStart.setEvent(.timer)
        try eventMesgStart.setEventType(.start)
        messages.append(eventMesgStart)

        // Create the Developer Id message for the developer data fields.
        let developerIdMesg = DeveloperDataIdMesg()
        // It is a BEST PRACTICE to reuse the same Guid for all FIT files created by your platform
        // "00010203-0405-0607-0809-0A0B0C0D0E0F"
        let appId: [UInt8] = [0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f]
        for (index, value) in appId.enumerated() {
            try developerIdMesg.setApplicationId(index: index, value: value)
        }

        try developerIdMesg.setDeveloperDataIndex(0)
        try developerIdMesg.setApplicationVersion(110)
        messages.append(developerIdMesg)

        // Create the Developer Data Field Descriptions
        let doughnutsFieldDescMesg = FieldDescriptionMesg()
        try doughnutsFieldDescMesg.setDeveloperDataIndex(0)
        try doughnutsFieldDescMesg.setFieldDefinitionNumber(0)
        try doughnutsFieldDescMesg.setFitBaseTypeId(.float32)
        try doughnutsFieldDescMesg.setFieldName(index: 0, value: "Doughnuts Earned")
        try doughnutsFieldDescMesg.setUnits(index: 0, value: "doughnuts")
        try doughnutsFieldDescMesg.setNativeMesgNum(.session)
        messages.append(doughnutsFieldDescMesg)

        let hrFieldDescMesg = FieldDescriptionMesg()
        try hrFieldDescMesg.setDeveloperDataIndex(0)
        try hrFieldDescMesg.setFieldDefinitionNumber(1)
        try hrFieldDescMesg.setFitBaseTypeId(.uint8)
        try hrFieldDescMesg.setFieldName(index: 0, value: "Heart Rate")
        try hrFieldDescMesg.setUnits(index: 0, value: "bpm")
        try hrFieldDescMesg.setNativeFieldNum(RecordMesg.heartRateFieldNum)
        try hrFieldDescMesg.setNativeMesgNum(.record)
        messages.append(hrFieldDescMesg)

        // Every FIT ACTIVITY file MUST contain Record messages
        var timestamp = startTime

        // Create one hour (3600 seconds) of Record data
        for i in 0...3600 {
            // Create a new Record message and set the timestamp
            let recordMesg = RecordMesg()
            try recordMesg.setTimestamp(timestamp)

            // Fake Record Data of Various Signal Patterns
            try recordMesg.setDistance(Float64(i)) // Ramp
            try recordMesg.setSpeed(1) // Flatline
            try recordMesg.setHeartRate(UInt8((sin(twoPI * (0.01 * Double(i) + 10)) + 1.0) * 127.0)) // Sine
            try recordMesg.setCadence(UInt8(i % 255)) // Sawtooth
            try recordMesg.setPower(UInt16((i % 255) < 127 ? 150 : 250)) // Square
            try recordMesg.setAltitude(Float64(abs(Float(i).truncatingRemainder(dividingBy: 255.0) - 127.0))) // Triangle
            try recordMesg.setPositionLat(0)
            try recordMesg.setPositionLong(Int32(round(Double(i) * semicirclesPerMeter)))

            // Add a Developer Field to the Record Message
            let hrDevField = DeveloperField(fieldDescription: hrFieldDescMesg, developerDataIdMesg: developerIdMesg)
            try hrDevField.setValue(index: 0, value: ((sin(twoPI * (0.01 * Double(i) + 10)) + 1.0) * 127.0))
            recordMesg.setDeveloperField(hrDevField)

            messages.append(recordMesg)

            // Increment the timestamp by one second
            timestamp = DateTime(timestamp: timestamp.timestamp + 1)
        }

        // Timer Events are a BEST PRACTICE for FIT ACTIVITY files
        let eventMesgStop = EventMesg()
        try eventMesgStop.setTimestamp(timestamp)
        try eventMesgStop.setEvent(.timer)
        try eventMesgStop.setEventType(.stopAll)
        messages.append(eventMesgStop)

        // Every FIT ACTIVITY file MUST contain at least one Lap message
        let lapMesg = LapMesg()
        try lapMesg.setMessageIndex(0)
        try lapMesg.setTimestamp(timestamp)
        try lapMesg.setStartTime(startTime)
        try lapMesg.setTotalElapsedTime(Float64(timestamp.timestamp - startTime.timestamp))
        try lapMesg.setTotalTimerTime(Float64(timestamp.timestamp - startTime.timestamp))
        messages.append(lapMesg)

        // Every FIT ACTIVITY file MUST contain at least one Session message
        let sessionMesg = SessionMesg()
        try sessionMesg.setMessageIndex(0)
        try sessionMesg.setTimestamp(timestamp)
        try sessionMesg.setStartTime(startTime)
        try sessionMesg.setTotalElapsedTime(Float64(timestamp.timestamp - startTime.timestamp))
        try sessionMesg.setTotalTimerTime(Float64(timestamp.timestamp - startTime.timestamp))
        try sessionMesg.setSport(.standUpPaddleboarding)
        try sessionMesg.setSubSport(.generic)
        try sessionMesg.setFirstLapIndex(0)
        try sessionMesg.setNumLaps(1)

        // Add a Developer Field to the Session message
        let doughnutsEarnedDevField = DeveloperField(fieldDescription: doughnutsFieldDescMesg, developerDataIdMesg: developerIdMesg)
        try doughnutsEarnedDevField.setValue(index: 0, value: sessionMesg.getTotalElapsedTime()! / 1200.0)
        sessionMesg.setDeveloperField(doughnutsEarnedDevField)
        messages.append(sessionMesg)

        // Every FIT ACTIVITY file MUST contain EXACTLY one Activity message
        let activityMesg = ActivityMesg()
        try activityMesg.setTimestamp(timestamp)
        try activityMesg.setTotalTimerTime(sessionMesg.getTotalTimerTime()!)
        try activityMesg.setNumSessions(1)
        let timezoneOffset = TimeZone.current.secondsFromGMT()
        try activityMesg.setLocalTimestamp(LocalDateTime(Int(timestamp.timestamp) + timezoneOffset))
        messages.append(activityMesg)

        try createActivityFile(messages: messages, fileName: fileName, startTime: startTime)
    }

    func testLapSwimActivity() throws {
        // Example Swim Data representing a 500 yard pool swim using different strokes and drills.
        let swimData:[[String:Any]] = [
            ["type": "Active","duration":20,"stroke":"Freestyle","strokes":30],
            ["type": "Active","duration":25,"stroke":"Freestyle","strokes":20],
            ["type": "Active","duration":30,"stroke":"Freestyle","strokes":10],
            ["type": "Active","duration":35,"stroke":"Freestyle","strokes":20],
            ["type": "Lap"],
            ["type": "Idle","duration":60],
            ["type": "Lap"],
            ["type": "Active","duration":20,"stroke":"Backstroke","strokes":30],
            ["type": "Active","duration":25,"stroke":"Backstroke","strokes":20],
            ["type": "Active","duration":30,"stroke":"Backstroke","strokes":10],
            ["type": "Active","duration":35,"stroke":"Backstroke","strokes":20],
            ["type": "Lap"],
            ["type": "Idle","duration":60],
            ["type": "Lap"],
            ["type": "Active","duration":20,"stroke":"Breaststroke","strokes":30],
            ["type": "Active","duration":25,"stroke":"Breaststroke","strokes":20],
            ["type": "Active","duration":30,"stroke":"Breaststroke","strokes":10],
            ["type": "Active","duration":35,"stroke":"Breaststroke","strokes":20],
            ["type": "Lap"],
            ["type": "Idle","duration":60],
            ["type": "Lap"],
            ["type": "Active","duration":20,"stroke":"Butterfly","strokes":30],
            ["type": "Active","duration":25,"stroke":"Butterfly","strokes":20],
            ["type": "Active","duration":30,"stroke":"Butterfly","strokes":10],
            ["type": "Active","duration":35,"stroke":"Butterfly","strokes":20],
            ["type": "Lap"],
            ["type": "Idle","duration":60],
            ["type": "Lap"],
            ["type": "Active","duration":40,"stroke":"Drill"],
            ["type": "Active","duration":40,"stroke":"Drill"],
            ["type": "Active","duration":40,"stroke":"Drill"],
            ["type": "Active","duration":40,"stroke":"Drill"],
            ["type": "Lap"]
        ]

        let lengthTypes = [
            "Invalid":LengthType.invalid,
            "Idle":LengthType.idle,
            "Active":LengthType.active
        ]

        let strokeTypes = [
            "Invalid":SwimStroke.invalid,
            "Freestyle":SwimStroke.freestyle,
            "Backstroke":SwimStroke.backstroke,
            "Breaststroke":SwimStroke.breaststroke,
            "Butterfly":SwimStroke.butterfly,
            "Drill":SwimStroke.drill,
            "Mixed":SwimStroke.mixed,
            "Im":SwimStroke.im
        ]

        let fileName = "SwiftActivityEncodeRecipeLapSwim.fit"
        var messages:[Mesg] = []

        // The starting timestamp for the activity
        let startTime = DateTime()

        // Timer Events are a BEST PRACTICE for FIT ACTIVITY files
        let eventMesgStart = EventMesg()
        try eventMesgStart.setTimestamp(startTime)
        try eventMesgStart.setEvent(.timer)
        try eventMesgStart.setEventType(.start)
        messages.append(eventMesgStart)

        //
        // Create a Length or Lap message for each item in the sample swim data. Calculate
        // distance, duration, and stroke count for each lap and the overall session.
        //

        // Session Accumulators
        var sessionTotalElapsedTime:Float = 0
        var sessionDistance:Float = 0
        var sessionNumLengths:UInt16 = 0
        var sessionNumActiveLengths:UInt16 = 0
        var sessionTotalStrokes:UInt32 = 0

        // Lap accumulators
        var lapTotalElapsedTime:Float = 0
        var lapDistance:Float = 0
        var lapNumActiveLengths:UInt16 = 0
        var lapNumLengths:UInt16 = 0
        var lapFirstLengthIndex:UInt16 = 0
        var lapTotalStrokes:UInt32 = 0
        var lapStartTime = startTime

        let poolLength:Float = 22.86
        let poolLengthUnit = DisplayMeasure.statute
        var timestamp = startTime
        var messageIndex:UInt16 = 0

        for swimLength in swimData {
            let type = swimLength["type"] as! String

            if (type == "Lap") {
                // Create a Lap message, set its fields, and write it to the file
                let lapMesg = LapMesg()
                try lapMesg.setTimestamp(timestamp)
                try lapMesg.setStartTime(lapStartTime)
                try lapMesg.setTotalElapsedTime(Float64(lapTotalElapsedTime))
                try lapMesg.setTotalTimerTime(Float64(lapTotalElapsedTime))
                try lapMesg.setTotalDistance(Float64(lapDistance))
                try lapMesg.setFirstLengthIndex(lapFirstLengthIndex)
                try lapMesg.setNumActiveLengths(lapNumActiveLengths)
                try lapMesg.setNumLengths(lapNumLengths)
                try lapMesg.setSport(.swimming)
                try lapMesg.setSubSport(.lapSwimming)
                try lapMesg.setTotalStrokes(UInt32(lapTotalStrokes))
                try lapMesg.setAvgStrokeDistance(Double(lapDistance) / Float64(lapTotalStrokes))
                messages.append(lapMesg)

                // Reset the Lap accumulators
                lapFirstLengthIndex = messageIndex
                lapNumActiveLengths = 0
                lapNumLengths = 0
                lapTotalElapsedTime = 0
                lapDistance = 0
                lapTotalStrokes = 0
                lapStartTime = timestamp
            }
            else {
                let duration: Int = swimLength["duration"] as! Int
                let lengthType = lengthTypes[type] ?? .invalid

                // Create a Length message and its fields
                let lengthMesg = LengthMesg()
                try lengthMesg.setMessageIndex(messageIndex)
                try lengthMesg.setStartTime(timestamp)
                try lengthMesg.setTotalElapsedTime(Float64(duration))
                try lengthMesg.setTotalTimerTime(Float64(duration))
                try lengthMesg.setLengthType(lengthType)

                timestamp = DateTime(timestamp: timestamp.timestamp + UInt32(duration))
                try lengthMesg.setTimestamp(timestamp)

                // Create the Record message that pairs with the Length Message
                let recordMesg = RecordMesg()
                try recordMesg.setTimestamp(timestamp)
                try recordMesg.setDistance(Float64(sessionDistance + poolLength))

                // Is this an Active Length?
                if (lengthType == LengthType.active) {
                    // Get the Active data from the model
                    let stroke = swimLength.keys.contains("stroke") ? swimLength["stroke"] as! String : "Invalid"
                    let strokes = swimLength.keys.contains("strokes") ? UInt32(swimLength["strokes"] as! Int) : 0
                    let swimStroke = strokeTypes[stroke] ?? .invalid

                    // Set the Active data on the Length Message
                    try lengthMesg.setAvgSpeed(Double(poolLength) / Double(duration))
                    try lengthMesg.setSwimStroke(swimStroke)
                    let cadence = UInt8((Int(strokes) * 60) / duration)

                    if (strokes > 0)
                    {
                        try lengthMesg.setTotalStrokes(UInt16(strokes))
                        try lengthMesg.setAvgSwimmingCadence(cadence)
                    }

                    // Set the Active data on the Record Message
                    try recordMesg.setSpeed(Float64(poolLength / Float(duration)))
                    if (strokes > 0)
                    {
                        try recordMesg.setCadence(cadence)
                    }

                    // Increment the "Active" accumulators
                    sessionNumActiveLengths += 1
                    lapNumActiveLengths += 1
                    sessionDistance += poolLength
                    lapDistance += poolLength
                    sessionTotalStrokes += strokes
                    lapTotalStrokes += strokes
                }

                // Write the messages to the file
                messages.append(recordMesg)
                messages.append(lengthMesg)

                // Increment the "Total" accumulators
                sessionTotalElapsedTime += Float(duration)
                lapTotalElapsedTime += Float(duration)
                sessionNumLengths += 1
                lapNumLengths += 1
                messageIndex += 1
            }
        }

        // Timer Events are a BEST PRACTICE for FIT ACTIVITY files
        let eventMesgStop = EventMesg()
        try eventMesgStop.setTimestamp(timestamp)
        try eventMesgStop.setEvent(.timer)
        try eventMesgStop.setEventType(.stopAll)
        messages.append(eventMesgStop)

        // Every FIT ACTIVITY file MUST contain at least one Session message
        let sessionMesg = SessionMesg()
        try sessionMesg.setTimestamp(timestamp)
        try sessionMesg.setStartTime(startTime)
        try sessionMesg.setTotalElapsedTime(Float64(sessionTotalElapsedTime))
        try sessionMesg.setTotalTimerTime(Float64(sessionTotalElapsedTime))
        try sessionMesg.setTotalDistance(Float64(sessionDistance))
        try sessionMesg.setSport(.swimming)
        try sessionMesg.setSubSport(.lapSwimming)
        try sessionMesg.setFirstLapIndex(0)
        try sessionMesg.setNumLaps(1)
        try sessionMesg.setPoolLength(Float64(poolLength))
        try sessionMesg.setPoolLengthUnit(poolLengthUnit)
        try sessionMesg.setNumLengths(sessionNumLengths)
        try sessionMesg.setNumActiveLengths(sessionNumActiveLengths)
        try sessionMesg.setTotalStrokes(sessionTotalStrokes)
        try sessionMesg.setAvgStrokeDistance(Float64(sessionDistance / Float(sessionTotalStrokes)))
        messages.append(sessionMesg)

        // Every FIT ACTIVITY file MUST contain EXACTLY one Activity message
        let activityMesg = ActivityMesg()
        try activityMesg.setTimestamp(timestamp)
        try activityMesg.setTotalTimerTime(sessionMesg.getTotalTimerTime()!)
        try activityMesg.setNumSessions(1)
        let timezoneOffset = TimeZone.current.secondsFromGMT()
        try activityMesg.setLocalTimestamp(LocalDateTime(Int(timestamp.timestamp) + timezoneOffset))
        messages.append(activityMesg)

        try createActivityFile(messages: messages, fileName: fileName, startTime: startTime)
    }

    func createActivityFile(messages:[Mesg], fileName:String, startTime:DateTime) throws{
        // The combination of file type, manufacturer id, product id, and serial number should be unique.
        // When available, a non-random serial number should be used.
        let fileType = File.activity
        let manufacturerId = Manufacturer.development
        let productId: UInt16 = 0
        let softwareVersion: Float32 = 1.0
        let serialNumber = UInt32.random(in: 1..<UInt32.max)

        // Every FIT file MUST contain a File ID message
        let fileIdMesg = FileIdMesg()
        try fileIdMesg.setType(fileType)
        try fileIdMesg.setManufacturer(manufacturerId)
        try fileIdMesg.setProduct(productId)
        try fileIdMesg.setTimeCreated(startTime)
        try fileIdMesg.setSerialNumber(serialNumber)

        // A Device Info message is a BEST PRACTICE for FIT ACTIVITY files
        let deviceInfoMesg = DeviceInfoMesg()
        try deviceInfoMesg.setDeviceIndex(DeviceIndexValues.creator)
        try deviceInfoMesg.setManufacturer(manufacturerId)
        try deviceInfoMesg.setProduct(productId)
        try deviceInfoMesg.setProductName("FIT Cookbook") // Max 20 Chars
        try deviceInfoMesg.setSerialNumber(serialNumber)
        try deviceInfoMesg.setSoftwareVersion(Float64(softwareVersion))
        try deviceInfoMesg.setTimestamp(startTime)

        // Create a FIT Encode object
        let encoder = Encoder()

        // Write the messages to the file, in the proper sequence
        encoder.write(mesg: fileIdMesg)
        encoder.write(mesg: deviceInfoMesg)

        encoder.write(mesgs: messages)

        // Update the data size in the header and calculate the CRC
        let encodedData = encoder.close()

        let fileURL = URL(string: fileName , relativeTo: URL(fileURLWithPath: String(testDataPath)))
        try encodedData.write(to: fileURL!)
    }
}
